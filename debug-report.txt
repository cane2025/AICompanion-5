=== AICompanion-5 Debug Report ===
Generated: Thu Aug 21 13:54:08 CEST 2025

=== Package.json ===
{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "scripts": {
    "dev:api": "PORT=3001 NODE_ENV=development tsx server/index.ts",
    "dev:client": "vite --port 5175 --strictPort --host 127.0.0.1",
    "dev:open": "node -e \"require('child_process').exec(process.platform==='darwin'?'open http://127.0.0.1:5175':process.platform==='win32'?'start http://127.0.0.1:5175':'xdg-open http://127.0.0.1:5175')\"",
    "dev:all": "run-p dev:api dev:client",
    "check": "tsc",
    "build": "vite build",
    "smoke": "bash scripts/smoke-dev.sh"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@jridgewell/trace-mapping": "^0.3.25",
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-accordion": "^1.2.4",
    "@radix-ui/react-alert-dialog": "^1.1.7",
    "@radix-ui/react-aspect-ratio": "^1.1.3",
    "@radix-ui/react-avatar": "^1.1.4",
    "@radix-ui/react-checkbox": "^1.1.5",
    "@radix-ui/react-collapsible": "^1.1.4",
    "@radix-ui/react-context-menu": "^2.2.7",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-dropdown-menu": "^2.1.7",
    "@radix-ui/react-hover-card": "^1.1.7",
    "@radix-ui/react-label": "^2.1.3",
    "@radix-ui/react-menubar": "^1.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.6",
    "@radix-ui/react-popover": "^1.1.7",
    "@radix-ui/react-progress": "^1.1.3",
    "@radix-ui/react-radio-group": "^1.2.4",
    "@radix-ui/react-scroll-area": "^1.2.4",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.3",
    "@radix-ui/react-slider": "^1.2.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.1.4",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.7",
    "@radix-ui/react-toggle": "^1.1.3",
    "@radix-ui/react-toggle-group": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.2.0",
    "@tanstack/react-query": "^5.60.5",
    "@types/bcryptjs": "^2.4.6",
    "@types/cors": "^2.8.19",
    "axios": "^1.11.0",
    "bcryptjs": "^3.0.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "connect-pg-simple": "^10.0.0",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "date-fns": "^3.6.0",
    "drizzle-orm": "^0.39.1",
    "drizzle-zod": "^0.7.0",
    "embla-carousel-react": "^8.6.0",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "framer-motion": "^11.13.1",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.453.0",
    "memorystore": "^1.6.7",
    "next-themes": "^0.4.6",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.55.0",
    "react-icons": "^5.4.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.15.2",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.2.5",
    "vaul": "^1.1.2",
    "wouter": "^3.3.5",
    "ws": "^8.18.0",
    "zod": "^3.24.2",
    "zod-validation-error": "^3.4.0"
  },
  "devDependencies": {
    "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/typography": "^0.5.16",
    "@types/cookie-parser": "^1.4.9",
    "@types/express": "^5.0.3",
    "@types/node": "^24.3.0",
    "@types/ws": "^8.18.1",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.21",
    "concurrently": "^8.2.2",
    "esbuild": "^0.21.5",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "tsx": "^4.7.0",
    "typescript": "^5.9.2",
    "vite": "^5.4.0"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  }
}

=== Server Routes ===
File: server/routes/dev.ts
import { Router } from "express";
import { store, persist } from "../devStorage";
import { randomUUID } from "crypto";

export const devRoutes = Router();

function staffIdOf(req: any) {
  return req.cookies?.devToken || req.get("X-Dev-Token") || "s_demo";
}

// === AUTH ===
devRoutes.post("/auth/login", (req, res) => {
  const token = req.get("X-Dev-Token") || "s_demo";
  res.cookie("devToken", token, { httpOnly: false, sameSite: "lax" });
  return res.json({ ok: true, user: { id: token } });
});

devRoutes.get("/auth/session", (req, res) => {
  const t = req.cookies?.devToken;
  if (!t) return res.status(401).json({ ok: false });
  return res.json({ ok: true, user: { id: t } });
});

// === STAFF ===
devRoutes.get("/staff", (_req, res) => {
  return res.json(store.staff ?? []);
});

// === CLIENTS ===
devRoutes.get("/clients/all", (_req, res) => {
  return res.json(store.clients ?? []);
});

devRoutes.get("/staff/:staffId/clients", (req, res) => {
  const list = (store.clients ?? []).filter(
    (c: any) => c.staffId === req.params.staffId
  );
  return res.json(list);
});

devRoutes.post("/clients", (req, res) => {
  const body = req.body || {};
  const item = {
    id: "c_" + randomUUID(),
    initials: body.initials ?? "",
    staffId: body.staffId ?? staffIdOf(req),
    status: body.status ?? "active",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  };

=== API Endpoints ===

=== Frontend API Calls ===
client/src/App.tsx:    queryFn: api.getStaff,
client/src/App.tsx:    enabled: isAuthenticated, // Only fetch when authenticated
client/src/components/monthly-report-dialog.tsx:    queryFn: () => api.getClientsByStaff(staffId || ""),
client/src/components/monthly-report-dialog.tsx:      const response = await fetch("/api/monthly-reports", {
client/src/components/functional-gfp-form.tsx:        const response = await fetch(
client/src/components/ui/carousel.tsx:      setCanScrollPrev(api.canScrollPrev())
client/src/components/ui/carousel.tsx:      setCanScrollNext(api.canScrollNext())
client/src/components/ui/carousel.tsx:      api.on("reInit", onSelect)
client/src/components/ui/carousel.tsx:      api.on("select", onSelect)
client/src/components/client-detail-view.tsx:      const response = await fetch(`/api/clients/${client.id}`, {
client/src/components/client-detail-view.tsx:      const response = await fetch(`/api/monthly-reports/${id}`, {
client/src/components/client-detail-view.tsx:      const response = await fetch(`/api/monthly-reports/${id}`, {
client/src/components/client-detail-view.tsx:      const response = await fetch(`/api/vimsa-time/${id}`, {
client/src/components/client-detail-view.tsx:      const response = await fetch(`/api/vimsa-time/${id}`, {
client/src/components/simple-implementation-plan-dialog.tsx:      const response = await fetch("/api/implementation-plans", {
client/src/components/care-plan-list.tsx:    queryFn: () => fetch("/api/care-plans/all").then((res) => res.json()),
client/src/components/client-management.tsx:        ? api.updateClient(client.id, data as UpdateClient)
client/src/components/client-management.tsx:        : api.createClient(data as ClientFormData),
client/src/components/client-management.tsx:    refetch,
client/src/components/client-management.tsx:    queryFn: api.getClients,
client/src/components/client-management.tsx:    queryFn: api.getStaff,
client/src/components/client-management.tsx:    mutationFn: (id: string) => api.deleteClient(id),
client/src/components/client-management.tsx:    mutationFn: (id: string) => api.restoreClient(id),
client/src/components/client-management.tsx:          <Button onClick={() => refetch()}>
client/src/components/staff-management.tsx:        ? api.updateStaff(staffMember.id, data)
client/src/components/staff-management.tsx:        : api.createStaff(data),
client/src/components/staff-management.tsx:    refetch,
client/src/components/staff-management.tsx:    queryFn: api.getStaff,
client/src/components/staff-management.tsx:    mutationFn: (id: string) => api.deleteStaff(id),
client/src/components/staff-management.tsx:          <Button onClick={() => refetch()}>
client/src/components/staff-client-management.tsx:      const response = await fetch("/api/clients", {
client/src/components/staff-client-management.tsx:      const response = await fetch(`/api/clients/${clientId}`, {
client/src/components/care-plan-dialog-new.tsx:        const clientsResponse = await fetch(`/api/staff/${primaryStaffId}/clients`);
client/src/components/care-plan-dialog-new.tsx:          throw new Error(`Failed to fetch clients: ${clientsResponse.status}`);
client/src/components/care-plan-dialog-new.tsx:        const newClientResponse = await fetch("/api/clients", {
client/src/components/care-plan-dialog-new.tsx:      const response = await fetch("/api/care-plans", {
client/src/components/care-plan-dialog-new.tsx:      await fetch("/api/implementation-plans", {
client/src/components/care-plan-dialog-new.tsx:      await fetch("/api/weekly-documentation", {
client/src/components/care-plan-dialog-new.tsx:      await fetch("/api/monthly-reports", {
client/src/components/care-plan-dialog-new.tsx:      await fetch("/api/vimsa-time", {
client/src/components/implementation-plan-dialog.tsx:      api.getCarePlanByClient(client!.id).then((plan) => (plan ? [plan] : [])),
client/src/components/implementation-plan-dialog.tsx:    queryFn: () => api.getImplementationPlanById(existingPlanId!),
client/src/components/implementation-plan-dialog.tsx:        const response = await fetch(`/api/implementation-plans`, {
client/src/components/implementation-plan-dialog.tsx:        return api.createImplementationPlan({
client/src/components/implementation-plan-dialog.tsx:      const response = await fetch("/api/implementation-plans", {
client/src/components/implementation-plan-form.tsx:    queryFn: () => api.getImplementationPlanByClient(client.id),
client/src/components/implementation-plan-form.tsx:      return api.createImplementationPlan(data);
client/src/components/admin-setup.tsx:      const response = await fetch("/api/auth/register", {
client/src/components/care-plan-dialog.tsx:    queryFn: api.getStaff,
client/src/components/care-plan-dialog.tsx:    queryFn: () => api.getClientsByStaff(staffId || ""),
client/src/components/care-plan-dialog.tsx:        const clients = await api.getClientsByStaff(primaryStaffId);
client/src/components/care-plan-dialog.tsx:        const carePlan = await api.createCarePlan({
client/src/components/care-plan-dialog.tsx:        await api.createImplementationPlan({
client/src/components/care-plan-dialog.tsx:        await api.createWeeklyDocumentation({
client/src/components/care-plan-dialog.tsx:        await api.createMonthlyReport({
client/src/components/care-plan-dialog.tsx:        await api.createVimsaTime({
client/src/components/weekly-documentation-dialog.tsx:    queryFn: () => api.getClientsByStaff(staffId || ""),
client/src/components/weekly-documentation-dialog.tsx:      const response = await fetch("/api/weekly-documentation", {
client/src/components/staff-sidebar.tsx:      api.createStaff(data),
client/src/components/staff-sidebar.tsx:    mutationFn: (id: string) => api.deleteStaff(id),
client/src/components/simple-login.tsx:      const response = await fetch("/api/auth/login", {
client/src/components/simple-working-care-plan.tsx:      const clientResponse = await fetch("/api/clients", {
client/src/components/simple-working-care-plan.tsx:      const carePlanResponse = await fetch("/api/care-plans", {
client/src/components/simple-working-care-plan.tsx:      await fetch("/api/implementation-plans", {
client/src/components/simple-care-plan-dialog.tsx:      const clientResp = await fetch("/api/clients", {
client/src/components/simple-care-plan-dialog.tsx:      const carePlanResp = await fetch("/api/care-plans", {
client/src/components/simple-care-plan-dialog.tsx:      await fetch("/api/implementation-plans", {
client/src/components/simple-care-plan-dialog.tsx:      await fetch("/api/weekly-documentation", {
client/src/components/simple-care-plan-dialog.tsx:      await fetch("/api/monthly-reports", {
client/src/components/simple-care-plan-dialog.tsx:      await fetch("/api/vimsa-time", {
client/src/components/vimsa-time-dialog.tsx:    queryFn: () => api.getClientsByStaff(staffId || ""),
client/src/components/vimsa-time-dialog.tsx:      const response = await fetch("/api/vimsa-time", {
client/src/components/complete-workflow-overview.tsx:      const response = await fetch("/api/staff", {
client/src/components/complete-workflow-overview.tsx:      const response = await fetch("/api/clients", {
client/src/components/complete-workflow-overview.tsx:      const response = await fetch("/api/weekly-documentation", {
client/src/components/complete-workflow-overview.tsx:      const response = await fetch("/api/monthly-reports", {
client/src/components/complete-workflow-overview.tsx:      const response = await fetch("/api/care-plans", {
client/src/components/complete-workflow-overview.tsx:      const response = await fetch("/api/implementation-plans", {
client/src/components/complete-workflow-overview.tsx:      const response = await fetch("/api/vimsa-time", {
client/src/hooks/use-auth.tsx:  login: (data: api.LoginData) => Promise<void>;
client/src/hooks/use-auth.tsx:        const currentUser = await api.checkAuth();
client/src/hooks/use-auth.tsx:  const login = async (data: api.LoginData) => {
client/src/hooks/use-auth.tsx:    const loggedInUser = await api.login(data);
client/src/hooks/use-auth.tsx:    await api.logout();
client/src/hooks/use-realtime-sync.tsx:        // Invalidate relevant queries to fetch fresh data
client/src/hooks/use-save-data.ts:      // ...construct additional fetch options if needed...
client/src/hooks/use-save-data.ts:      const res = await fetch(url, {
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/staff`, { credentials: "include" }).then((res) =>
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/staff`, {
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/staff/${id}`, {
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/staff/${id}`, {
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/staff/${id}/restore`, {
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/clients/all`, { credentials: "include" }).then((res) =>
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/clients`, {
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/clients/${id}`, {
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/clients/${id}`, {
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/clients/${id}/restore`, {
client/src/lib/api.ts:  const res = await fetch(`${API_BASE_URL}/auth/login`, {
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/auth/logout`, {
client/src/lib/api.ts:  fetch(`${API_BASE_URL}/auth/me`, { credentials: "include" }).then((res) =>

=== Error Logs ===
[36m
[1mlib/index.js[22m → [1mdist/cjs[22m...[39m
[32mcreated [1mdist/cjs[22m in [1m18ms[22m[39m
[36m
[1mlib/index.js[22m → [1mdist/es[22m...[39m
[32mcreated [1mdist/es[22m in [1m7ms[22m[39m
[36m
[1mtypes/index.d.ts[22m → [1mdist/index.d.ts[22m...[39m
[32mcreated [1mdist/index.d.ts[22m in [1m11ms[22m[39m
[36m
[1mlib/index.js[22m → [1mdist/cjs[22m...[39m
[32mcreated [1mdist/cjs[22m in [1m22ms[22m[39m
[36m
[1mlib/index.js[22m → [1mdist/es[22m...[39m
[32mcreated [1mdist/es[22m in [1m11ms[22m[39m
[36m
[1mtypes/index.d.ts[22m → [1mdist/index.d.ts[22m...[39m
[32mcreated [1mdist/index.d.ts[22m in [1m18ms[22m[39m
[36m
[1mlib/index.js[22m → [1mdist/cjs[22m...[39m
[32mcreated [1mdist/cjs[22m in [1m18ms[22m[39m
[36m
[1mlib/index.js[22m → [1mdist/es[22m...[39m
[32mcreated [1mdist/es[22m in [1m7ms[22m[39m
[36m
[1mtypes/index.d.ts[22m → [1mdist/index.d.ts[22m...[39m
[32mcreated [1mdist/index.d.ts[22m in [1m11ms[22m[39m
[36m
[1mlib/index.js[22m → [1mdist/cjs[22m...[39m
[32mcreated [1mdist/cjs[22m in [1m22ms[22m[39m
[36m
[1mlib/index.js[22m → [1mdist/es[22m...[39m
[32mcreated [1mdist/es[22m in [1m11ms[22m[39m
[36m
[1mtypes/index.d.ts[22m → [1mdist/index.d.ts[22m...[39m
[32mcreated [1mdist/index.d.ts[22m in [1m18ms[22m[39m
/nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin/bash: line 1: tsx: command not found
/nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin/bash: line 1: tsx: command not found
