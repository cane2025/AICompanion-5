{"file_contents":{"INSTALLATION.md":{"content":"# Installation Guide - Svensk Vårduppföljning\n\n## Snabb Start\n\n1. **Ladda ner projektet från GitHub**\n```bash\ngit clone https://github.com/cane2025/uppfoljningssystem.git\ncd uppfoljningssystem\n```\n\n2. **Installera dependencies**\n```bash\nnpm install\n```\n\n3. **Sätt upp miljövariabler**\nSkapa en `.env` fil med:\n```\nDATABASE_URL=\"din-postgresql-databas-url\"\n```\n\n4. **Starta projektet**\n```bash\nnpm run dev\n```\n\n## Databas Setup\n\nProjektet använder PostgreSQL. Efter du satt DATABASE_URL:\n```bash\nnpm run db:push\n```\n\nDetta skapar alla tabeller automatiskt.\n\n## Tillgänglig på\n- Frontend: http://localhost:5173\n- Backend API: http://localhost:5000\n\n## Funktioner som fungerar direkt:\n✅ Alla 5 vårdflödeskomponenter\n✅ Personal-klient filtrering  \n✅ Färgkodad status tracking\n✅ Automatisk databassparning\n✅ Komplett CRUD för alla tabeller\n\n## Felsökning\n\n**Problem: \"Module not found\"**\n- Kör `npm install` igen\n\n**Problem: \"Database connection failed\"** \n- Kontrollera DATABASE_URL i .env\n- Kör `npm run db:push`\n\n**Problem: \"Port already in use\"**\n- Ändra port i vite.config.ts eller stäng andra servrar","size_bytes":1128},"README.md":{"content":"# uppfoljningssystem\n# Svensk Vårduppföljning System (Öppenvård)\n\nEn komplett administrativ webbapplikation för hantering av vårduppföljning inom öppenvård.\n\n## Funktioner\n\n### 🗓️ Veckodokumentation\n- Veckor 33-52 med svenska veckodagar\n- Klickbar färgkodning (grön=klart, gul=påmind, röd=ej gjort)\n- Automatisk status tracking\n\n### 📊 Månadsrapporter  \n- Augusti-December\n- Progress tracking med visuell feedback\n- Automatisk databassparning\n\n### 🏥 Vårdplan\n- 5-stegs process: Inkommen → Skannad → Tillsagd → Inlämnad → Skickad\n- Progress bar med klickbara steg\n- Datumspårning för varje steg\n\n### 📋 Genomförandeplan\n- 2 uppföljningsmöten med datumhantering\n- Status tracking per möte\n- Automatisk sparning\n\n### ⏰ Vimsa Tid\n- Veckovis godkännande (vecka 33-52)\n- Procentöversikt\n- Status per vecka\n\n## Teknisk Stack\n\n- **Frontend**: React 18 + TypeScript + Tailwind CSS\n- **Backend**: Node.js + Express + TypeScript  \n- **Database**: PostgreSQL med Drizzle ORM\n- **UI**: Radix UI komponenter\n- **State**: TanStack Query\n- **Form**: React Hook Form + Zod validation\n\n## Installation\n\n```bash\nnpm install\nnpm run dev\n```\n\n## Databas Setup\n\n```bash\nnpm run db:push\n```\n\n## Miljövariabler\n\nProjektet kräver en PostgreSQL databas. Sätt `DATABASE_URL` i miljövariablerna.\n\n## Personal-Klient System\n\nSystemet har komplett personal-klient koppling där val av personal automatiskt filtrerar tillhörande klienter.\n\n## Färgkodning\n\n- 🟢 **Grön**: Uppgift slutförd\n- 🟡 **Gul**: Påmind eller sen\n- 🔴 **Röd**: Ej utförd\n\nAlla klick sparas automatiskt till databasen.# uppfoljningssystem\n# uppfoljningssystem\n# uppfoljningssystem\n# cane2025\n","size_bytes":1695},"create-admin.js":{"content":"// Temporary script to create admin user\nconst bcrypt = require(\"bcryptjs\");\n\nconst main = async () => {\n  const passwordHash = await bcrypt.hash(\"admin123\", 12);\n  console.log(\"Admin user credentials:\");\n  console.log(\"Username: admin\");\n  console.log(\"Password: admin123\");\n  console.log(\"Password hash:\", passwordHash);\n  console.log(\"\\nDu kan använda dessa för att logga in första gången.\");\n};\n\nmain();\n","size_bytes":412},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Medical Staff Follow-up System\n\n## Overview\n\nThis is a React-based web application for managing medical staff follow-ups in an outpatient care facility (\"Öppenvård\"). The system provides a comprehensive dashboard for tracking staff information, follow-up appointments, and administrative data with a focus on healthcare workflow management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized production builds\n- **UI Framework**: Radix UI components with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation\n- **Routing**: Single-page application with component-based navigation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured via Drizzle)\n- **Session Storage**: PostgreSQL-based session storage using connect-pg-simple\n- **API Design**: RESTful API with JSON responses\n\n### Data Storage\n- **Primary Database**: PostgreSQL via Neon Database serverless connection\n- **Development Storage**: In-memory storage implementation for development/testing\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Session Storage**: PostgreSQL-based sessions for user state persistence\n\n## Key Components\n\n### Data Models\n1. **Staff** - Core staff member information including personal details, employment data, and contact information\n2. **Follow-ups** - Medical follow-up records linked to staff members with status tracking, comments, and priority levels\n\n### UI Components\n- **Dashboard** - Overview with statistics and recent activity\n- **Staff Sidebar** - Navigation and staff member filtering\n- **Staff Section** - Individual staff member management\n- **Follow-up Forms** - Data entry and management for follow-up records\n- **Personal Info Forms** - Staff member information management\n\n### API Endpoints\n- Staff CRUD operations (`/api/staff`)\n- Follow-up CRUD operations (`/api/followups`)\n- Data export functionality (`/api/export`)\n\n## Data Flow\n\n1. **Client Requests**: React components use TanStack Query to fetch data from Express API endpoints\n2. **API Processing**: Express routes validate requests using Zod schemas and interact with storage layer\n3. **Data Storage**: Drizzle ORM handles database operations with PostgreSQL\n4. **Response Handling**: API responses are cached by React Query and updates trigger UI re-renders\n5. **Form Submissions**: React Hook Form handles client-side validation before API submission\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless** - Serverless PostgreSQL connection for production\n- **drizzle-orm** - Type-safe database ORM\n- **@tanstack/react-query** - Server state management\n- **react-hook-form** - Form handling and validation\n- **zod** - Runtime type validation\n- **@radix-ui/** - Accessible UI component primitives\n\n### Development Dependencies\n- **Vite** - Build tool and development server\n- **TypeScript** - Type safety and developer experience\n- **Tailwind CSS** - Utility-first CSS framework\n- **Replit plugins** - Development environment integration\n\n## Deployment Strategy\n\n### Development\n- Vite development server with hot module replacement\n- In-memory storage for rapid development iteration\n- TypeScript compilation and type checking\n- Automatic browser refresh on code changes\n\n### Production\n- **Build Process**: Vite builds optimized React bundle, esbuild bundles Express server\n- **Server Bundle**: Single JavaScript file with external dependencies\n- **Database**: PostgreSQL connection via environment variables\n- **Static Assets**: Served from Express with Vite-built frontend\n- **Environment Configuration**: Environment variables for database connection and API keys\n- **Node.js Runtime**: Configured for Node.js 20+ with proper deployment scripts\n\n### Deployment Configuration\nThe following files have been configured to ensure proper Node.js deployment:\n\n1. **replit.toml** - Replit-specific deployment configuration with Node.js 20 runtime\n2. **.replit** - Environment configuration with Node.js 20 module and deployment settings\n3. **Dockerfile** - Container deployment support\n4. **deploy.json** - General deployment metadata\n5. **build.sh** - Automated build script for deployment\n6. **deploy.sh** - Production deployment script with validation\n\n### Recent Deployment Fixes (August 2025)\n- ✓ Updated replit.toml deployment command to use `node dist/index.js` directly\n- ✓ Verified Node.js 20 runtime is properly configured in .replit\n- ✓ Confirmed build process creates dist/index.js correctly via esbuild\n- ✓ Added deploy.sh script with Node.js version validation and build verification\n- ✓ Tested production build runs successfully with Node.js command\n\n### Deployment Commands\n- **Build**: `npm run build` or `./build.sh` or `./deploy.sh`\n- **Start Production**: `NODE_ENV=production node dist/index.js`\n- **Start Development**: `npm run dev`\n- **Prerequisites**: Node.js 18+ and npm 8+ (configured for Node.js 20)\n\n### Key Architectural Decisions\n\n1. **Monorepo Structure**: Single repository with shared types between client and server in `/shared` directory\n2. **Type Safety**: End-to-end TypeScript with shared schemas using Drizzle and Zod\n3. **Database Choice**: PostgreSQL for production reliability with Drizzle ORM for type safety\n4. **Component Library**: Radix UI for accessibility and Tailwind for rapid styling\n5. **State Management**: React Query eliminates need for complex client state management\n6. **Form Validation**: Zod schemas shared between client and server for consistent validation\n7. **Development Experience**: Vite for fast builds and hot reloading, TypeScript for developer productivity\n\nThe system is designed for healthcare environments with emphasis on data integrity, user experience, and maintainable code structure.","size_bytes":6150},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        ungdoms: {\n          50: \"hsl(var(--ungdoms-50))\",\n          100: \"hsl(var(--ungdoms-100))\",\n          200: \"hsl(var(--ungdoms-200))\",\n          300: \"hsl(var(--ungdoms-300))\",\n          400: \"hsl(var(--ungdoms-400))\",\n          500: \"hsl(var(--ungdoms-500))\",\n          600: \"hsl(var(--ungdoms-600))\",\n          700: \"hsl(var(--ungdoms-700))\",\n          800: \"hsl(var(--ungdoms-800))\",\n          900: \"hsl(var(--ungdoms-900))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3075},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcryptjs\";\nimport { \n  insertStaffSchema, \n  insertClientSchema,\n  insertWeeklyDocumentationSchema,\n  insertMonthlyReportSchema,\n  insertCarePlanSchema,\n  insertImplementationPlanSchema,\n  insertVimsaTimeSchema,\n  insertUserSchema,\n  loginSchema,\n  updateStaffSchema,\n  updateWeeklyDocumentationSchema,\n  updateMonthlyReportSchema,\n  updateCarePlanSchema,\n  updateImplementationPlanSchema,\n  updateVimsaTimeSchema\n} from \"@shared/schema\";\n\n// WebSocket broadcasting function\nlet wss: WebSocketServer;\n\nfunction broadcastUpdate(type: string, data: any) {\n  if (!wss) return;\n  const msg = JSON.stringify({ type, data });\n  wss.clients.forEach(client => {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(msg);\n    }\n  });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validated = loginSchema.parse(req.body);\n      const user = await storage.getUserByUsername(validated.username);\n      \n      if (!user || !user.isActive) {\n        return res.status(401).json({ message: \"Ogiltigt användarnamn eller lösenord\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(validated.password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Ogiltigt användarnamn eller lösenord\" });\n      }\n\n      // Don't send password hash to client\n      const { passwordHash, ...userWithoutPassword } = user;\n      \n      res.json({ \n        user: userWithoutPassword,\n        message: \"Inloggning lyckades\"\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Ogiltiga inloggningsuppgifter\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validated = insertUserSchema.parse(req.body);\n      \n      // Hash password\n      const saltRounds = 12;\n      const passwordHash = await bcrypt.hash(validated.passwordHash, saltRounds);\n      \n      const userData = {\n        ...validated,\n        passwordHash,\n      };\n\n      const user = await storage.createUser(userData);\n      const { passwordHash: _, ...userWithoutPassword } = user;\n      \n      res.status(201).json({ \n        user: userWithoutPassword,\n        message: \"Användare skapad\"\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Kunde inte skapa användare\" });\n    }\n  });\n\n  app.post(\"/api/auth/change-password\", async (req, res) => {\n    try {\n      const { currentPassword, newPassword, userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"Användar-ID krävs\" });\n      }\n\n      const user = await storage.getUserByUsername(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"Användare hittades inte\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(currentPassword, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Nuvarande lösenord är felaktigt\" });\n      }\n\n      const saltRounds = 12;\n      const newPasswordHash = await bcrypt.hash(newPassword, saltRounds);\n      \n      const updatedUser = await storage.updateUserPassword(user.id, newPasswordHash);\n      if (!updatedUser) {\n        return res.status(500).json({ message: \"Kunde inte uppdatera lösenord\" });\n      }\n\n      res.json({ message: \"Lösenord uppdaterat framgångsrikt\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Serverfel vid lösenordsändring\" });\n    }\n  });\n  \n  // Staff routes\n  app.get(\"/api/staff\", async (req, res) => {\n    try {\n      const staff = await storage.getAllStaff();\n      res.json(staff);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch staff\" });\n    }\n  });\n\n  // Search endpoint for staff\n  app.get(\"/api/staff/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.json([]);\n      }\n      \n      const allStaff = await storage.getAllStaff();\n      const filteredStaff = allStaff.filter(staff => \n        staff.name.toLowerCase().includes(query.toLowerCase()) ||\n        staff.initials.toLowerCase().includes(query.toLowerCase()) ||\n        (staff.personnummer && staff.personnummer.toLowerCase().includes(query.toLowerCase())) ||\n        (staff.telefon && staff.telefon.toLowerCase().includes(query.toLowerCase())) ||\n        (staff.epost && staff.epost.toLowerCase().includes(query.toLowerCase())) ||\n        (staff.roll && staff.roll.toLowerCase().includes(query.toLowerCase())) ||\n        (staff.avdelning && staff.avdelning.toLowerCase().includes(query.toLowerCase()))\n      );\n      \n      res.json(filteredStaff);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte söka personal\" });\n    }\n  });\n\n  // Create staff\n  app.post(\"/api/staff\", async (req, res) => {\n    try {\n      const staffData = req.body;\n      const staff = await storage.createStaff(staffData);\n      broadcastUpdate('staff', staff);\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error creating staff:\", error);\n      res.status(500).json({ message: \"Kunde inte skapa personal\" });\n    }\n  });\n\n  // Delete staff\n  app.delete(\"/api/staff/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteStaff(id);\n      broadcastUpdate('staff', { deleted: id });\n      res.json({ message: \"Personal borttagen\" });\n    } catch (error) {\n      console.error(\"Error deleting staff:\", error);\n      res.status(500).json({ message: \"Kunde inte ta bort personal\" });\n    }\n  });\n\n  // Client routes\n  app.get(\"/api/clients/all\", async (req, res) => {\n    try {\n      const clients = await storage.getAllClients();\n      res.json(clients);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta klienter\" });\n    }\n  });\n\n  app.post(\"/api/clients\", async (req, res) => {\n    try {\n      const clientData = req.body;\n      const client = await storage.createClient(clientData);\n      broadcastUpdate('clients', client);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error creating client:\", error);\n      res.status(500).json({ message: \"Kunde inte skapa klient\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteClient(id);\n      res.json({ message: \"Klient borttagen\" });\n    } catch (error) {\n      console.error(\"Error deleting client:\", error);\n      res.status(500).json({ message: \"Kunde inte ta bort klient\" });\n    }\n  });\n\n  // Care plan routes\n  app.get(\"/api/care-plans/all\", async (req, res) => {\n    try {\n      const carePlans = await storage.getAllCarePlans();\n      res.json(carePlans);\n    } catch (error) {\n      console.error(\"Error getting care plans:\", error);\n      res.status(500).json({ message: \"Kunde inte hämta vårdplaner\" });\n    }\n  });\n\n  app.post(\"/api/care-plans\", async (req, res) => {\n    try {\n      const carePlanData = req.body;\n      const carePlan = await storage.createCarePlan(carePlanData);\n      res.json(carePlan);\n    } catch (error) {\n      console.error(\"Error creating care plan:\", error);\n      res.status(500).json({ message: \"Kunde inte skapa vårdplan\" });\n    }\n  });\n\n  // Weekly documentation routes\n  app.get(\"/api/weekly-documentation/all\", async (req, res) => {\n    try {\n      const docs = await storage.getAllWeeklyDocumentation();\n      res.json(docs);\n    } catch (error) {\n      console.error(\"Error getting weekly documentation:\", error);\n      res.status(500).json({ message: \"Kunde inte hämta veckodokumentation\" });\n    }\n  });\n\n  app.post(\"/api/weekly-documentation\", async (req, res) => {\n    try {\n      const docData = req.body;\n      const doc = await storage.createWeeklyDocumentation(docData);\n      res.json(doc);\n    } catch (error) {\n      console.error(\"Error creating weekly documentation:\", error);\n      res.status(500).json({ message: \"Kunde inte skapa veckodokumentation\" });\n    }\n  });\n\n  // Monthly report routes\n  app.get(\"/api/monthly-reports/all\", async (req, res) => {\n    try {\n      const reports = await storage.getAllMonthlyReports();\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error getting monthly reports:\", error);\n      res.status(500).json({ message: \"Kunde inte hämta månadsrapporter\" });\n    }\n  });\n\n  app.post(\"/api/monthly-reports\", async (req, res) => {\n    try {\n      const reportData = req.body;\n      const report = await storage.createMonthlyReport(reportData);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error creating monthly report:\", error);\n      res.status(500).json({ message: \"Kunde inte skapa månadsrapport\" });\n    }\n  });\n\n  app.get(\"/api/staff/:id\", async (req, res) => {\n    try {\n      const staff = await storage.getStaff(req.params.id);\n      if (!staff) {\n        return res.status(404).json({ message: \"Staff member not found\" });\n      }\n      res.json(staff);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch staff member\" });\n    }\n  });\n\n  app.put(\"/api/staff/:id\", async (req, res) => {\n    try {\n      const validatedData = updateStaffSchema.parse(req.body);\n      const staff = await storage.updateStaff(req.params.id, validatedData);\n      if (!staff) {\n        return res.status(404).json({ message: \"Staff member not found\" });\n      }\n      broadcastUpdate('staff', staff);\n      res.json(staff);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid staff data\", error });\n    }\n  });\n\n  // Client routes - Updated to match frontend expectations\n  app.get(\"/api/staff/:id/clients\", async (req, res) => {\n    try {\n      const clients = await storage.getClientsByStaffId(req.params.id);\n      res.json(clients);\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n      res.status(500).json({ message: \"Kunde inte hämta klienter\" });\n    }\n  });\n\n  app.get(\"/api/clients/all\", async (req, res) => {\n    try {\n      const clients = await storage.getAllClients();\n      res.json(clients);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta alla klienter\" });\n    }\n  });\n\n  app.post(\"/api/clients\", async (req, res) => {\n    try {\n      console.log(\"Creating client with data:\", req.body);\n      const validatedData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(validatedData);\n      res.status(201).json(client);\n    } catch (error) {\n      console.error(\"Error creating client:\", error);\n      res.status(400).json({ message: \"Kunde inte skapa klient\", error: String(error) });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const client = await storage.updateClient(req.params.id, updates);\n      if (!client) {\n        return res.status(404).json({ message: \"Klient hittades inte\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(400).json({ message: \"Kunde inte uppdatera klient\", error: String(error) });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteClient(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Klient hittades inte\" });\n      }\n      res.json({ message: \"Klient borttagen\" });\n    } catch (error) {\n      console.error(\"Error deleting client:\", error);\n      res.status(500).json({ message: \"Kunde inte ta bort klient\" });\n    }\n  });\n\n  // Weekly documentation routes\n  app.get(\"/api/clients/:clientId/weekly/:year/:week\", async (req, res) => {\n    try {\n      const { clientId, year, week } = req.params;\n      const doc = await storage.getWeeklyDocumentation(clientId, parseInt(year), parseInt(week));\n      if (!doc) {\n        return res.status(404).json({ message: \"Weekly documentation not found\" });\n      }\n      res.json(doc);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch weekly documentation\" });\n    }\n  });\n\n  app.post(\"/api/weekly-documentation\", async (req, res) => {\n    try {\n      const validatedData = insertWeeklyDocumentationSchema.parse(req.body);\n      const doc = await storage.createWeeklyDocumentation(validatedData);\n      res.status(201).json(doc);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid weekly documentation data\", error });\n    }\n  });\n\n  app.put(\"/api/weekly-documentation/:id\", async (req, res) => {\n    try {\n      const validatedData = updateWeeklyDocumentationSchema.parse(req.body);\n      const doc = await storage.updateWeeklyDocumentation(req.params.id, validatedData);\n      if (!doc) {\n        return res.status(404).json({ message: \"Weekly documentation not found\" });\n      }\n      res.json(doc);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid weekly documentation data\", error });\n    }\n  });\n\n  // Monthly report routes\n  app.get(\"/api/clients/:clientId/monthly/:year/:month\", async (req, res) => {\n    try {\n      const { clientId, year, month } = req.params;\n      const report = await storage.getMonthlyReport(clientId, parseInt(year), parseInt(month));\n      if (!report) {\n        return res.status(404).json({ message: \"Monthly report not found\" });\n      }\n      res.json(report);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch monthly report\" });\n    }\n  });\n\n  app.post(\"/api/monthly-reports\", async (req, res) => {\n    try {\n      const validatedData = insertMonthlyReportSchema.parse(req.body);\n      const report = await storage.createMonthlyReport(validatedData);\n      res.status(201).json(report);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid monthly report data\", error });\n    }\n  });\n\n  app.put(\"/api/monthly-reports/:id\", async (req, res) => {\n    try {\n      const validatedData = updateMonthlyReportSchema.parse(req.body);\n      const report = await storage.updateMonthlyReport(req.params.id, validatedData);\n      if (!report) {\n        return res.status(404).json({ message: \"Monthly report not found\" });\n      }\n      res.json(report);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid monthly report data\", error });\n    }\n  });\n\n  // Care plan routes\n  app.get(\"/api/care-plans/all\", async (req, res) => {\n    try {\n      const carePlans = await storage.getAllCarePlans();\n      res.json(carePlans);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta vårdplaner\" });\n    }\n  });\n\n  app.get(\"/api/care-plans/:clientId\", async (req, res) => {\n    try {\n      const plan = await storage.getCarePlan(req.params.clientId);\n      if (!plan) {\n        return res.status(404).json({ message: \"Vårdplan hittades inte\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta vårdplan\" });\n    }\n  });\n\n  app.post(\"/api/care-plans\", async (req, res) => {\n    try {\n      const validated = insertCarePlanSchema.parse(req.body);\n      const carePlan = await storage.createCarePlan(validated);\n      \n      // Implementation plan will be created separately when needed\n      \n      res.status(201).json(carePlan);\n    } catch (error) {\n      res.status(400).json({ message: \"Kunde inte skapa vårdplan\" });\n    }\n  });\n\n  app.delete(\"/api/care-plans/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteCarePlan(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Vårdplan hittades inte\" });\n      }\n      res.json({ message: \"Vårdplan borttagen\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte ta bort vårdplan\" });\n    }\n  });\n\n  app.get(\"/api/care-plans/staff/:staffId\", async (req, res) => {\n    try {\n      const carePlans = await storage.getAllCarePlans();\n      const staffCarePlans = carePlans.filter(cp => cp.staffId === req.params.staffId);\n      res.json(staffCarePlans);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta vårdplaner för personal\" });\n    }\n  });\n\n  // Implementation plan routes  \n  app.get(\"/api/implementation-plans/all\", async (req, res) => {\n    try {\n      const implementationPlans = await storage.getAllImplementationPlans();\n      res.json(implementationPlans);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta genomförandeplaner\" });\n    }\n  });\n\n  app.get(\"/api/implementation-plans/:clientId\", async (req, res) => {\n    try {\n      const plan = await storage.getImplementationPlan(req.params.clientId);\n      if (!plan) {\n        return res.status(404).json({ message: \"Genomförandeplan hittades inte\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta genomförandeplan\" });\n    }\n  });\n\n  app.get(\"/api/implementation-plans/staff/:staffId\", async (req, res) => {\n    try {\n      const implementationPlans = await storage.getAllImplementationPlans();\n      const staffPlans = implementationPlans.filter(ip => ip.staffId === req.params.staffId);\n      res.json(staffPlans);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta genomförandeplaner för personal\" });\n    }\n  });\n\n\n\n  // Weekly documentation routes\n  app.get(\"/api/weekly-documentation/all\", async (req, res) => {\n    try {\n      const weeklyDocs = await storage.getAllWeeklyDocumentation();\n      res.json(weeklyDocs);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta veckodokumentation\" });\n    }\n  });\n\n  app.get(\"/api/weekly-documentation/:clientId\", async (req, res) => {\n    try {\n      const weeklyDocs = await storage.getAllWeeklyDocumentation();\n      const clientDocs = weeklyDocs.filter(doc => doc.clientId === req.params.clientId);\n      res.json(clientDocs);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta veckodokumentation för klient\" });\n    }\n  });\n\n  // Monthly reports routes\n  app.get(\"/api/monthly-reports/all\", async (req, res) => {\n    try {\n      const monthlyReports = await storage.getAllMonthlyReports();\n      res.json(monthlyReports);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta månadsrapporter\" });\n    }\n  });\n\n  app.get(\"/api/monthly-reports/:clientId\", async (req, res) => {\n    try {\n      const monthlyReports = await storage.getAllMonthlyReports();\n      const clientReports = monthlyReports.filter(report => report.staffId === req.params.clientId);\n      res.json(clientReports);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta månadsrapporter för klient\" });\n    }\n  });\n\n  // Vimsa time routes\n  app.get(\"/api/vimsa-time/all\", async (req, res) => {\n    try {\n      const vimsaTimeData = await storage.getAllVimsaTime();\n      res.json(vimsaTimeData);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta Vimsa tiddata\" });\n    }\n  });\n\n  app.get(\"/api/vimsa-time/:clientId\", async (req, res) => {\n    try {\n      const vimsaTimeData = await storage.getAllVimsaTime();\n      const clientTimeData = vimsaTimeData.filter(time => time.clientId === req.params.clientId);\n      res.json(clientTimeData);\n    } catch (error) {\n      res.status(500).json({ message: \"Kunde inte hämta Vimsa tiddata för klient\" });\n    }\n  });\n\n  app.post(\"/api/care-plans\", async (req, res) => {\n    try {\n      const validatedData = insertCarePlanSchema.parse(req.body);\n      const plan = await storage.createCarePlan(validatedData);\n      broadcastUpdate('carePlans', plan);\n      res.status(201).json(plan);\n    } catch (error) {\n      res.status(400).json({ message: \"Ogiltig vårdplan data\", error });\n    }\n  });\n\n  app.put(\"/api/care-plans/:id\", async (req, res) => {\n    try {\n      const validatedData = updateCarePlanSchema.parse(req.body);\n      const plan = await storage.updateCarePlan(req.params.id, validatedData);\n      if (!plan) {\n        return res.status(404).json({ message: \"Care plan not found\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid care plan data\", error });\n    }\n  });\n\n  // Implementation plan routes\n  app.get(\"/api/clients/:clientId/implementation-plan\", async (req, res) => {\n    try {\n      const plan = await storage.getImplementationPlan(req.params.clientId);\n      if (!plan) {\n        return res.status(404).json({ message: \"Implementation plan not found\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch implementation plan\" });\n    }\n  });\n\n  app.post(\"/api/implementation-plans\", async (req, res) => {\n    try {\n      const validatedData = insertImplementationPlanSchema.parse(req.body);\n      const plan = await storage.createImplementationPlan(validatedData);\n      broadcastUpdate('implementationPlans', plan);\n      res.status(201).json(plan);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid implementation plan data\", error });\n    }\n  });\n\n  app.put(\"/api/implementation-plans/:id\", async (req, res) => {\n    try {\n      const validatedData = updateImplementationPlanSchema.parse(req.body);\n      const plan = await storage.updateImplementationPlan(req.params.id, validatedData);\n      if (!plan) {\n        return res.status(404).json({ message: \"Implementation plan not found\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid implementation plan data\", error });\n    }\n  });\n\n  // Vimsa time routes\n  app.get(\"/api/clients/:clientId/vimsa/:year/:week\", async (req, res) => {\n    try {\n      const { clientId, year, week } = req.params;\n      const time = await storage.getVimsaTime(clientId, parseInt(year), parseInt(week));\n      if (!time) {\n        return res.status(404).json({ message: \"Vimsa time not found\" });\n      }\n      res.json(time);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch Vimsa time\" });\n    }\n  });\n\n  app.post(\"/api/vimsa-time\", async (req, res) => {\n    try {\n      const validatedData = insertVimsaTimeSchema.parse(req.body);\n      const time = await storage.createVimsaTime(validatedData);\n      res.status(201).json(time);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid Vimsa time data\", error });\n    }\n  });\n\n  app.put(\"/api/vimsa-time/:id\", async (req, res) => {\n    try {\n      const validatedData = updateVimsaTimeSchema.parse(req.body);\n      const time = await storage.updateVimsaTime(req.params.id, validatedData);\n      if (!time) {\n        return res.status(404).json({ message: \"Vimsa time not found\" });\n      }\n      res.json(time);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid Vimsa time data\", error });\n    }\n  });\n\n  // Create HTTP server and WebSocket server\n  const httpServer = createServer(app);\n  wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws) => {\n    console.log('WebSocket client connected');\n    \n    ws.on('message', (msg) => {\n      // Broadcast to all other clients\n      wss.clients.forEach(client => {\n        if (client !== ws && client.readyState === WebSocket.OPEN) {\n          client.send(msg);\n        }\n      });\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":23615},"server/storage.ts":{"content":"import { \n  type User,\n  type InsertUser,\n  type Staff, \n  type InsertStaff, \n  type UpdateStaff,\n  type Client,\n  type InsertClient,\n  type UpdateClient,\n  type WeeklyDocumentation,\n  type InsertWeeklyDocumentation,\n  type UpdateWeeklyDocumentation,\n  type MonthlyReport,\n  type InsertMonthlyReport,\n  type UpdateMonthlyReport,\n  type CarePlan,\n  type InsertCarePlan,\n  type UpdateCarePlan,\n  type ImplementationPlan,\n  type InsertImplementationPlan,\n  type UpdateImplementationPlan,\n  type VimsaTime,\n  type InsertVimsaTime,\n  type UpdateVimsaTime\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserPassword(userId: string, newPasswordHash: string): Promise<User | undefined>;\n  \n  // Staff operations\n  getAllStaff(): Promise<Staff[]>;\n  getStaff(id: string): Promise<Staff | undefined>;\n  getStaffByName(name: string): Promise<Staff | undefined>;\n  createStaff(staff: InsertStaff): Promise<Staff>;\n  updateStaff(id: string, updates: UpdateStaff): Promise<Staff | undefined>;\n  deleteStaff(id: string): Promise<boolean>;\n  \n  // Client operations\n  getAllClients(): Promise<Client[]>;\n  getClientsByStaffId(staffId: string): Promise<Client[]>;\n  getClient(id: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, updates: UpdateClient): Promise<Client | undefined>;\n  deleteClient(id: string): Promise<boolean>;\n  \n  // Weekly documentation operations\n  getAllWeeklyDocumentation(): Promise<WeeklyDocumentation[]>;\n  getWeeklyDocumentation(clientId: string, year: number, week: number): Promise<WeeklyDocumentation | undefined>;\n  createWeeklyDocumentation(doc: InsertWeeklyDocumentation): Promise<WeeklyDocumentation>;\n  updateWeeklyDocumentation(id: string, updates: UpdateWeeklyDocumentation): Promise<WeeklyDocumentation | undefined>;\n  \n  // Monthly report operations\n  getAllMonthlyReports(): Promise<MonthlyReport[]>;\n  getMonthlyReport(clientId: string, year: number, month: number): Promise<MonthlyReport | undefined>;\n  createMonthlyReport(report: InsertMonthlyReport): Promise<MonthlyReport>;\n  updateMonthlyReport(id: string, updates: UpdateMonthlyReport): Promise<MonthlyReport | undefined>;\n  \n  // Care plan operations\n  getAllCarePlans(): Promise<CarePlan[]>;\n  getCarePlan(clientId: string): Promise<CarePlan | undefined>;\n  createCarePlan(plan: InsertCarePlan): Promise<CarePlan>;\n  updateCarePlan(id: string, updates: UpdateCarePlan): Promise<CarePlan | undefined>;\n  deleteCarePlan(id: string): Promise<boolean>;\n  \n  // Implementation plan operations\n  getAllImplementationPlans(): Promise<ImplementationPlan[]>;\n  getImplementationPlan(clientId: string): Promise<ImplementationPlan | undefined>;\n  createImplementationPlan(plan: InsertImplementationPlan): Promise<ImplementationPlan>;\n  updateImplementationPlan(id: string, updates: UpdateImplementationPlan): Promise<ImplementationPlan | undefined>;\n  \n  // Vimsa time operations\n  getAllVimsaTime(): Promise<VimsaTime[]>;\n  getVimsaTime(clientId: string, year: number, week: number): Promise<VimsaTime | undefined>;\n  createVimsaTime(time: InsertVimsaTime): Promise<VimsaTime>;\n  updateVimsaTime(id: string, updates: UpdateVimsaTime): Promise<VimsaTime | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private staff: Map<string, Staff>;\n  private clients: Map<string, Client>;\n  private weeklyDocumentation: Map<string, WeeklyDocumentation>;\n  private monthlyReports: Map<string, MonthlyReport>;\n  private carePlans: Map<string, CarePlan>;\n  private implementationPlans: Map<string, ImplementationPlan>;\n  private vimsaTime: Map<string, VimsaTime>;\n\n\n  constructor() {\n    this.users = new Map();\n    this.staff = new Map();\n    this.clients = new Map();\n    this.weeklyDocumentation = new Map();\n    this.monthlyReports = new Map();\n    this.carePlans = new Map();\n    this.implementationPlans = new Map();\n    this.vimsaTime = new Map();\n\n    this.initializeDefaultData();\n  }\n\n  private async initializeDefaultData() {\n    // Create default admin user\n    try {\n      const bcrypt = await import('bcryptjs');\n      const adminPasswordHash = await bcrypt.default.hash('admin123', 12);\n      \n      const adminUser: User = {\n        id: randomUUID(),\n        username: 'admin',\n        email: 'admin@ungdoms.se',\n        passwordHash: adminPasswordHash,\n        role: 'admin',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.users.set(adminUser.id, adminUser);\n    } catch (error) {\n      console.error('Failed to create default admin user:', error);\n    }\n\n    // Initialize default staff\n    this.initializeDefaultStaff();\n  }\n\n  // User operations\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date();\n    const user: User = {\n      id,\n      username: userData.username,\n      email: userData.email,\n      passwordHash: userData.passwordHash,\n      role: userData.role || \"user\",\n      isActive: userData.isActive !== undefined ? userData.isActive : true,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  private getInitials(name: string): string {\n    return name.split(' ').map(n => n[0]).join('');\n  }\n\n  private initializeDefaultStaff() {\n    const defaultStaffNames = [\n      \"Afif Derbas\", \"Ahmed Alrakabi\", \"Ahmed Ramadan\", \"Ajmen Rafiq\", \"Alana Salah\",\n      \"Alharis Albayati\", \"Amir Al-istarabadi\", \"Anjelika Bååth\", \"Bashdar Reza\",\n      \"Constanza Soto\", \"Deni Dulji\", \"Diana Gharib\", \"Drilon Muqkurtaj\", \"Heidar Farhan\",\n      \"Hussein Ahmed\", \"Ida Björkbacka\", \"Ikhlas Almaliki\", \"Intisar Almansour\",\n      \"Israa Touman\", \"Johan Wessberg\", \"Kaoula Channoufi\", \"Kim Torneus\", \"Lejla Kocacik\",\n      \"Michelle Nilsson\", \"Mirza Celik\", \"Mirza Hodzic\", \"Nasima Kuraishe\",\n      \"Nicolas Lazcano\", \"Omar Mezza\", \"Qasin Abdullahi\", \"Robert Ackar\", \"Samir Bezzina\",\n      \"Sebastian Holm\", \"Wissam Hemissi\", \"Yasmin Ibrahim\"\n    ];\n\n    defaultStaffNames.forEach(name => {\n      const id = randomUUID();\n      const staff: Staff = {\n        id,\n        name,\n        initials: this.getInitials(name),\n        personnummer: null,\n        telefon: null,\n        epost: null,\n        adress: null,\n        anställningsdatum: null,\n        roll: null,\n        avdelning: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.staff.set(id, staff);\n    });\n  }\n\n  // Staff operations\n  async getAllStaff(): Promise<Staff[]> {\n    return Array.from(this.staff.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getStaff(id: string): Promise<Staff | undefined> {\n    return this.staff.get(id);\n  }\n\n  async getStaffByName(name: string): Promise<Staff | undefined> {\n    return Array.from(this.staff.values()).find(staff => staff.name === name);\n  }\n\n  async createStaff(insertStaff: InsertStaff): Promise<Staff> {\n    const id = randomUUID();\n    const staff: Staff = {\n      id,\n      name: insertStaff.name,\n      initials: insertStaff.initials,\n      personnummer: insertStaff.personnummer || null,\n      telefon: insertStaff.telefon || null,\n      epost: insertStaff.epost || null,\n      adress: insertStaff.adress || null,\n      anställningsdatum: insertStaff.anställningsdatum || null,\n      roll: insertStaff.roll || null,\n      avdelning: insertStaff.avdelning || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.staff.set(id, staff);\n    return staff;\n  }\n\n  async updateStaff(id: string, updates: UpdateStaff): Promise<Staff | undefined> {\n    const existing = this.staff.get(id);\n    if (!existing) return undefined;\n\n    const updated: Staff = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.staff.set(id, updated);\n    return updated;\n  }\n\n  async deleteStaff(id: string): Promise<boolean> {\n    return this.staff.delete(id);\n  }\n\n  // Client operations\n  async getClientsByStaffId(staffId: string): Promise<Client[]> {\n    return Array.from(this.clients.values())\n      .filter(client => client.staffId === staffId)\n      .sort((a, b) => a.initials.localeCompare(b.initials));\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    return this.clients.get(id);\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const id = randomUUID();\n    const client: Client = {\n      id,\n      initials: insertClient.initials,\n      staffId: insertClient.staffId,\n      personalNumber: insertClient.personalNumber || null,\n      notes: insertClient.notes || null,\n      status: insertClient.status || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.clients.set(id, client);\n    return client;\n  }\n\n  async updateClient(id: string, updates: UpdateClient): Promise<Client | undefined> {\n    const existing = this.clients.get(id);\n    if (!existing) return undefined;\n\n    const updated: Client = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.clients.set(id, updated);\n    return updated;\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    return this.clients.delete(id);\n  }\n\n  async getAllClients(): Promise<Client[]> {\n    return Array.from(this.clients.values());\n  }\n\n  // Weekly documentation operations\n  async getWeeklyDocumentation(clientId: string, year: number, week: number): Promise<WeeklyDocumentation | undefined> {\n    return Array.from(this.weeklyDocumentation.values())\n      .find(doc => doc.clientId === clientId && doc.year === year && doc.week === week);\n  }\n\n  async createWeeklyDocumentation(insertDoc: InsertWeeklyDocumentation): Promise<WeeklyDocumentation> {\n    const id = randomUUID();\n    const doc: WeeklyDocumentation = {\n      id,\n      clientId: insertDoc.clientId,\n      staffId: insertDoc.staffId,\n      year: insertDoc.year,\n      week: insertDoc.week,\n      content: insertDoc.content || null,\n      mondayStatus: insertDoc.mondayStatus || null,\n      tuesdayStatus: insertDoc.tuesdayStatus || null,\n      wednesdayStatus: insertDoc.wednesdayStatus || null,\n      thursdayStatus: insertDoc.thursdayStatus || null,\n      fridayStatus: insertDoc.fridayStatus || null,\n      saturdayStatus: insertDoc.saturdayStatus || null,\n      sundayStatus: insertDoc.sundayStatus || null,\n      mondayDocumented: insertDoc.mondayDocumented !== undefined ? insertDoc.mondayDocumented : false,\n      tuesdayDocumented: insertDoc.tuesdayDocumented !== undefined ? insertDoc.tuesdayDocumented : false,\n      wednesdayDocumented: insertDoc.wednesdayDocumented !== undefined ? insertDoc.wednesdayDocumented : false,\n      thursdayDocumented: insertDoc.thursdayDocumented !== undefined ? insertDoc.thursdayDocumented : false,\n      fridayDocumented: insertDoc.fridayDocumented !== undefined ? insertDoc.fridayDocumented : false,\n      saturdayDocumented: insertDoc.saturdayDocumented !== undefined ? insertDoc.saturdayDocumented : false,\n      sundayDocumented: insertDoc.sundayDocumented !== undefined ? insertDoc.sundayDocumented : false,\n      documentation: insertDoc.documentation || null,\n      approved: insertDoc.approved !== undefined ? insertDoc.approved : false,\n      comments: insertDoc.comments || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.weeklyDocumentation.set(id, doc);\n    return doc;\n  }\n\n  async updateWeeklyDocumentation(id: string, updates: UpdateWeeklyDocumentation): Promise<WeeklyDocumentation | undefined> {\n    const existing = this.weeklyDocumentation.get(id);\n    if (!existing) return undefined;\n\n    const updated: WeeklyDocumentation = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.weeklyDocumentation.set(id, updated);\n    return updated;\n  }\n\n  // Monthly report operations\n  async getMonthlyReport(clientId: string, year: number, month: number): Promise<MonthlyReport | undefined> {\n    return Array.from(this.monthlyReports.values())\n      .find(report => report.year === year && report.month === month);\n  }\n\n  async createMonthlyReport(insertReport: InsertMonthlyReport): Promise<MonthlyReport> {\n    const id = randomUUID();\n    const report: MonthlyReport = {\n      id,\n      clientId: insertReport.clientId,\n      staffId: insertReport.staffId,\n      year: insertReport.year,\n      month: insertReport.month,\n      content: insertReport.content || null,\n      reportContent: insertReport.reportContent || null,\n      status: insertReport.status || null,\n      comment: insertReport.comment || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.monthlyReports.set(id, report);\n    return report;\n  }\n\n  async updateMonthlyReport(id: string, updates: UpdateMonthlyReport): Promise<MonthlyReport | undefined> {\n    const existing = this.monthlyReports.get(id);\n    if (!existing) return undefined;\n\n    const updated: MonthlyReport = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.monthlyReports.set(id, updated);\n    return updated;\n  }\n\n  // Care plan operations\n  async getCarePlan(clientId: string): Promise<CarePlan | undefined> {\n    return Array.from(this.carePlans.values())\n      .find(plan => plan.clientId === clientId);\n  }\n\n  async createCarePlan(insertPlan: InsertCarePlan): Promise<CarePlan> {\n    const id = randomUUID();\n    const plan: CarePlan = {\n      id,\n      clientId: insertPlan.clientId,\n      staffId: insertPlan.staffId,\n      planContent: insertPlan.planContent || null,\n      goals: insertPlan.goals || null,\n      interventions: insertPlan.interventions || null,\n      evaluationCriteria: insertPlan.evaluationCriteria || null,\n      receivedDate: insertPlan.receivedDate || null,\n      enteredJournalDate: insertPlan.enteredJournalDate || null,\n      staffNotifiedDate: insertPlan.staffNotifiedDate || null,\n      status: insertPlan.status || null,\n      isActive: insertPlan.isActive !== undefined ? insertPlan.isActive : null,\n      comment: insertPlan.comment || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.carePlans.set(id, plan);\n    return plan;\n  }\n\n  async updateCarePlan(id: string, updates: UpdateCarePlan): Promise<CarePlan | undefined> {\n    const existing = this.carePlans.get(id);\n    if (!existing) return undefined;\n\n    const updated: CarePlan = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.carePlans.set(id, updated);\n    return updated;\n  }\n\n  async deleteCarePlan(id: string): Promise<boolean> {\n    return this.carePlans.delete(id);\n  }\n\n  // Implementation plan operations\n  async getImplementationPlan(clientId: string): Promise<ImplementationPlan | undefined> {\n    return Array.from(this.implementationPlans.values())\n      .find(plan => plan.clientId === clientId);\n  }\n\n  async createImplementationPlan(insertPlan: InsertImplementationPlan): Promise<ImplementationPlan> {\n    const id = randomUUID();\n    const plan: ImplementationPlan = {\n      id,\n      clientId: insertPlan.clientId,\n      staffId: insertPlan.staffId,\n      carePlanId: insertPlan.carePlanId || null,\n      planContent: insertPlan.planContent || null,\n      goals: insertPlan.goals || null,\n      activities: insertPlan.activities || null,\n      followUpSchedule: insertPlan.followUpSchedule || null,\n      status: insertPlan.status || \"pending\",\n      isActive: insertPlan.isActive !== undefined ? insertPlan.isActive : true,\n      followup1: insertPlan.followup1 || false,\n      followup2: insertPlan.followup2 || false,\n      createdDate: insertPlan.createdDate || new Date(),\n      comments: insertPlan.comments || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.implementationPlans.set(id, plan);\n    return plan;\n  }\n\n  async updateImplementationPlan(id: string, updates: UpdateImplementationPlan): Promise<ImplementationPlan | undefined> {\n    const existing = this.implementationPlans.get(id);\n    if (!existing) return undefined;\n\n    const updated: ImplementationPlan = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.implementationPlans.set(id, updated);\n    return updated;\n  }\n\n  // Vimsa time operations\n  async getVimsaTime(clientId: string, year: number, week: number): Promise<VimsaTime | undefined> {\n    return Array.from(this.vimsaTime.values())\n      .find(time => time.clientId === clientId && time.year === year && time.week === week);\n  }\n\n  async createVimsaTime(insertTime: InsertVimsaTime): Promise<VimsaTime> {\n    const id = randomUUID();\n    const time: VimsaTime = {\n      id,\n      clientId: insertTime.clientId,\n      staffId: insertTime.staffId,\n      year: insertTime.year,\n      week: insertTime.week,\n      monday: insertTime.monday || 0,\n      tuesday: insertTime.tuesday || 0,\n      wednesday: insertTime.wednesday || 0,\n      thursday: insertTime.thursday || 0,\n      friday: insertTime.friday || 0,\n      saturday: insertTime.saturday || 0,\n      sunday: insertTime.sunday || 0,\n      totalHours: insertTime.totalHours || 0,\n      status: insertTime.status || null,\n      approved: insertTime.approved || false,\n      comments: insertTime.comments || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.vimsaTime.set(id, time);\n    return time;\n  }\n\n  async updateVimsaTime(id: string, updates: UpdateVimsaTime): Promise<VimsaTime | undefined> {\n    const existing = this.vimsaTime.get(id);\n    if (!existing) return undefined;\n\n    const updated: VimsaTime = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.vimsaTime.set(id, updated);\n    return updated;\n  }\n\n  // Get all care plans\n  async getAllCarePlans(): Promise<CarePlan[]> {\n    return Array.from(this.carePlans.values());\n  }\n\n  // Get all implementation plans\n  async getAllImplementationPlans(): Promise<ImplementationPlan[]> {\n    return Array.from(this.implementationPlans.values());\n  }\n\n\n\n  // Get all weekly documentation\n  async getAllWeeklyDocumentation(): Promise<WeeklyDocumentation[]> {\n    return Array.from(this.weeklyDocumentation.values());\n  }\n\n  // Get all monthly reports\n  async getAllMonthlyReports(): Promise<MonthlyReport[]> {\n    return Array.from(this.monthlyReports.values());\n  }\n\n  // Get all Vimsa time data\n  async getAllVimsaTime(): Promise<VimsaTime[]> {\n    return Array.from(this.vimsaTime.values());\n  }\n\n  // Update user password\n  async updateUserPassword(userId: string, newPasswordHash: string): Promise<User | undefined> {\n    const existing = this.users.get(userId);\n    if (!existing) return undefined;\n\n    const updated: User = {\n      ...existing,\n      passwordHash: newPasswordHash,\n      updatedAt: new Date(),\n    };\n    this.users.set(userId, updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":19387},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema-backup.ts":{"content":"import { pgTable, varchar, text, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { sql } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").notNull().unique(),\n  email: varchar(\"email\").notNull().unique(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  role: varchar(\"role\").notNull().default(\"staff\"), // admin, staff, viewer\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Staff table\nexport const staff = pgTable(\"staff\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  initials: varchar(\"initials\").notNull(),\n  personnummer: varchar(\"personnummer\").default(\"\"),\n  telefon: varchar(\"telefon\").default(\"\"),\n  epost: varchar(\"epost\").default(\"\"),\n  adress: varchar(\"adress\").default(\"\"),\n  anställningsdatum: varchar(\"anställningsdatum\").default(\"\"),\n  roll: varchar(\"roll\").default(\"\"),\n  avdelning: varchar(\"avdelning\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Clients table\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  initials: varchar(\"initials\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  personalNumber: varchar(\"personal_number\").default(\"\"),\n  notes: text(\"notes\").default(\"\"),\n  status: varchar(\"status\").default(\"active\"), // active, inactive\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Weekly documentation\nexport const weeklyDocumentation = pgTable(\"weekly_documentation\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  year: integer(\"year\").notNull(),\n  week: integer(\"week\").notNull(),\n  mondayDocumented: boolean(\"monday_documented\").default(false).notNull(),\n  tuesdayDocumented: boolean(\"tuesday_documented\").default(false).notNull(),\n  wednesdayDocumented: boolean(\"wednesday_documented\").default(false).notNull(),\n  thursdayDocumented: boolean(\"thursday_documented\").default(false).notNull(),\n  fridayDocumented: boolean(\"friday_documented\").default(false).notNull(),\n  documentation: text(\"documentation\").default(\"\"),\n  approved: boolean(\"approved\").default(false).notNull(),\n  comments: text(\"comments\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Monthly reports\nexport const monthlyReports = pgTable(\"monthly_reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  staffId: varchar(\"staff_id\").notNull(),\n  year: integer(\"year\").notNull(),\n  month: integer(\"month\").notNull(),\n  reportContent: text(\"report_content\").default(\"\"),\n  status: text(\"status\").default(\"draft\"), // draft, submitted, reviewed\n  comment: text(\"comment\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Care plans\nexport const carePlans = pgTable(\"care_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  planContent: text(\"plan_content\").default(\"\"),\n  goals: text(\"goals\").default(\"\"),\n  interventions: text(\"interventions\").default(\"\"),\n  evaluationCriteria: text(\"evaluation_criteria\").default(\"\"),\n  receivedDate: timestamp(\"received_date\"),\n  enteredJournalDate: timestamp(\"entered_journal_date\"),\n  staffNotifiedDate: timestamp(\"staff_notified_date\"),\n  status: text(\"status\").default(\"received\"), // received, entered_journal, staff_notified, gfp_pending, completed\n  isActive: boolean(\"is_active\").default(true),\n  comment: text(\"comment\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Implementation plans (GFP)\nexport const implementationPlans = pgTable(\"implementation_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  carePlanId: varchar(\"care_plan_id\"),\n  staffId: varchar(\"staff_id\").notNull(),\n  planContent: text(\"plan_content\").default(\"\"),\n  dueDate: timestamp(\"due_date\").notNull(), // 3 weeks from staff_notified_date\n  completedDate: timestamp(\"completed_date\"),\n  sentDate: timestamp(\"sent_date\"),\n  goals: text(\"goals\").default(\"\"),\n  activities: text(\"activities\").default(\"\"),\n  status: text(\"status\").default(\"pending\"), // pending, in_progress, completed, sent, overdue\n  isActive: boolean(\"is_active\").default(true),\n  comment: text(\"comment\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Vimsa time tracking\nexport const vimsaTime = pgTable(\"vimsa_time\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  year: integer(\"year\").notNull(),\n  week: integer(\"week\").notNull(),\n  hoursWorked: integer(\"hours_worked\").default(0),\n  matchesDocumentation: boolean(\"matches_documentation\").default(false), // green=true, red=false\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  activities: text(\"activities\").default(\"\"),\n  notes: text(\"notes\").default(\"\"),\n  comment: text(\"comment\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Follow-up Plans\nexport const followupPlans = pgTable(\"followup_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  implementationPlanId: varchar(\"implementation_plan_id\"),\n  description: text(\"description\").default(\"\"),\n  followupDate: timestamp(\"followup_date\").notNull(),\n  completedDate: timestamp(\"completed_date\"),\n  status: text(\"status\").default(\"scheduled\"), // scheduled, completed, cancelled\n  notes: text(\"notes\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Schema validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(3, \"Användarnamn måste vara minst 3 tecken\"),\n  password: z.string().min(6, \"Lösenord måste vara minst 6 tecken\"),\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWeeklyDocumentationSchema = createInsertSchema(weeklyDocumentation).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateWeeklyDocumentationSchema = insertWeeklyDocumentationSchema.partial();\n\nexport const insertMonthlyReportSchema = createInsertSchema(monthlyReports).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateMonthlyReportSchema = insertMonthlyReportSchema.partial();\n\nexport const insertCarePlanSchema = createInsertSchema(carePlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateCarePlanSchema = insertCarePlanSchema.partial();\n\nexport const insertImplementationPlanSchema = createInsertSchema(implementationPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateImplementationPlanSchema = insertImplementationPlanSchema.partial();\n\nexport const insertVimsaTimeSchema = createInsertSchema(vimsaTime).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateVimsaTimeSchema = insertVimsaTimeSchema.partial();\n\nexport const updateStaffSchema = insertStaffSchema.partial();\n});\n\nexport const insertMonthlyReportSchema = createInsertSchema(monthlyReports).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCarePlanSchema = createInsertSchema(carePlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertImplementationPlanSchema = createInsertSchema(implementationPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFollowupPlanSchema = createInsertSchema(followupPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertVimsaTimeSchema = createInsertSchema(vimsaTime).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Update schemas\nexport const updateStaffSchema = insertStaffSchema.partial();\nexport const updateClientSchema = insertClientSchema.partial();\nexport const updateWeeklyDocumentationSchema = insertWeeklyDocumentationSchema.partial();\nexport const updateMonthlyReportSchema = insertMonthlyReportSchema.partial();\nexport const updateCarePlanSchema = insertCarePlanSchema.partial();\nexport const updateImplementationPlanSchema = insertImplementationPlanSchema.partial();\nexport const updateVimsaTimeSchema = insertVimsaTimeSchema.partial();\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type Staff = typeof staff.$inferSelect;\nexport type Client = typeof clients.$inferSelect;\nexport type CarePlan = typeof carePlans.$inferSelect;  \nexport type ImplementationPlan = typeof implementationPlans.$inferSelect;\nexport type FollowupPlan = typeof followupPlans.$inferSelect;\nexport type WeeklyDocumentation = typeof weeklyDocumentation.$inferSelect;\nexport type MonthlyReport = typeof monthlyReports.$inferSelect;\nexport type VimsaTime = typeof vimsaTime.$inferSelect;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type InsertCarePlan = z.infer<typeof insertCarePlanSchema>;\nexport type InsertImplementationPlan = z.infer<typeof insertImplementationPlanSchema>;\nexport type InsertFollowupPlan = z.infer<typeof insertFollowupPlanSchema>;\nexport type InsertWeeklyDocumentation = z.infer<typeof insertWeeklyDocumentationSchema>;\nexport type InsertMonthlyReport = z.infer<typeof insertMonthlyReportSchema>;\nexport type InsertVimsaTime = z.infer<typeof insertVimsaTimeSchema>;\n\nexport type UpdateStaff = z.infer<typeof updateStaffSchema>;\nexport type UpdateClient = z.infer<typeof updateClientSchema>;\nexport type UpdateWeeklyDocumentation = z.infer<typeof updateWeeklyDocumentationSchema>;\nexport type UpdateMonthlyReport = z.infer<typeof updateMonthlyReportSchema>;\nexport type UpdateCarePlan = z.infer<typeof updateCarePlanSchema>;\nexport type UpdateImplementationPlan = z.infer<typeof updateImplementationPlanSchema>;\nexport type UpdateVimsaTime = z.infer<typeof updateVimsaTimeSchema>;","size_bytes":11189},"shared/schema.ts":{"content":"import { pgTable, varchar, text, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { sql } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").notNull().unique(),\n  email: varchar(\"email\").notNull().unique(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  role: varchar(\"role\").notNull().default(\"staff\"), // admin, staff, viewer\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Staff table\nexport const staff = pgTable(\"staff\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  initials: varchar(\"initials\").notNull(),\n  personnummer: varchar(\"personnummer\").default(\"\"),\n  telefon: varchar(\"telefon\").default(\"\"),\n  epost: varchar(\"epost\").default(\"\"),\n  adress: varchar(\"adress\").default(\"\"),\n  anställningsdatum: varchar(\"anställningsdatum\").default(\"\"),\n  roll: varchar(\"roll\").default(\"\"),\n  avdelning: varchar(\"avdelning\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Clients table\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  initials: varchar(\"initials\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  personalNumber: varchar(\"personal_number\").default(\"\"),\n  notes: text(\"notes\").default(\"\"),\n  status: varchar(\"status\").default(\"active\"), // active, inactive\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Weekly documentation\nexport const weeklyDocumentation = pgTable(\"weekly_documentation\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  year: integer(\"year\").notNull(),\n  week: integer(\"week\").notNull(),\n  content: text(\"content\").default(\"\"),\n  mondayStatus: varchar(\"monday_status\").default(\"not_done\"),\n  tuesdayStatus: varchar(\"tuesday_status\").default(\"not_done\"),\n  wednesdayStatus: varchar(\"wednesday_status\").default(\"not_done\"),\n  thursdayStatus: varchar(\"thursday_status\").default(\"not_done\"),\n  fridayStatus: varchar(\"friday_status\").default(\"not_done\"),\n  saturdayStatus: varchar(\"saturday_status\").default(\"not_done\"),\n  sundayStatus: varchar(\"sunday_status\").default(\"not_done\"),\n  mondayDocumented: boolean(\"monday_documented\").default(false).notNull(),\n  tuesdayDocumented: boolean(\"tuesday_documented\").default(false).notNull(),\n  wednesdayDocumented: boolean(\"wednesday_documented\").default(false).notNull(),\n  thursdayDocumented: boolean(\"thursday_documented\").default(false).notNull(),\n  fridayDocumented: boolean(\"friday_documented\").default(false).notNull(),\n  saturdayDocumented: boolean(\"saturday_documented\").default(false).notNull(),\n  sundayDocumented: boolean(\"sunday_documented\").default(false).notNull(),\n  documentation: text(\"documentation\").default(\"\"),\n  approved: boolean(\"approved\").default(false).notNull(),\n  comments: text(\"comments\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Monthly reports\nexport const monthlyReports = pgTable(\"monthly_reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  year: integer(\"year\").notNull(),\n  month: integer(\"month\").notNull(),\n  content: text(\"content\").default(\"\"),\n  reportContent: text(\"report_content\").default(\"\"),\n  status: varchar(\"status\").default(\"not_started\"), // not_started, in_progress, completed\n  comment: text(\"comment\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Care plans\nexport const carePlans = pgTable(\"care_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  planContent: text(\"plan_content\").default(\"\"),\n  goals: text(\"goals\").default(\"\"),\n  interventions: text(\"interventions\").default(\"\"),\n  evaluationCriteria: text(\"evaluation_criteria\"),\n  receivedDate: varchar(\"received_date\"),\n  enteredJournalDate: varchar(\"entered_journal_date\"),\n  staffNotifiedDate: varchar(\"staff_notified_date\"),\n  status: varchar(\"status\").default(\"received\"), // received, staff_notified, in_progress, completed\n  isActive: boolean(\"is_active\").default(true),\n  comment: text(\"comment\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Implementation plans (GFP)\nexport const implementationPlans = pgTable(\"implementation_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  carePlanId: varchar(\"care_plan_id\"),\n  planContent: text(\"plan_content\").default(\"\"),\n  goals: text(\"goals\").default(\"\"),\n  activities: text(\"activities\").default(\"\"),\n  followUpSchedule: text(\"follow_up_schedule\").default(\"\"),\n  status: varchar(\"status\").default(\"pending\"), // pending, in_progress, completed\n  isActive: boolean(\"is_active\").default(true),\n  followup1: boolean(\"followup1\").default(false),\n  followup2: boolean(\"followup2\").default(false),\n  createdDate: timestamp(\"created_date\").defaultNow(),\n  comments: text(\"comments\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Vimsa time tracking\nexport const vimsaTime = pgTable(\"vimsa_time\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  year: integer(\"year\").notNull(),\n  week: integer(\"week\").notNull(),\n  monday: integer(\"monday\").default(0),\n  tuesday: integer(\"tuesday\").default(0),\n  wednesday: integer(\"wednesday\").default(0),\n  thursday: integer(\"thursday\").default(0),\n  friday: integer(\"friday\").default(0),\n  saturday: integer(\"saturday\").default(0),\n  sunday: integer(\"sunday\").default(0),\n  totalHours: integer(\"total_hours\").default(0),\n  status: varchar(\"status\").default(\"not_started\"), // not_started, in_progress, completed\n  approved: boolean(\"approved\").default(false),\n  comments: text(\"comments\").default(\"\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Schema validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(3, \"Användarnamn måste vara minst 3 tecken\"),\n  password: z.string().min(6, \"Lösenord måste vara minst 6 tecken\"),\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWeeklyDocumentationSchema = createInsertSchema(weeklyDocumentation).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMonthlyReportSchema = createInsertSchema(monthlyReports).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCarePlanSchema = createInsertSchema(carePlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertImplementationPlanSchema = createInsertSchema(implementationPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertVimsaTimeSchema = createInsertSchema(vimsaTime).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Update schemas\nexport const updateStaffSchema = insertStaffSchema.partial();\nexport const updateClientSchema = insertClientSchema.partial();\nexport const updateWeeklyDocumentationSchema = insertWeeklyDocumentationSchema.partial();\nexport const updateMonthlyReportSchema = insertMonthlyReportSchema.partial();\nexport const updateCarePlanSchema = insertCarePlanSchema.partial();\nexport const updateImplementationPlanSchema = insertImplementationPlanSchema.partial();\nexport const updateVimsaTimeSchema = insertVimsaTimeSchema.partial();\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\n\nexport type Staff = typeof staff.$inferSelect;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type UpdateStaff = z.infer<typeof updateStaffSchema>;\n\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type UpdateClient = z.infer<typeof updateClientSchema>;\n\nexport type WeeklyDocumentation = typeof weeklyDocumentation.$inferSelect;\nexport type InsertWeeklyDocumentation = z.infer<typeof insertWeeklyDocumentationSchema>;\nexport type UpdateWeeklyDocumentation = z.infer<typeof updateWeeklyDocumentationSchema>;\n\nexport type MonthlyReport = typeof monthlyReports.$inferSelect;\nexport type InsertMonthlyReport = z.infer<typeof insertMonthlyReportSchema>;\nexport type UpdateMonthlyReport = z.infer<typeof updateMonthlyReportSchema>;\n\nexport type CarePlan = typeof carePlans.$inferSelect;\nexport type InsertCarePlan = z.infer<typeof insertCarePlanSchema>;\nexport type UpdateCarePlan = z.infer<typeof updateCarePlanSchema>;\n\nexport type ImplementationPlan = typeof implementationPlans.$inferSelect;\nexport type InsertImplementationPlan = z.infer<typeof insertImplementationPlanSchema>;\nexport type UpdateImplementationPlan = z.infer<typeof updateImplementationPlanSchema>;\n\nexport type VimsaTime = typeof vimsaTime.$inferSelect;\nexport type InsertVimsaTime = z.infer<typeof insertVimsaTimeSchema>;\nexport type UpdateVimsaTime = z.infer<typeof updateVimsaTimeSchema>;","size_bytes":10186},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Header } from \"@/components/header\";\nimport { StaffSidebar } from \"@/components/staff-sidebar\";\nimport { Dashboard } from \"@/pages/dashboard\";\nimport { StaffSection } from \"@/components/staff-section\";\nimport { ClientWorkflow } from \"@/components/client-workflow\";\nimport { StaffClientManagement } from \"@/components/staff-client-management\";\nimport { UngdomsLogo } from \"@/components/ungdoms-logo\";\nimport { LoginForm } from \"@/components/login-form\";\nimport { UserSettings } from \"@/components/user-settings\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Settings, LogOut } from \"lucide-react\";\nimport type { Staff, User } from \"@shared/schema\";\n\nfunction MainApp() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [activeView, setActiveView] = useState('dashboard');\n  const [activeStaffId, setActiveStaffId] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const { data: staff = [], isLoading } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n    enabled: isAuthenticated, // Only fetch staff data when authenticated\n  });\n\n  const handleViewChange = (view: string, staffId?: string) => {\n    setActiveView(view === 'staff' ? `staff-${staffId}` : view);\n    setActiveStaffId(staffId || null);\n  };\n\n  const handleExport = async () => {\n    try {\n      window.open('/api/export', '_blank');\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  const handleLoginSuccess = (user: User) => {\n    setCurrentUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleLogout = () => {\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n    setActiveView('dashboard');\n    setActiveStaffId(null);\n  };\n\n  const activeStaff = activeStaffId ? staff.find(s => s.id === activeStaffId) : null;\n\n  // Close sidebar when clicking outside on mobile\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      const target = e.target as Element;\n      const sidebar = document.querySelector('aside');\n      const sidebarToggle = document.querySelector('[data-sidebar-toggle]');\n      \n      if (window.innerWidth < 1024 && \n          sidebar && !sidebar.contains(target) && \n          sidebarToggle && !sidebarToggle.contains(target) &&\n          sidebarOpen) {\n        setSidebarOpen(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n    return () => document.removeEventListener('click', handleClickOutside);\n  }, [sidebarOpen]);\n\n  // Show login form if not authenticated\n  if (!isAuthenticated) {\n    return <LoginForm onLoginSuccess={handleLoginSuccess} />;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <UngdomsLogo size=\"xl\" className=\"justify-center mb-6\" />\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-ungdoms-600 mx-auto mb-4\"></div>\n          <p className=\"text-ungdoms-600\">Laddar vårdadministrativt system...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Header\n        onSidebarToggle={() => setSidebarOpen(!sidebarOpen)}\n        onExport={handleExport}\n        searchTerm={searchTerm}\n        onSearchChange={setSearchTerm}\n        currentUser={currentUser}\n        onLogout={handleLogout}\n      />\n      \n      <div className=\"flex h-screen pt-16\">\n        <StaffSidebar\n          staff={staff}\n          activeView={activeView}\n          onViewChange={handleViewChange}\n          isOpen={sidebarOpen}\n          onClose={() => setSidebarOpen(false)}\n          searchTerm={searchTerm}\n        />\n\n        <main className=\"flex-1 overflow-y-auto bg-white\">\n          <div className=\"p-6\">\n            {/* UNGDOMS Logo Header */}\n            <div className=\"mb-6 text-center\">\n              <UngdomsLogo size=\"lg\" className=\"justify-center\" />\n              <h1 className=\"mt-4 text-2xl font-bold text-ungdoms-700\">\n                Öppenvård Administrativt System\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Klienthantering och uppföljning för vårdpersonal\n              </p>\n            </div>\n\n            {activeView === 'dashboard' ? (\n              <Dashboard />\n            ) : activeStaff ? (\n              <div className=\"space-y-6\">\n                <div className=\"bg-ungdoms-50 rounded-lg p-4 border border-ungdoms-200\">\n                  <h2 className=\"text-xl font-semibold text-ungdoms-800 mb-2\">\n                    {activeStaff.name} - {activeStaff.roll}\n                  </h2>\n                  <p className=\"text-ungdoms-600\">\n                    Avdelning: {activeStaff.avdelning} | Initialer: {activeStaff.initials}\n                  </p>\n                </div>\n                \n                <StaffClientManagement staff={activeStaff} />\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <div className=\"bg-ungdoms-50 rounded-lg p-8 border border-ungdoms-200 max-w-md mx-auto\">\n                  <p className=\"text-ungdoms-600 text-lg\">\n                    Välj en personalmedlem från sidopanelen för att börja\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Systemet använder flödesbaserad klienthantering\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <MainApp />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6291},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 40%, 16%);\n  --muted: hsl(188, 20%, 95%);\n  --muted-foreground: hsl(210, 20%, 50%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 40%, 16%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 40%, 16%);\n  --border: hsl(188, 30%, 85%);\n  --input: hsl(188, 15%, 96%);\n  --primary: hsl(188, 100%, 42%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(188, 15%, 96%);\n  --secondary-foreground: hsl(210, 40%, 16%);\n  --accent: hsl(188, 90%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --ring: hsl(188, 100%, 42%);\n  --radius: 0.5rem;\n  \n  /* UNGDOMS theme colors - Exact logo blue shades */\n  --ungdoms-50: hsl(188, 100%, 97%);\n  --ungdoms-100: hsl(188, 100%, 92%);\n  --ungdoms-200: hsl(188, 95%, 85%);\n  --ungdoms-300: hsl(188, 90%, 75%);\n  --ungdoms-400: hsl(188, 85%, 65%);\n  --ungdoms-500: hsl(188, 100%, 42%);\n  --ungdoms-600: hsl(188, 95%, 38%);\n  --ungdoms-700: hsl(188, 90%, 34%);\n  --ungdoms-800: hsl(188, 85%, 30%);\n  --ungdoms-900: hsl(188, 80%, 26%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer components {\n  /* UNGDOMS theme header */\n  .ungdoms-header {\n    background: linear-gradient(135deg, var(--ungdoms-500) 0%, var(--ungdoms-700) 100%);\n    color: white;\n  }\n  \n  /* Dokumentation status - Clean blue theme */\n  .status-done {\n    @apply bg-green-100 text-green-700 border-green-300;\n  }\n  \n  .status-reminded {\n    @apply bg-yellow-100 text-yellow-700 border-yellow-300;\n  }\n  \n  .status-not-done {\n    @apply bg-red-100 text-red-700 border-red-300;\n  }\n  \n  /* Rapport status */\n  .status-submitted {\n    @apply bg-green-100 text-green-700 border-green-300;\n  }\n  \n  .status-late {\n    @apply bg-red-100 text-red-700 border-red-300;\n  }\n  \n  .status-not-submitted {\n    @apply bg-gray-100 text-gray-700 border-gray-300;\n  }\n  \n  /* Kvalitet status */\n  .status-approved {\n    @apply bg-green-100 text-green-700 border-green-300;\n  }\n  \n  .status-not-approved {\n    @apply bg-red-100 text-red-700 border-red-300;\n  }\n  \n  .status-pending {\n    @apply bg-yellow-100 text-yellow-700 border-yellow-300;\n  }\n  \n  /* Vimsa status */\n  .status-accepted {\n    @apply bg-green-100 text-green-700 border-green-300;\n  }\n  \n  .status-rejected {\n    @apply bg-red-100 text-red-700 border-red-300;\n  }\n  \n  .sidebar-transition {\n    transition: transform 0.3s ease-in-out;\n  }\n  \n  .sidebar-hidden {\n    transform: translateX(-100%);\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n  \n  .table-hover tr:hover {\n    background-color: hsl(0, 0%, 12%);\n  }\n  \n  .ungdoms-bg {\n    background-color: var(--ungdoms-500);\n  }\n  \n  .ungdoms-bg-light {\n    background-color: var(--ungdoms-800);\n  }\n  \n  .ungdoms-text {\n    color: var(--ungdoms-400);\n  }\n  \n  .ungdoms-border {\n    border-color: var(--ungdoms-600);\n  }\n  \n  .ungdoms-logo-area {\n    background: radial-gradient(circle at center, var(--ungdoms-900) 0%, transparent 70%);\n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(10px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@media (max-width: 768px) {\n  .sidebar-hidden {\n    transform: translateX(-100%);\n  }\n}\n","size_bytes":4223},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/add-client-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertClientSchema, type InsertClient, type Staff } from \"@shared/schema\";\n\ninterface AddClientDialogProps {\n  staff: Staff;\n}\n\nexport function AddClientDialog({ staff }: AddClientDialogProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertClient>({\n    resolver: zodResolver(insertClientSchema),\n    defaultValues: {\n      staffId: staff.id,\n      initials: \"\",\n    },\n  });\n\n  const createClientMutation = useMutation({\n    mutationFn: async (data: InsertClient) => {\n      const response = await apiRequest(\"POST\", \"/api/clients\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\", staff.id, \"clients\"] });\n      form.reset({ staffId: staff.id, initials: \"\" });\n      setOpen(false);\n      toast({\n        title: \"Framgång\",\n        description: \"Klient tillagd framgångsrikt!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fel\",\n        description: \"Kunde inte lägga till klient\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertClient) => {\n    createClientMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"bg-blue-600 hover:bg-blue-700\">\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Lägg till klient\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Lägg till ny klient</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"initials\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Initialer (GDPR-säkert)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"t.ex. A.B eller AB\" \n                      {...field}\n                      className=\"uppercase\"\n                      onChange={(e) => field.onChange(e.target.value.toUpperCase())}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                  <p className=\"text-xs text-gray-500\">\n                    Använd endast initialer för att skydda klientens integritet enligt GDPR\n                  </p>\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n              >\n                Avbryt\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={createClientMutation.isPending}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {createClientMutation.isPending ? \"Sparar...\" : \"Lägg till\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3880},"client/src/components/admin-setup.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { UngdomsLogo } from \"@/components/ungdoms-logo\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserPlus, Shield } from \"lucide-react\";\n\ninterface AdminSetupProps {\n  onAdminCreated: () => void;\n}\n\nexport function AdminSetup({ onAdminCreated }: AdminSetupProps) {\n  const { toast } = useToast();\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      username: \"admin\",\n      email: \"admin@ungdoms.se\",\n      passwordHash: \"\", // Will be the actual password before hashing\n      role: \"admin\",\n      isActive: true,\n    },\n  });\n\n  const createAdminMutation = useMutation({\n    mutationFn: async (data: InsertUser) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Kunde inte skapa administratör\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Administratör skapad!\",\n        description: \"Du kan nu logga in med dina uppgifter.\",\n      });\n      onAdminCreated();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fel\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-ungdoms-50 to-white flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md border-ungdoms-200 shadow-lg\">\n        <CardHeader className=\"text-center pb-4\">\n          <div className=\"flex justify-center mb-4\">\n            <UngdomsLogo size=\"lg\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-ungdoms-800\">\n            Första installationen\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Skapa administratörskonto för UNGDOMS Öppenvård\n          </p>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"mb-6 flex items-center justify-center space-x-2 text-sm text-ungdoms-600\">\n            <Shield className=\"h-4 w-4\" />\n            <span>Säker systemadministration</span>\n          </div>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit((data) => createAdminMutation.mutate(data))} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-ungdoms-700\">Användarnamn</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"admin\" \n                        className=\"border-ungdoms-200 focus:border-ungdoms-500\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-ungdoms-700\">E-post</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\"\n                        placeholder=\"admin@ungdoms.se\" \n                        className=\"border-ungdoms-200 focus:border-ungdoms-500\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"passwordHash\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-ungdoms-700\">Lösenord</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\" \n                        placeholder=\"Ange säkert lösenord\" \n                        className=\"border-ungdoms-200 focus:border-ungdoms-500\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-ungdoms-700\">Roll</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"border-ungdoms-200\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"admin\">Administratör</SelectItem>\n                        <SelectItem value=\"staff\">Vårdpersonal</SelectItem>\n                        <SelectItem value=\"viewer\">Granskning</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-ungdoms-600 hover:bg-ungdoms-700 text-white py-3\"\n                disabled={createAdminMutation.isPending}\n              >\n                {createAdminMutation.isPending ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>Skapar administratör...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <UserPlus className=\"h-4 w-4\" />\n                    <span>Skapa Administratör</span>\n                  </div>\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center text-xs text-muted-foreground\">\n            <p>© 2025 UNGDOMS Öppenvård</p>\n            <p>Säker vårdadministration enligt GDPR</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7080},"client/src/components/care-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  FileText, \n  AlertTriangle, \n  CheckCircle,\n  XCircle,\n  Clock,\n  ClipboardList,\n  AlertCircle,\n  User\n} from \"lucide-react\";\nimport type { Staff, Client, CarePlan, ImplementationPlan } from \"@shared/schema\";\n\ninterface CareOverviewProps {\n  staff: Staff[];\n}\n\nexport function CareOverview({ staff }: CareOverviewProps) {\n  // Fetch all care plans\n  const { data: carePlans = [] } = useQuery<CarePlan[]>({\n    queryKey: [\"/api/care-plans/all\"],\n  });\n\n  // Fetch all implementation plans\n  const { data: implementationPlans = [] } = useQuery<ImplementationPlan[]>({\n    queryKey: [\"/api/implementation-plans/all\"],\n  });\n\n  // Get all clients for context\n  const { data: allClients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients/all\"],\n  });\n\n  // Calculate overview statistics\n  const totalCarePlans = carePlans.length;\n  const totalImplementationPlans = implementationPlans.length;\n  \n  // Find care plans without implementation plans\n  const carePlansWithoutGFP = carePlans.filter(carePlan => \n    !implementationPlans.some(gfp => gfp.clientId === carePlan.clientId)\n  );\n\n  // Find incomplete implementation plans (using isActive as status indicator)\n  const incompleteImplementationPlans = implementationPlans.filter(plan => \n    plan.isActive === true\n  );\n\n  // Get client names for display\n  const getClientName = (clientId: string) => {\n    const client = allClients.find(c => c.id === clientId);\n    return client ? client.name : \"Okänd klient\";\n  };\n\n  const getStaffName = (staffId: string) => {\n    const staffMember = staff.find(s => s.id === staffId);\n    return staffMember ? staffMember.name : \"Okänd personal\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"border-ungdoms-200\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-ungdoms-700\">\n              Totala Vårdplaner\n            </CardTitle>\n            <FileText className=\"h-4 w-4 text-ungdoms-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-ungdoms-800\">{totalCarePlans}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Registrerade vårdplaner\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-ungdoms-200\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-ungdoms-700\">\n              Genomförandeplaner\n            </CardTitle>\n            <ClipboardList className=\"h-4 w-4 text-ungdoms-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-ungdoms-800\">{totalImplementationPlans}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Skapade GFP\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-red-700\">\n              Saknar GFP\n            </CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-800\">{carePlansWithoutGFP.length}</div>\n            <p className=\"text-xs text-red-600\">\n              Vårdplaner utan genomförandeplan\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-orange-200 bg-orange-50\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-orange-700\">\n              Ofullständiga GFP\n            </CardTitle>\n            <Clock className=\"h-4 w-4 text-orange-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-800\">{incompleteImplementationPlans.length}</div>\n            <p className=\"text-xs text-orange-600\">\n              Pågående genomförandeplaner\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Alerts for missing or incomplete plans */}\n      {carePlansWithoutGFP.length > 0 && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertTitle className=\"text-red-800\">\n            Vårdplaner som saknar genomförandeplan ({carePlansWithoutGFP.length})\n          </AlertTitle>\n          <AlertDescription className=\"text-red-700\">\n            Dessa klienter har vårdplaner men saknar genomförandeplaner (GFP). Detta behöver åtgärdas.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Detailed View Tabs */}\n      <Tabs defaultValue=\"missing-gfp\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"missing-gfp\">Saknar GFP</TabsTrigger>\n          <TabsTrigger value=\"incomplete-gfp\">Ofullständiga GFP</TabsTrigger>\n          <TabsTrigger value=\"all-care-plans\">Alla Vårdplaner</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"missing-gfp\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n                <AlertCircle className=\"h-5 w-5 text-red-500\" />\n                Vårdplaner som saknar genomförandeplan\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {carePlansWithoutGFP.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <CheckCircle className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\n                  <p>Alla vårdplaner har genomförandeplaner! 🎉</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {carePlansWithoutGFP.map((carePlan) => (\n                    <div key={carePlan.id} className=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-red-800\">\n                            {getClientName(carePlan.clientId)}\n                          </h4>\n                          <p className=\"text-sm text-red-600\">\n                            Personal: {getStaffName(carePlan.clientId)}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Vårdplan skapad: {new Date(carePlan.createdAt).toLocaleDateString('sv-SE')}\n                          </p>\n                        </div>\n                        <Badge variant=\"destructive\">\n                          <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                          Saknar GFP\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"incomplete-gfp\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n                <Clock className=\"h-5 w-5 text-orange-500\" />\n                Ofullständiga genomförandeplaner\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {incompleteImplementationPlans.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <CheckCircle className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\n                  <p>Alla genomförandeplaner är slutförda!</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {incompleteImplementationPlans.map((plan) => (\n                    <div key={plan.id} className=\"border border-orange-200 rounded-lg p-4 bg-orange-50\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium text-orange-800\">\n                            {getClientName(plan.clientId)}\n                          </h4>\n                          <p className=\"text-sm text-orange-600\">\n                            Status: {plan.isActive ? 'Aktiv' : 'Inaktiv'}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Senast uppdaterad: {plan.updatedAt ? new Date(plan.updatedAt).toLocaleDateString('sv-SE') : 'Okänt datum'}\n                          </p>\n                        </div>\n                        <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-800\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          {plan.isActive ? 'Pågående' : 'Inaktiv'}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"all-care-plans\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n                <FileText className=\"h-5 w-5\" />\n                Alla vårdplaner ({totalCarePlans})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {carePlans.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <FileText className=\"h-12 w-12 mx-auto mb-4\" />\n                  <p>Inga vårdplaner registrerade ännu</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {carePlans.map((carePlan) => {\n                    const hasGFP = implementationPlans.some(gfp => gfp.clientId === carePlan.clientId);\n                    const gfp = implementationPlans.find(gfp => gfp.clientId === carePlan.clientId);\n                    \n                    return (\n                      <div key={carePlan.id} className=\"border border-ungdoms-200 rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-medium text-ungdoms-800\">\n                              {getClientName(carePlan.clientId)}\n                            </h4>\n                            <p className=\"text-sm text-ungdoms-600\">\n                              Personal: {getStaffName(carePlan.clientId)}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Skapad: {carePlan.createdAt ? new Date(carePlan.createdAt).toLocaleDateString('sv-SE') : 'Okänt datum'}\n                            </p>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Badge variant=\"outline\" className=\"border-ungdoms-200\">\n                              <FileText className=\"h-3 w-3 mr-1\" />\n                              Vårdplan\n                            </Badge>\n                            {hasGFP ? (\n                              <Badge \n                                variant={!gfp?.isActive ? 'default' : 'secondary'}\n                                className={!gfp?.isActive ? 'bg-green-600' : 'bg-orange-100 text-orange-800'}\n                              >\n                                {!gfp?.isActive ? (\n                                  <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                ) : (\n                                  <Clock className=\"h-3 w-3 mr-1\" />\n                                )}\n                                GFP {!gfp?.isActive ? 'Slutförd' : 'Pågående'}\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"destructive\">\n                                <XCircle className=\"h-3 w-3 mr-1\" />\n                                Saknar GFP\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":12990},"client/src/components/care-plan-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, FileText } from \"lucide-react\";\nimport type { Staff, Client } from \"@shared/schema\";\n\nconst carePlanSchema = z.object({\n  socialWorkerName: z.string().min(1, \"Socialsekreterare måste anges\"),\n  clientInitials: z.string().min(1, \"Klientinitialer krävs\"),\n  planNumber: z.string().min(1, \"Vårdplansnummer krävs (1, 2, 3 etc)\"),\n  receivedDate: z.string().min(1, \"Mottagningsdatum krävs\"),\n  assignedStaffIds: z.array(z.string()).min(1, \"Minst en personal måste kopplas\"),\n  journalDate: z.string().optional(),\n  comment: z.string().optional(),\n});\n\ntype CarePlanFormData = z.infer<typeof carePlanSchema>;\n\ninterface CarePlanDialogProps {\n  trigger?: React.ReactNode;\n}\n\nexport function CarePlanDialog({ trigger }: CarePlanDialogProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<CarePlanFormData>({\n    resolver: zodResolver(carePlanSchema),\n    defaultValues: {\n      socialWorkerName: \"\",\n      clientInitials: \"\",\n      planNumber: \"\",\n      receivedDate: new Date().toISOString().split('T')[0],\n      assignedStaffIds: [],\n      journalDate: \"\",\n      comment: \"\",\n    },\n  });\n\n  // Fetch all staff\n  const { data: staff = [] } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n  });\n\n  // Create care plan mutation\n  const createCarePlanMutation = useMutation({\n    mutationFn: async (data: CarePlanFormData) => {\n      console.log(\"Creating care plan with data:\", data);\n      \n      try {\n        // Create client first if doesn't exist (assign to first staff member)\n        const primaryStaffId = data.assignedStaffIds[0];\n        console.log(\"Primary staff ID:\", primaryStaffId);\n        \n        const clientsResponse = await fetch(`/api/staff/${primaryStaffId}/clients`);\n        if (!clientsResponse.ok) {\n          throw new Error(`Failed to fetch clients: ${clientsResponse.status}`);\n        }\n        const clients: Client[] = await clientsResponse.json();\n      \n      let client = clients.find(c => c.initials === data.clientInitials);\n      \n      if (!client) {\n        const newClientResponse = await fetch(\"/api/clients\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            initials: data.clientInitials,\n            staffId: primaryStaffId,\n            personalNumber: \"\",\n            notes: `Vårdplan ${data.planNumber} från ${data.socialWorkerName}`,\n            status: \"active\",\n          }),\n        });\n        \n        if (!newClientResponse.ok) {\n          const errorText = await newClientResponse.text();\n          console.error(\"Client creation failed:\", errorText);\n          throw new Error(`Kunde inte skapa klient: ${errorText}`);\n        }\n        \n        client = await newClientResponse.json();\n        console.log(\"Created/found client:\", client);\n      }\n\n      // Create the care plan\n      console.log(\"Creating care plan...\");\n      const response = await fetch(\"/api/care-plans\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          clientId: client!.id,\n          staffId: primaryStaffId,\n          receivedDate: data.receivedDate,\n          enteredJournalDate: data.journalDate || null,\n          staffNotifiedDate: new Date().toISOString().split('T')[0],\n          planContent: `Vårdplan ${data.planNumber} från socialsekreterare ${data.socialWorkerName}`,\n          goals: \"Genomföra vårdflöde enligt rutin\",\n          interventions: \"Standard vårdflöde - GFP ska påbörjas inom 3 veckor\",\n          status: \"staff_notified\",\n          comment: data.comment || \"\",\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Care plan creation failed:\", errorText);\n        throw new Error(`Kunde inte skapa vårdplan: ${errorText}`);\n      }\n\n      const carePlan = await response.json();\n      console.log(\"Created care plan:\", carePlan);\n      \n      // Create implementation plan automatically (this triggers GFP workflow)\n      await fetch(\"/api/implementation-plans\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          clientId: client!.id,\n          staffId: primaryStaffId,\n          carePlanId: carePlan.id,\n          planContent: `GFP för vårdplan ${data.planNumber}`,\n          goals: \"Genomförandeplan enligt vårdplan\",\n          activities: \"GFP aktiviteter - ska slutföras inom 3 veckor\",\n          followUpSchedule: \"3 veckor från idag\",\n          status: \"pending\",\n          isActive: true,\n        }),\n      });\n\n      // Create initial weekly documentation template for current week\n      const now = new Date();\n      const currentWeek = Math.floor((now.getTime() - new Date(now.getFullYear(), 0, 1).getTime()) / (7 * 24 * 60 * 60 * 1000)) + 1;\n      \n      await fetch(\"/api/weekly-documentation\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          clientId: client!.id,\n          staffId: primaryStaffId,\n          year: now.getFullYear(),\n          week: Math.max(33, Math.min(52, currentWeek)), // Ensure within valid range\n          content: `Veckodokumentation för vårdplan ${data.planNumber}`,\n          mondayStatus: \"not_done\",\n          tuesdayStatus: \"not_done\", \n          wednesdayStatus: \"not_done\",\n          thursdayStatus: \"not_done\",\n          fridayStatus: \"not_done\",\n          saturdayStatus: \"not_done\",\n          sundayStatus: \"not_done\",\n          mondayDocumented: false,\n          tuesdayDocumented: false,\n          wednesdayDocumented: false,\n          thursdayDocumented: false,\n          fridayDocumented: false,\n          saturdayDocumented: false,\n          sundayDocumented: false,\n          documentation: \"\",\n          approved: false,\n          comments: \"\",\n        }),\n      });\n\n      // Create initial monthly report for current month\n      await fetch(\"/api/monthly-reports\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          clientId: client!.id,\n          staffId: primaryStaffId,\n          year: now.getFullYear(),\n          month: now.getMonth() + 1,\n          content: `Månadsrapport för vårdplan ${data.planNumber}`,\n          reportContent: \"\",\n          status: \"not_started\",\n          comment: \"\",\n        }),\n      });\n\n      // Create initial Vimsa time entry for current week\n      await fetch(\"/api/vimsa-time\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          clientId: client!.id,\n          staffId: primaryStaffId,\n          year: now.getFullYear(),\n          week: Math.max(33, Math.min(52, currentWeek)),\n          monday: 0,\n          tuesday: 0,\n          wednesday: 0,\n          thursday: 0,\n          friday: 0,\n          saturday: 0,\n          sunday: 0,\n          totalHours: 0,\n          status: \"not_started\",\n          approved: false,\n          comments: `Vimsa tid för vårdplan ${data.planNumber}`,\n        }),\n      });\n\n      return carePlan;\n      } catch (error) {\n        console.error(\"Error during care plan creation:\", error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/care-plans\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/implementation-plans\"] });\n      \n      toast({\n        title: \"Vårdplan skapad\",\n        description: \"Vårdplanen har skapats och personal har notifierats. GFP ska göras inom 3 veckor.\",\n      });\n      \n      form.reset();\n      setIsOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fel\",\n        description: error.message || \"Kunde inte skapa vårdplan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CarePlanFormData) => {\n    createCarePlanMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button className=\"bg-ungdoms-600 hover:bg-ungdoms-700\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Skapa Vårdplan\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5 text-ungdoms-600\" />\n            Skapa ny vårdplan\n          </DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"socialWorkerName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Socialsekreterare</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Namn på socialsekreterare\" \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"planNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vårdplansnummer</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"1, 2, 3 etc\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"clientInitials\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Klient initialer</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"t.ex. A.B.\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"receivedDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mottagningsdatum</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"journalDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Inskannad i JD (valfritt)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"assignedStaffIds\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Koppla till personal</FormLabel>\n                  <FormControl>\n                    <Select \n                      onValueChange={(value) => {\n                        const currentValues = field.value || [];\n                        if (!currentValues.includes(value)) {\n                          field.onChange([...currentValues, value]);\n                        }\n                      }}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Välj personal att koppla vårdplan till\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {staff.map((staffMember) => (\n                          <SelectItem key={staffMember.id} value={staffMember.id}>\n                            {staffMember.name} ({staffMember.initials})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {(field.value || []).map((staffId) => {\n                      const staffMember = staff.find(s => s.id === staffId);\n                      return staffMember ? (\n                        <div key={staffId} className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm flex items-center gap-2\">\n                          {staffMember.name}\n                          <button\n                            type=\"button\"\n                            onClick={() => {\n                              field.onChange((field.value || []).filter(id => id !== staffId));\n                            }}\n                            className=\"text-blue-600 hover:text-blue-800\"\n                          >\n                            ×\n                          </button>\n                        </div>\n                      ) : null;\n                    })}\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"comment\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Kommentar (valfritt)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Ytterligare kommentarer...\" \n                      rows={2}\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsOpen(false)}\n              >\n                Avbryt\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"bg-ungdoms-600 hover:bg-ungdoms-700\"\n                disabled={createCarePlanMutation.isPending}\n              >\n                {createCarePlanMutation.isPending ? \"Skapar...\" : \"Skapa vårdplan\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15888},"client/src/components/care-plan-list.tsx":{"content":"import * as React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { CarePlanDialog } from \"@/components/care-plan-dialog\";\nimport type { CarePlan, Client } from \"@shared/schema\";\nimport { Calendar, FileText, Plus, AlertCircle } from \"lucide-react\";\n\ninterface CarePlanListProps {\n  clients: Client[];\n}\n\nexport function CarePlanList({ clients }: CarePlanListProps) {\n  const [selectedClient, setSelectedClient] = React.useState<Client | null>(null);\n\n  const { \n    data: carePlans = [], \n    isLoading, \n    isError \n  } = useQuery<CarePlan[]>({\n    queryKey: [\"/api/care-plans\", \"all\"],\n    queryFn: () => fetch(\"/api/care-plans/all\").then(res => res.json()),\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      received: { label: \"Mottagen\", variant: \"secondary\" as const },\n      staff_notified: { label: \"Personal meddelad\", variant: \"default\" as const },\n      in_progress: { label: \"Pågående\", variant: \"default\" as const },\n      completed: { label: \"Klar\", variant: \"default\" as const },\n    };\n    \n    return statusMap[status as keyof typeof statusMap] || { \n      label: status, \n      variant: \"secondary\" as const \n    };\n  };\n\n  const getClientInitials = (clientId: string) => {\n    const client = clients.find(c => c.id === clientId);\n    return client?.initials || \"Okänd klient\";\n  };\n\n  if (isError) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"h-8 w-8 text-destructive mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              Kunde inte ladda vårdplaner. Försök igen senare.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold tracking-tight\">Vårdplaner</h2>\n        <Button \n          onClick={() => setSelectedClient(clients[0] || null)}\n          disabled={clients.length === 0}\n        >\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Ny vårdplan\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid gap-4\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-5 w-48\" />\n                <Skeleton className=\"h-4 w-32\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-3/4\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : carePlans.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-8\">\n            <div className=\"text-center\">\n              <FileText className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                Inga vårdplaner finns ännu. Skapa en ny för att komma igång.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {carePlans.map((plan) => {\n            const statusInfo = getStatusBadge(plan.status);\n            \n            return (\n              <Card key={plan.id} className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center\">\n                      <FileText className=\"mr-2 h-5 w-5\" />\n                      {getClientInitials(plan.clientId)}\n                    </span>\n                    <Badge variant={statusInfo.variant}>\n                      {statusInfo.label}\n                    </Badge>\n                  </CardTitle>\n                  {plan.receivedDate && (\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <Calendar className=\"mr-1 h-4 w-4\" />\n                      Mottagen: {plan.receivedDate}\n                    </div>\n                  )}\n                </CardHeader>\n                <CardContent>\n                  {plan.goals && (\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      <strong>Mål:</strong> {plan.goals.substring(0, 100)}\n                      {plan.goals.length > 100 && \"...\"}\n                    </p>\n                  )}\n                  {plan.planContent && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      <strong>Innehåll:</strong> {plan.planContent.substring(0, 150)}\n                      {plan.planContent.length > 150 && \"...\"}\n                    </p>\n                  )}\n                  {plan.comment && (\n                    <p className=\"text-xs text-muted-foreground mt-2 italic\">\n                      {plan.comment}\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      {selectedClient && (\n        <CarePlanDialog\n          isOpen={true}\n          onClose={() => setSelectedClient(null)}\n          client={selectedClient}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":5576},"client/src/components/client-detail-view.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calendar, CheckCircle, AlertTriangle, Clock, FileText, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Client, CarePlan, ImplementationPlan, WeeklyDocumentation, MonthlyReport, VimsaTime, FollowupPlan } from \"@shared/schema\";\n\ninterface ClientDetailViewProps {\n  client: Client;\n  staffId: string;\n}\n\nexport function ClientDetailView({ client, staffId }: ClientDetailViewProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch all client-related data\n  const { data: carePlan } = useQuery<CarePlan>({\n    queryKey: [\"/api/care-plans\", client.id],\n  });\n\n  const { data: implementationPlan } = useQuery<ImplementationPlan>({\n    queryKey: [\"/api/implementation-plans\", client.id],\n  });\n\n  const { data: weeklyDocs = [] } = useQuery<WeeklyDocumentation[]>({\n    queryKey: [\"/api/weekly-documentation\", client.id],\n  });\n\n  const { data: monthlyReports = [] } = useQuery<MonthlyReport[]>({\n    queryKey: [\"/api/monthly-reports\", client.id],\n  });\n\n  const { data: vimsaTimeData = [] } = useQuery<VimsaTime[]>({\n    queryKey: [\"/api/vimsa-time\", client.id],\n  });\n\n  const { data: followupPlans = [] } = useQuery<FollowupPlan[]>({\n    queryKey: [\"/api/followup-plans\", client.id],\n  });\n\n  // Status helpers\n  const getStatusColor = (status: string, isOverdue?: boolean) => {\n    if (isOverdue) return \"bg-red-100 text-red-800 border-red-200\";\n    switch (status) {\n      case \"completed\":\n      case \"sent\":\n      case \"approved\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"pending\":\n      case \"in_progress\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"overdue\":\n      case \"rejected\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getQualityColor = (quality: string) => {\n    switch (quality) {\n      case \"approved\":\n      case \"ok\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"pending\":\n      case \"sådär\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"not_approved\":\n      case \"ej_godkänt\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  // Check if GFP is overdue (3 weeks from staff notified date)\n  const isGfpOverdue = () => {\n    if (!carePlan?.staffNotifiedDate || implementationPlan?.status === \"completed\") return false;\n    const notifiedDate = new Date(carePlan.staffNotifiedDate);\n    const dueDate = new Date(notifiedDate);\n    dueDate.setDate(dueDate.getDate() + 21); // 3 weeks\n    return new Date() > dueDate;\n  };\n\n  // Generate weeks from week 34 to end of 2025\n  const generateWeeks = () => {\n    const weeks = [];\n    const year = 2025;\n    for (let week = 34; week <= 52; week++) {\n      weeks.push({ year, week });\n    }\n    return weeks;\n  };\n\n  // Generate months from August to December 2025\n  const generateMonths = () => {\n    const months = [];\n    const year = 2025;\n    const monthNames = [\"Augusti\", \"September\", \"Oktober\", \"November\", \"December\"];\n    for (let month = 8; month <= 12; month++) {\n      months.push({ year, month, name: monthNames[month - 8] });\n    }\n    return months;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Client Header */}\n      <Card className=\"border-ungdoms-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n            <User className=\"h-5 w-5\" />\n            Klient: {client.initials}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Initialer</p>\n              <p className=\"font-medium\">{client.initials}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Ansvarig personal</p>\n              <p className=\"font-medium\">{staffId}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Status</p>\n              <Badge className={getStatusColor(client.status || \"active\")}>\n                {client.status === \"active\" ? \"Aktiv\" : \"Inaktiv\"}\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"careplan\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"careplan\">Vårdplan</TabsTrigger>\n          <TabsTrigger value=\"gfp\">GFP</TabsTrigger>\n          <TabsTrigger value=\"followup\">Uppföljning</TabsTrigger>\n          <TabsTrigger value=\"documentation\">Dokumentation</TabsTrigger>\n          <TabsTrigger value=\"monthly\">Månadsrapporter</TabsTrigger>\n          <TabsTrigger value=\"vimsa\">Vimsa Tid</TabsTrigger>\n        </TabsList>\n\n        {/* Vårdplan Tab */}\n        <TabsContent value=\"careplan\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Vårdplan - {client.initials}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Mottagen datum</label>\n                    <Input\n                      type=\"date\"\n                      value={carePlan?.receivedDate ? new Date(carePlan.receivedDate).toISOString().split('T')[0] : ''}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Inlagd i journal (digitalt)</label>\n                    <Input\n                      type=\"date\"\n                      value={carePlan?.enteredJournalDate ? new Date(carePlan.enteredJournalDate).toISOString().split('T')[0] : ''}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Personal tillsagd</label>\n                    <Input\n                      type=\"date\"\n                      value={carePlan?.staffNotifiedDate ? new Date(carePlan.staffNotifiedDate).toISOString().split('T')[0] : ''}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n                \n                {carePlan?.staffNotifiedDate && (\n                  <div className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                    <p className=\"text-sm text-blue-800\">\n                      <strong>GFP ska vara inlämnad senast:</strong>{\" \"}\n                      {new Date(new Date(carePlan.staffNotifiedDate).getTime() + 21 * 24 * 60 * 60 * 1000)\n                        .toLocaleDateString('sv-SE')} (3 veckor från tillsägning)\n                    </p>\n                  </div>\n                )}\n\n                <div>\n                  <label className=\"text-sm font-medium\">Status</label>\n                  <Badge className={`mt-1 ${getStatusColor(carePlan?.status || \"received\")}`}>\n                    {carePlan?.status === \"received\" && \"Mottagen\"}\n                    {carePlan?.status === \"entered_journal\" && \"Inlagd i journal\"}\n                    {carePlan?.status === \"staff_notified\" && \"Personal tillsagd\"}\n                    {carePlan?.status === \"gfp_pending\" && \"Väntar på GFP\"}\n                    {carePlan?.status === \"completed\" && \"Slutförd\"}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* GFP Tab */}\n        <TabsContent value=\"gfp\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Genomförandeplan (GFP) - {client.initials}\n                {isGfpOverdue() && (\n                  <Badge className=\"bg-red-100 text-red-800 border-red-200 ml-2\">\n                    <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                    FÖRSENAD\n                  </Badge>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Förfallodatum</label>\n                    <Input\n                      type=\"date\"\n                      value={implementationPlan?.dueDate ? new Date(implementationPlan.dueDate).toISOString().split('T')[0] : ''}\n                      className=\"mt-1\"\n                      disabled\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Slutförd datum</label>\n                    <Input\n                      type=\"date\"\n                      value={implementationPlan?.completedDate ? new Date(implementationPlan.completedDate).toISOString().split('T')[0] : ''}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Skickad datum</label>\n                  <Input\n                    type=\"date\"\n                    value={implementationPlan?.sentDate ? new Date(implementationPlan.sentDate).toISOString().split('T')[0] : ''}\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Status</label>\n                  <Badge className={`mt-1 ${getStatusColor(implementationPlan?.status || \"pending\", isGfpOverdue())}`}>\n                    {isGfpOverdue() && implementationPlan?.status !== \"completed\" && \"FÖRSENAD - \"}\n                    {implementationPlan?.status === \"pending\" && \"Väntande\"}\n                    {implementationPlan?.status === \"in_progress\" && \"Pågående\"}\n                    {implementationPlan?.status === \"completed\" && \"Slutförd\"}\n                    {implementationPlan?.status === \"sent\" && \"Skickad\"}\n                  </Badge>\n                </div>\n\n                {implementationPlan?.completedDate && (\n                  <div className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\n                    <p className=\"text-sm text-green-800 flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4\" />\n                      GFP slutförd och godkänd\n                    </p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Uppföljningsplan Tab */}\n        <TabsContent value=\"followup\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Uppföljningsplaner - {client.initials}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {followupPlans.length > 0 ? (\n                  followupPlans.map((plan, index) => (\n                    <div key={plan.id} className=\"p-4 border border-ungdoms-200 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">Uppföljning {index + 1}</h4>\n                        <Badge className={getStatusColor(plan.status)}>\n                          {plan.status === \"scheduled\" && \"Planerad\"}\n                          {plan.status === \"completed\" && \"Slutförd\"}\n                          {plan.status === \"cancelled\" && \"Inställd\"}\n                        </Badge>\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Planerat datum</p>\n                          <p>{new Date(plan.followupDate).toLocaleDateString('sv-SE')}</p>\n                        </div>\n                        {plan.completedDate && (\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">Slutförd datum</p>\n                            <p>{new Date(plan.completedDate).toLocaleDateString('sv-SE')}</p>\n                          </div>\n                        )}\n                      </div>\n                      {plan.notes && (\n                        <div className=\"mt-2\">\n                          <p className=\"text-sm text-muted-foreground\">Anteckningar</p>\n                          <p className=\"text-sm\">{plan.notes}</p>\n                        </div>\n                      )}\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-muted-foreground text-center py-8\">Inga uppföljningsplaner registrerade</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Dokumentation Tab */}\n        <TabsContent value=\"documentation\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Veckodokumentation 2025 - {client.initials}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Vecka 34 - 52, 2025. Grön = Godkänd kvalitet, Ingen färg = Dokumenterad, Röd = Saknas\n                </p>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {generateWeeks().map(({ year, week }) => {\n                    const doc = weeklyDocs.find(d => d.year === year && d.week === week);\n                    return (\n                      <div key={`${year}-${week}`} className=\"p-3 border border-gray-200 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"font-medium\">Vecka {week}</span>\n                          <Badge className={\n                            !doc ? \"bg-red-100 text-red-800 border-red-200\" :\n                            doc.qualityAssessment === \"approved\" ? \"bg-green-100 text-green-800 border-green-200\" :\n                            \"bg-gray-100 text-gray-800 border-gray-200\"\n                          }>\n                            {!doc ? \"Saknas\" : doc.qualityAssessment === \"approved\" ? \"Godkänd\" : \"Dokumenterad\"}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <Checkbox checked={!!doc} />\n                            <span className=\"text-sm\">Dokumenterad</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Checkbox checked={doc?.qualityAssessment === \"approved\"} />\n                            <span className=\"text-sm\">Kvalitet godkänd</span>\n                          </div>\n                        </div>\n\n                        {doc?.comments && (\n                          <div className=\"mt-2\">\n                            <p className=\"text-xs text-muted-foreground\">Kommentar:</p>\n                            <p className=\"text-xs\">{doc.comments}</p>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Månadsrapporter Tab */}\n        <TabsContent value=\"monthly\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Månadsrapporter 2025 - {client.initials}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {generateMonths().map(({ year, month, name }) => {\n                  const report = monthlyReports.find(r => r.year === year && r.month === month);\n                  return (\n                    <div key={`${year}-${month}`} className=\"p-4 border border-ungdoms-200 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h4 className=\"font-medium\">{name} {year}</h4>\n                        <div className=\"flex gap-2\">\n                          <Badge className={getStatusColor(report?.status || \"not_submitted\")}>\n                            {report?.status === \"submitted\" && \"Skickad\"}\n                            {report?.status === \"late\" && \"Försenad\"}\n                            {!report && \"Ej inlämnad\"}\n                          </Badge>\n                          {report?.quality && (\n                            <Badge className={getQualityColor(report.quality)}>\n                              {report.quality === \"approved\" && \"Godkänd\"}\n                              {report.quality === \"pending\" && \"Sådär\"}\n                              {report.quality === \"not_approved\" && \"Ej godkänd\"}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"flex items-center gap-2\">\n                          <Checkbox checked={!!report} />\n                          <span className=\"text-sm\">Skickad</span>\n                        </div>\n                        <div>\n                          <Select value={report?.status || \"not_submitted\"}>\n                            <SelectTrigger className=\"h-8\">\n                              <SelectValue placeholder=\"Status\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"not_submitted\">Ej inlämnad</SelectItem>\n                              <SelectItem value=\"submitted\">I tid</SelectItem>\n                              <SelectItem value=\"late\">Försenad</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <Select value={report?.quality || \"pending\"}>\n                            <SelectTrigger className=\"h-8\">\n                              <SelectValue placeholder=\"Kvalitet\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"pending\">Sådär</SelectItem>\n                              <SelectItem value=\"approved\">OK</SelectItem>\n                              <SelectItem value=\"not_approved\">Ej godkänt</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n\n                      {report?.submissionDate && (\n                        <div className=\"mt-2\">\n                          <p className=\"text-sm text-muted-foreground\">\n                            Inlämnad: {new Date(report.submissionDate).toLocaleDateString('sv-SE')}\n                          </p>\n                        </div>\n                      )}\n\n                      <div className=\"mt-3\">\n                        <Textarea\n                          placeholder=\"Kommentarer...\"\n                          value={report?.comment || \"\"}\n                          className=\"h-20\"\n                        />\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Vimsa Tid Tab */}\n        <TabsContent value=\"vimsa\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Vimsa Tid - {client.initials}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Grön = Stämmer med dokumentation, Röd = Stämmer inte\n                </p>\n                \n                {generateWeeks().map(({ year, week }) => {\n                  const timeData = vimsaTimeData.find(v => v.year === year && v.week === week);\n                  return (\n                    <div key={`${year}-${week}`} className=\"p-4 border border-ungdoms-200 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h4 className=\"font-medium\">Vecka {week}, {year}</h4>\n                        <Badge className={\n                          timeData?.matchesDocumentation ? \n                            \"bg-green-100 text-green-800 border-green-200\" : \n                            \"bg-red-100 text-red-800 border-red-200\"\n                        }>\n                          {timeData?.matchesDocumentation ? \"Stämmer\" : \"Stämmer inte\"}\n                        </Badge>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium\">Timmar arbetade</label>\n                          <Input\n                            type=\"number\"\n                            value={timeData?.hoursWorked || 0}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">Stämmer med dokumentation</label>\n                          <Select value={timeData?.matchesDocumentation ? \"yes\" : \"no\"}>\n                            <SelectTrigger className=\"mt-1\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"yes\">Ja (Grön)</SelectItem>\n                              <SelectItem value=\"no\">Nej (Röd)</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium\">Status</label>\n                          <Select value={timeData?.status || \"pending\"}>\n                            <SelectTrigger className=\"mt-1\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"pending\">Väntande</SelectItem>\n                              <SelectItem value=\"approved\">Godkänd</SelectItem>\n                              <SelectItem value=\"rejected\">Avvisad</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n\n                      <div className=\"mt-3\">\n                        <label className=\"text-sm font-medium\">Kommentarer</label>\n                        <Textarea\n                          placeholder=\"Kommentarer om Vimsa tid...\"\n                          value={timeData?.comment || \"\"}\n                          className=\"mt-1 h-20\"\n                        />\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":24837},"client/src/components/client-details-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { Client } from \"@shared/schema\";\n\ninterface ClientDetailsDialogProps {\n  client: Client;\n}\n\nexport function ClientDetailsDialog({ client }: ClientDetailsDialogProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\">\n          <FileText className=\"h-4 w-4\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Klient: {client.initials}</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Klientinformation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <p><strong>Initialer:</strong> {client.initials}</p>\n                <p><strong>Skapad:</strong> {client.createdAt ? new Date(client.createdAt).toLocaleDateString('sv-SE') : 'Ej angiven'}</p>\n                <p><strong>Status:</strong> <span className=\"px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full\">Aktiv</span></p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Kommande funktioner</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"p-3 border rounded-lg\">\n                  <h4 className=\"font-medium text-sm\">Veckodokumentation</h4>\n                  <p className=\"text-xs text-gray-600 mt-1\">Status, kvalitetsbedömning</p>\n                </div>\n                <div className=\"p-3 border rounded-lg\">\n                  <h4 className=\"font-medium text-sm\">Månadsrapporter</h4>\n                  <p className=\"text-xs text-gray-600 mt-1\">Inlämning, kvalitetspoäng</p>\n                </div>\n                <div className=\"p-3 border rounded-lg\">\n                  <h4 className=\"font-medium text-sm\">Vårdplaner</h4>\n                  <p className=\"text-xs text-gray-600 mt-1\">Mål, interventioner</p>\n                </div>\n                <div className=\"p-3 border rounded-lg\">\n                  <h4 className=\"font-medium text-sm\">Vimsa Tid</h4>\n                  <p className=\"text-xs text-gray-600 mt-1\">Tidsregistrering per vecka</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2855},"client/src/components/client-workflow.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { \n  Heart, \n  Clipboard, \n  FileText, \n  Calendar, \n  Clock,\n  Plus,\n  Save,\n  CheckCircle2\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  insertCarePlanSchema,\n  insertImplementationPlanSchema,\n  insertWeeklyDocumentationSchema,\n  insertMonthlyReportSchema,\n  insertVimsaTimeSchema,\n  insertClientSchema,\n  type InsertCarePlan,\n  type InsertImplementationPlan,\n  type InsertWeeklyDocumentation,\n  type InsertMonthlyReport,\n  type InsertVimsaTime,\n  type InsertClient,\n  type Staff \n} from \"@shared/schema\";\n\ninterface ClientWorkflowProps {\n  staff: Staff;\n}\n\nexport function ClientWorkflow({ staff }: ClientWorkflowProps) {\n  const [activeTab, setActiveTab] = useState(\"careplan\");\n  const [selectedClientId, setSelectedClientId] = useState<string>(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Hämta klienter för denna anställd\n  const { data: clients = [], isLoading: clientsLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/staff\", staff.id, \"clients\"],\n  });\n\n  // Current week/month helpers\n  const getCurrentWeek = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const startOfYear = new Date(year, 0, 1);\n    const days = Math.floor((now.getTime() - startOfYear.getTime()) / (24 * 60 * 60 * 1000));\n    const week = Math.ceil((days + startOfYear.getDay() + 1) / 7);\n    return { year, week };\n  };\n\n  const getCurrentMonth = () => {\n    const now = new Date();\n    return { year: now.getFullYear(), month: now.getMonth() + 1 };\n  };\n\n  const { year: currentYear, week: currentWeek } = getCurrentWeek();\n  const { month: currentMonth } = getCurrentMonth();\n\n  // Formulär för att skapa ny klient\n  const newClientForm = useForm<InsertClient>({\n    resolver: zodResolver(insertClientSchema),\n    defaultValues: {\n      staffId: staff.id,\n      initials: \"\",\n      name: \"\",\n    },\n  });\n\n  // Vårdplan formulär\n  const carePlanForm = useForm<InsertCarePlan>({\n    resolver: zodResolver(insertCarePlanSchema),\n    defaultValues: {\n      clientId: selectedClientId,\n      planContent: \"\",\n      goals: \"\",\n      interventions: \"\",\n      evaluationCriteria: \"\",\n      isActive: true,\n    },\n  });\n\n  // Genomförandeplan formulär\n  const implementationForm = useForm<InsertImplementationPlan>({\n    resolver: zodResolver(insertImplementationPlanSchema),\n    defaultValues: {\n      clientId: selectedClientId,\n      planContent: \"\",\n      goals: \"\",\n      activities: \"\",\n      followUpSchedule: \"\",\n      isActive: true,\n    },\n  });\n\n  // Veckodokumentation formulär\n  const weeklyDocForm = useForm<InsertWeeklyDocumentation>({\n    resolver: zodResolver(insertWeeklyDocumentationSchema),\n    defaultValues: {\n      clientId: selectedClientId,\n      year: currentYear,\n      week: currentWeek,\n      documentation: \"\",\n      status: \"not_done\",\n      qualityAssessment: \"pending\",\n      comments: \"\",\n    },\n  });\n\n  // Månadsrapport formulär\n  const monthlyReportForm = useForm<InsertMonthlyReport>({\n    resolver: zodResolver(insertMonthlyReportSchema),\n    defaultValues: {\n      clientId: selectedClientId,\n      year: currentYear,\n      month: currentMonth,\n      reportContent: \"\",\n      status: \"not_submitted\",\n      quality: \"pending\",\n      qualityScore: 0,\n    },\n  });\n\n  // Vimsa Tid formulär\n  const vimsaTimeForm = useForm<InsertVimsaTime>({\n    resolver: zodResolver(insertVimsaTimeSchema),\n    defaultValues: {\n      clientId: selectedClientId,\n      year: currentYear,\n      week: currentWeek,\n      hoursWorked: 0,\n      status: \"pending\",\n      activities: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Mutationer\n  const createClientMutation = useMutation({\n    mutationFn: async (data: InsertClient) => {\n      const response = await apiRequest(\"POST\", \"/api/clients\", data);\n      return response.json();\n    },\n    onSuccess: (newClient) => {\n      toast({ title: \"Framgång\", description: \"Klient skapad!\" });\n      newClientForm.reset();\n      setSelectedClientId(newClient.id);\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\", staff.id, \"clients\"] });\n    },\n  });\n\n  const createCarePlanMutation = useMutation({\n    mutationFn: async (data: InsertCarePlan) => {\n      const response = await apiRequest(\"POST\", \"/api/care-plans\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Framgång\", description: \"Vårdplan sparad!\" });\n      setActiveTab(\"implementation\");\n    },\n  });\n\n  const createImplementationMutation = useMutation({\n    mutationFn: async (data: InsertImplementationPlan) => {\n      const response = await apiRequest(\"POST\", \"/api/implementation-plans\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Framgång\", description: \"Genomförandeplan sparad!\" });\n      setActiveTab(\"documentation\");\n    },\n  });\n\n  const createWeeklyDocMutation = useMutation({\n    mutationFn: async (data: InsertWeeklyDocumentation) => {\n      const response = await apiRequest(\"POST\", \"/api/weekly-documentation\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Framgång\", description: \"Veckodokumentation sparad!\" });\n      setActiveTab(\"monthly\");\n    },\n  });\n\n  const createMonthlyReportMutation = useMutation({\n    mutationFn: async (data: InsertMonthlyReport) => {\n      const response = await apiRequest(\"POST\", \"/api/monthly-reports\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Framgång\", description: \"Månadsrapport sparad!\" });\n      setActiveTab(\"vimsa\");\n    },\n  });\n\n  const createVimsaTimeMutation = useMutation({\n    mutationFn: async (data: InsertVimsaTime) => {\n      const response = await apiRequest(\"POST\", \"/api/vimsa-time\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Framgång\", description: \"Vimsa Tid sparad! Klient komplett!\" });\n    },\n  });\n\n  if (clientsLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-ungdoms-500 mx-auto mb-4\"></div>\n        <p className=\"text-muted-foreground\">Laddar klientdata...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Klientväljare */}\n      <Card className=\"border-ungdoms-600\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Heart className=\"mr-2 h-5 w-5 text-ungdoms-400\" />\n            Klient för {staff.name}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4 items-end\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"client-select\">Välj befintlig klient</Label>\n              <Select value={selectedClientId || \"\"} onValueChange={setSelectedClientId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Välj klient...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {clients.map((client) => (\n                    <SelectItem key={client.id} value={client.id}>\n                      {client.initials} {client.name && `(${client.name})`}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"text-muted-foreground text-sm\">ELLER</div>\n            \n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Initialer (t.ex. AB)\"\n                value={newClientForm.watch(\"initials\")}\n                onChange={(e) => newClientForm.setValue(\"initials\", e.target.value.toUpperCase())}\n                className=\"w-20\"\n                maxLength={3}\n              />\n              <Input\n                placeholder=\"Namn (valfritt)\"\n                value={newClientForm.watch(\"name\")}\n                onChange={(e) => newClientForm.setValue(\"name\", e.target.value)}\n                className=\"w-40\"\n              />\n              <Button\n                onClick={() => createClientMutation.mutate(newClientForm.getValues())}\n                disabled={!newClientForm.watch(\"initials\") || createClientMutation.isPending}\n                className=\"bg-ungdoms-500 hover:bg-ungdoms-600\"\n              >\n                <Plus className=\"h-4 w-4 mr-1\" />\n                Skapa\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Huvudflöde med tabbar */}\n      {selectedClientId && (\n        <Card className=\"border-ungdoms-600\">\n          <CardHeader>\n            <CardTitle>\n              Klientflöde för {clients.find((c) => c.id === selectedClientId)?.initials}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-5\">\n                <TabsTrigger value=\"careplan\" className=\"flex items-center gap-1\">\n                  <Heart className=\"h-4 w-4\" />\n                  1. Vårdplan\n                </TabsTrigger>\n                <TabsTrigger value=\"implementation\" className=\"flex items-center gap-1\">\n                  <Clipboard className=\"h-4 w-4\" />\n                  2. Genomförandeplan\n                </TabsTrigger>\n                <TabsTrigger value=\"documentation\" className=\"flex items-center gap-1\">\n                  <FileText className=\"h-4 w-4\" />\n                  3. Dokumentation\n                </TabsTrigger>\n                <TabsTrigger value=\"monthly\" className=\"flex items-center gap-1\">\n                  <Calendar className=\"h-4 w-4\" />\n                  4. Månadsrapport\n                </TabsTrigger>\n                <TabsTrigger value=\"vimsa\" className=\"flex items-center gap-1\">\n                  <Clock className=\"h-4 w-4\" />\n                  5. Vimsa Tid\n                </TabsTrigger>\n              </TabsList>\n\n              {/* VÅRDPLAN */}\n              <TabsContent value=\"careplan\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Heart className=\"mr-2 h-5 w-5 text-ungdoms-400\" />\n                      Steg 1: Vårdplan\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...carePlanForm}>\n                      <form onSubmit={carePlanForm.handleSubmit((data) => {\n                        createCarePlanMutation.mutate({ ...data, clientId: selectedClientId });\n                      })} className=\"space-y-4\">\n                        <FormField\n                          control={carePlanForm.control}\n                          name=\"planContent\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Vårdplanens innehåll</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Beskrivning av vårdplanen...\" \n                                  rows={6} \n                                  {...field}\n                                  value={field.value || \"\"}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={carePlanForm.control}\n                            name=\"goals\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Mål</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"Vårdmål och delmål...\" \n                                    rows={4} \n                                    {...field} \n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={carePlanForm.control}\n                            name=\"interventions\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Interventioner</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"Planerade interventioner...\" \n                                    rows={4} \n                                    {...field} \n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={carePlanForm.control}\n                          name=\"evaluationCriteria\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Utvärderingskriterier</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Kriterier för utvärdering...\" \n                                  rows={3} \n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button \n                          type=\"submit\" \n                          disabled={createCarePlanMutation.isPending}\n                          className=\"bg-ungdoms-500 hover:bg-ungdoms-600\"\n                        >\n                          <CheckCircle2 className=\"mr-2 h-4 w-4\" />\n                          Spara och gå till Genomförandeplan\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* GENOMFÖRANDEPLAN */}\n              <TabsContent value=\"implementation\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Clipboard className=\"mr-2 h-5 w-5 text-ungdoms-400\" />\n                      Steg 2: Genomförandeplan (GFP)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...implementationForm}>\n                      <form onSubmit={implementationForm.handleSubmit((data) => {\n                        createImplementationMutation.mutate({ ...data, clientId: selectedClientId });\n                      })} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={implementationForm.control}\n                            name=\"startDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Startdatum</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"date\" \n                                    {...field} \n                                    value={field.value ? new Date(field.value).toISOString().split('T')[0] : ''}\n                                    onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : null)}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={implementationForm.control}\n                            name=\"endDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Slutdatum (3 månader)</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"date\" \n                                    {...field} \n                                    value={field.value ? new Date(field.value).toISOString().split('T')[0] : ''}\n                                    onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : null)}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={implementationForm.control}\n                          name=\"planContent\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Planinnehåll</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Genomförandeplanens innehåll...\" \n                                  rows={6} \n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={implementationForm.control}\n                            name=\"goals\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Mål</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"Specifika mål för genomförande...\" \n                                    rows={4} \n                                    {...field} \n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={implementationForm.control}\n                            name=\"activities\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Aktiviteter</FormLabel>\n                                <FormControl>\n                                  <Textarea \n                                    placeholder=\"Planerade aktiviteter...\" \n                                    rows={4} \n                                    {...field} \n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <Button \n                          type=\"submit\" \n                          disabled={createImplementationMutation.isPending}\n                          className=\"bg-ungdoms-500 hover:bg-ungdoms-600\"\n                        >\n                          <CheckCircle2 className=\"mr-2 h-4 w-4\" />\n                          Spara och gå till Dokumentation\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* VECKODOKUMENTATION */}\n              <TabsContent value=\"documentation\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <FileText className=\"mr-2 h-5 w-5 text-ungdoms-400\" />\n                      Steg 3: Veckodokumentation - Vecka {currentWeek}, {currentYear}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...weeklyDocForm}>\n                      <form onSubmit={weeklyDocForm.handleSubmit((data) => {\n                        createWeeklyDocMutation.mutate({ ...data, clientId: selectedClientId });\n                      })} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={weeklyDocForm.control}\n                            name=\"status\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Dokumentation Status</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"done\">Klar</SelectItem>\n                                    <SelectItem value=\"reminded\">Påmind</SelectItem>\n                                    <SelectItem value=\"not_done\">Ej klar</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={weeklyDocForm.control}\n                            name=\"qualityAssessment\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Kvalitetsbedömning</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"approved\">Godkänd</SelectItem>\n                                    <SelectItem value=\"not_approved\">Ej godkänd</SelectItem>\n                                    <SelectItem value=\"pending\">Väntar</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={weeklyDocForm.control}\n                          name=\"documentation\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Dokumentation</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Veckans dokumentation...\" \n                                  rows={6} \n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={weeklyDocForm.control}\n                          name=\"comments\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Kommentarer</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Övriga kommentarer...\" \n                                  rows={3} \n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button \n                          type=\"submit\" \n                          disabled={createWeeklyDocMutation.isPending}\n                          className=\"bg-ungdoms-500 hover:bg-ungdoms-600\"\n                        >\n                          <CheckCircle2 className=\"mr-2 h-4 w-4\" />\n                          Spara och gå till Månadsrapport\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* MÅNADSRAPPORT */}\n              <TabsContent value=\"monthly\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Calendar className=\"mr-2 h-5 w-5 text-ungdoms-400\" />\n                      Steg 4: Månadsrapport - {currentMonth}/{currentYear}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...monthlyReportForm}>\n                      <form onSubmit={monthlyReportForm.handleSubmit((data) => {\n                        createMonthlyReportMutation.mutate({ ...data, clientId: selectedClientId });\n                      })} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={monthlyReportForm.control}\n                            name=\"status\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Rapport Status</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"submitted\">Inlämnad</SelectItem>\n                                    <SelectItem value=\"late\">Försenad</SelectItem>\n                                    <SelectItem value=\"not_submitted\">Ej inlämnad</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={monthlyReportForm.control}\n                            name=\"qualityScore\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Kvalitetspoäng (1-10)</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    min=\"1\" \n                                    max=\"10\" \n                                    {...field}\n                                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={monthlyReportForm.control}\n                          name=\"reportContent\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Rapportinnehåll</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Månadsrapportens innehåll...\" \n                                  rows={8} \n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button \n                          type=\"submit\" \n                          disabled={createMonthlyReportMutation.isPending}\n                          className=\"bg-ungdoms-500 hover:bg-ungdoms-600\"\n                        >\n                          <CheckCircle2 className=\"mr-2 h-4 w-4\" />\n                          Spara och gå till Vimsa Tid\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* VIMSA TID */}\n              <TabsContent value=\"vimsa\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Clock className=\"mr-2 h-5 w-5 text-ungdoms-400\" />\n                      Steg 5: Vimsa Tid - Vecka {currentWeek}, {currentYear}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...vimsaTimeForm}>\n                      <form onSubmit={vimsaTimeForm.handleSubmit((data) => {\n                        createVimsaTimeMutation.mutate({ ...data, clientId: selectedClientId });\n                      })} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={vimsaTimeForm.control}\n                            name=\"hoursWorked\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Arbetade timmar</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    step=\"0.5\" \n                                    min=\"0\" \n                                    {...field}\n                                    onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={vimsaTimeForm.control}\n                            name=\"status\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Status</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"accepted\">Accepterad</SelectItem>\n                                    <SelectItem value=\"rejected\">Avvisad</SelectItem>\n                                    <SelectItem value=\"pending\">Väntar</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={vimsaTimeForm.control}\n                          name=\"activities\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Aktiviteter</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Beskrivning av utförda aktiviteter...\" \n                                  rows={5} \n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={vimsaTimeForm.control}\n                          name=\"notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Anteckningar</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Övriga anteckningar...\" \n                                  rows={3} \n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <Button \n                          type=\"submit\" \n                          disabled={createVimsaTimeMutation.isPending}\n                          className=\"bg-green-600 hover:bg-green-700\"\n                        >\n                          <CheckCircle2 className=\"mr-2 h-4 w-4\" />\n                          Slutför klientflödet!\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":36019},"client/src/components/complete-workflow-overview.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Calendar, FileText, Plus, Users, Clock, X } from \"lucide-react\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Staff, Client } from \"@shared/schema\";\n\nexport function CompleteWorkflowOverview() {\n  const [selectedStaff, setSelectedStaff] = useState<string>(\"\");\n  const [selectedClient, setSelectedClient] = useState<string>(\"\");\n  const [newClientInitials, setNewClientInitials] = useState(\"\");\n  const [newStaffName, setNewStaffName] = useState(\"\");\n  const [newStaffInitials, setNewStaffInitials] = useState(\"\");\n  const [showStaffDialog, setShowStaffDialog] = useState(false);\n  const [showClientDialog, setShowClientDialog] = useState(false);\n  const { toast } = useToast();\n\n  // State för alla funktioner\n  const [dayStatus, setDayStatus] = useState<{[key: string]: string}>({});\n  const [monthStatus, setMonthStatus] = useState<{[key: string]: string}>({});\n  const [careplanStatus, setCareplanStatus] = useState<{[key: string]: {[key: string]: boolean}}>({});\n  const [implementationStatus, setImplementationStatus] = useState<{[key: string]: {[key: string]: boolean}}>({});\n  const [vimsaStatus, setVimsaStatus] = useState<{[key: string]: {[key: string]: boolean}}>({});\n  const [comments, setComments] = useState<{[key: string]: string}>({});\n\n  // Fetch data\n  const { data: staff = [] } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients/all\"],\n  });\n\n  // Mutations\n  const createStaffMutation = useMutation({\n    mutationFn: async (data: { name: string; initials: string }) => {\n      const response = await fetch(\"/api/staff\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          name: data.name,\n          initials: data.initials,\n        }),\n      });\n      if (!response.ok) throw new Error(\"Kunde inte skapa personal\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n      toast({ title: \"Personal skapad\", description: \"Ny personal har lagts till.\" });\n      setNewStaffName(\"\");\n      setNewStaffInitials(\"\");\n      setShowStaffDialog(false);\n    }\n  });\n\n  const createClientMutation = useMutation({\n    mutationFn: async (data: { initials: string; staffId: string }) => {\n      const response = await fetch(\"/api/clients\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Kunde inte skapa klient\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients/all\"] });\n      toast({ title: \"Klient skapad\", description: \"Ny klient har lagts till.\" });\n      setNewClientInitials(\"\");\n      setShowClientDialog(false);\n    }\n  });\n\n  // Save data mutations\n  const saveWeeklyDocMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/weekly-documentation', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to save');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Sparat\", description: \"Veckodokumentation sparad\" });\n    },\n  });\n\n  const saveMonthlyReportMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/monthly-reports', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to save');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Sparat\", description: \"Månadsrapport sparad\" });\n    },\n  });\n\n  const saveCarePlanMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/care-plans', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to save');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Sparat\", description: \"Vårdplan sparad\" });\n    },\n  });\n\n  const saveImplementationPlanMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/implementation-plans', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to save');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Sparat\", description: \"Genomförandeplan sparad\" });\n    },\n  });\n\n  const saveVimsaTimeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/vimsa-time', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to save');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Sparat\", description: \"Vimsa Tid sparad\" });\n    },\n  });\n\n  // Utility functions\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"done\": return \"bg-green-500\";\n      case \"reminded\": return \"bg-yellow-500\";\n      case \"not_done\": return \"bg-red-500\";\n      default: return \"bg-gray-300\";\n    }\n  };\n\n  const toggleDayStatusAndSave = (weekKey: string, day: string) => {\n    const key = `${weekKey}-${day}`;\n    const currentStatus = dayStatus[key] || \"not_done\";\n    const nextStatus = currentStatus === \"not_done\" ? \"reminded\" : \n                      currentStatus === \"reminded\" ? \"done\" : \"not_done\";\n    setDayStatus(prev => ({ ...prev, [key]: nextStatus }));\n    \n    // Save to database\n    const [clientId, weekPart] = weekKey.split('-week');\n    const weekNumber = parseInt(weekPart);\n    \n    saveWeeklyDocMutation.mutate({\n      clientId,\n      staffId: selectedStaff,\n      year: 2024,\n      week: weekNumber,\n      [`${day.toLowerCase()}Documented`]: nextStatus === \"done\",\n      documentation: `${day}: ${nextStatus}`,\n      comments: comments[`week-${clientId}-${weekNumber}`] || \"\"\n    });\n  };\n\n  const toggleMonthStatusAndSave = (monthKey: string) => {\n    const currentStatus = monthStatus[monthKey] || \"not_submitted\";\n    const nextStatus = currentStatus === \"not_submitted\" ? \"late\" : \n                      currentStatus === \"late\" ? \"submitted\" : \"not_submitted\";\n    setMonthStatus(prev => ({ ...prev, [monthKey]: nextStatus }));\n\n    const monthNumber = parseInt(monthKey.replace('month-', ''));\n    saveMonthlyReportMutation.mutate({\n      staffId: selectedStaff,\n      year: 2024,\n      month: monthNumber,\n      status: nextStatus,\n      comment: comments[monthKey] || \"\"\n    });\n  };\n\n  const updateComment = (key: string, comment: string) => {\n    setComments(prev => ({ ...prev, [key]: comment }));\n  };\n\n  // Vårdplan toggle functions\n  const toggleCarePlanStatus = (clientId: string, step: string) => {\n    const currentStatus = careplanStatus[clientId]?.[step] || false;\n    setCareplanStatus(prev => ({\n      ...prev,\n      [clientId]: {\n        ...prev[clientId],\n        [step]: !currentStatus\n      }\n    }));\n\n    saveCarePlanMutation.mutate({\n      clientId,\n      staffId: selectedStaff,\n      [step]: !currentStatus,\n      comments: comments[`careplan-${clientId}`] || \"\"\n    });\n  };\n\n  // Genomförandeplan toggle functions\n  const toggleImplementationStatus = (clientId: string, step: string) => {\n    const currentStatus = implementationStatus[clientId]?.[step] || false;\n    setImplementationStatus(prev => ({\n      ...prev,\n      [clientId]: {\n        ...prev[clientId],\n        [step]: !currentStatus\n      }\n    }));\n\n    saveImplementationPlanMutation.mutate({\n      clientId,\n      staffId: selectedStaff,\n      [step]: !currentStatus,\n      comments: comments[`implementation-${clientId}`] || \"\"\n    });\n  };\n\n  // Vimsa Tid toggle functions\n  const toggleVimsaStatus = (week: number, step: string) => {\n    const weekKey = `week-${week}`;\n    const currentStatus = vimsaStatus[weekKey]?.[step] || false;\n    setVimsaStatus(prev => ({\n      ...prev,\n      [weekKey]: {\n        ...prev[weekKey],\n        [step]: !currentStatus\n      }\n    }));\n\n    saveVimsaTimeMutation.mutate({\n      clientId: selectedClient,\n      staffId: selectedStaff,\n      week,\n      year: 2024,\n      [step]: !currentStatus,\n      comments: comments[`vimsa-${week}`] || \"\"\n    });\n  };\n\n  // Data arrays\n  const weeks = Array.from({ length: 20 }, (_, i) => i + 33);\n  const months = [\n    { value: 8, label: \"Augusti\" },\n    { value: 9, label: \"September\" },\n    { value: 10, label: \"Oktober\" },\n    { value: 11, label: \"November\" },\n    { value: 12, label: \"December\" },\n  ];\n  const dayButtons = ['Mån', 'Tis', 'Ons', 'Tor', 'Fre', 'Lör', 'Sön'];\n\n  // Filtrera klienter baserat på vald personal\n  const filteredClients = selectedStaff \n    ? clients.filter(client => client.staffId === selectedStaff)\n    : clients;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-ungdoms-800\">Komplett Vårdflöde</h3>\n        \n        {/* Personal Selection */}\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex flex-col\">\n            <label className=\"text-sm font-medium mb-1\">Välj Personal:</label>\n            <Select value={selectedStaff} onValueChange={setSelectedStaff}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Välj personal...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {staff.map((staffMember) => (\n                  <SelectItem key={staffMember.id} value={staffMember.id}>\n                    {staffMember.name} ({staffMember.initials})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n\n      {!selectedStaff && (\n        <div className=\"text-center p-8 bg-gray-50 rounded-lg\">\n          <p className=\"text-gray-600\">Välj först en personal för att se deras klienter och vårdflöde.</p>\n        </div>\n      )}\n\n      {selectedStaff && (\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"text-md font-medium text-ungdoms-700\">\n              Klienter för {staff.find(s => s.id === selectedStaff)?.name} ({filteredClients.length} st)\n            </h4>\n            <div className=\"flex gap-2\">\n              <Dialog open={showStaffDialog} onOpenChange={setShowStaffDialog}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    Personal\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Hantera Personal</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium\">Lägg till ny personal</h4>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <Input\n                          placeholder=\"Namn...\"\n                          value={newStaffName}\n                          onChange={(e) => setNewStaffName(e.target.value)}\n                        />\n                        <Input\n                          placeholder=\"Initialer...\"\n                          value={newStaffInitials}\n                          onChange={(e) => setNewStaffInitials(e.target.value)}\n                        />\n                      </div>\n                      <Button \n                        onClick={() => createStaffMutation.mutate({ name: newStaffName, initials: newStaffInitials })}\n                        disabled={!newStaffName || !newStaffInitials || createStaffMutation.isPending}\n                        className=\"w-full bg-green-600 hover:bg-green-700\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Skapa Personal\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n\n              <Dialog open={showClientDialog} onOpenChange={setShowClientDialog}>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-ungdoms-600 hover:bg-ungdoms-700\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Klient\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Lägg till Klient</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <Input\n                      placeholder=\"Klientinitialer...\"\n                      value={newClientInitials}\n                      onChange={(e) => setNewClientInitials(e.target.value)}\n                    />\n                    <Button \n                      onClick={() => createClientMutation.mutate({ \n                        initials: newClientInitials, \n                        staffId: selectedStaff \n                      })}\n                      disabled={!newClientInitials || createClientMutation.isPending}\n                      className=\"w-full bg-green-600 hover:bg-green-700\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Skapa Klient\n                    </Button>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n\n          {/* Client Selection */}\n          <div className=\"flex items-center gap-4\">\n            <label className=\"text-sm font-medium\">Välj Klient:</label>\n            <Select value={selectedClient} onValueChange={setSelectedClient}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Välj klient...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {filteredClients.map((client) => (\n                  <SelectItem key={client.id} value={client.id}>\n                    {client.initials}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {selectedClient && (\n            <Tabs defaultValue=\"weekly\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-5\">\n                <TabsTrigger value=\"weekly\">Veckodokumentation</TabsTrigger>\n                <TabsTrigger value=\"monthly\">Månadsrapporter</TabsTrigger>\n                <TabsTrigger value=\"careplan\">Vårdplan</TabsTrigger>\n                <TabsTrigger value=\"implementation\">Genomförandeplan</TabsTrigger>\n                <TabsTrigger value=\"vimsa\">Vimsa Tid</TabsTrigger>\n              </TabsList>\n\n              {/* Veckodokumentation */}\n              <TabsContent value=\"weekly\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-5 w-5\" />\n                      Veckodokumentation (Vecka 33-52)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {weeks.map((week) => (\n                        <Card key={week} className=\"border-ungdoms-200\">\n                          <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <CardTitle className=\"text-base\">Vecka {week}</CardTitle>\n                            </div>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"space-y-3\">\n                              <div className=\"grid grid-cols-7 gap-2\">\n                                {dayButtons.map((day) => {\n                                  const dayKey = `${selectedClient}-week${week}-${day}`;\n                                  const status = dayStatus[dayKey] || \"not_done\";\n                                  return (\n                                    <div key={day} className=\"text-center\">\n                                      <div className=\"text-xs font-medium mb-1\">{day}</div>\n                                      <Button\n                                        size=\"sm\"\n                                        className={`w-full h-8 ${getStatusColor(status)} hover:opacity-80`}\n                                        onClick={() => toggleDayStatusAndSave(`${selectedClient}-week${week}`, day)}\n                                      >\n                                        <div className=\"w-2 h-2 rounded-full bg-white\"></div>\n                                      </Button>\n                                    </div>\n                                  );\n                                })}\n                              </div>\n                              <div className=\"flex items-center gap-2 text-xs\">\n                                <span className=\"flex items-center gap-1\">\n                                  <div className=\"w-3 h-3 rounded bg-green-500\"></div>\n                                  Gjord\n                                </span>\n                                <span className=\"flex items-center gap-1\">\n                                  <div className=\"w-3 h-3 rounded bg-yellow-500\"></div>\n                                  Påmind\n                                </span>\n                                <span className=\"flex items-center gap-1\">\n                                  <div className=\"w-3 h-3 rounded bg-red-500\"></div>\n                                  Ej gjord\n                                </span>\n                              </div>\n                              <Textarea\n                                placeholder=\"Kommentarer för vecka...\"\n                                rows={2}\n                                className=\"text-sm\"\n                                value={comments[`week-${selectedClient}-${week}`] || \"\"}\n                                onChange={(e) => updateComment(`week-${selectedClient}-${week}`, e.target.value)}\n                              />\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Månadsrapporter */}\n              <TabsContent value=\"monthly\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FileText className=\"h-5 w-5\" />\n                      Månadsrapporter (Augusti-December)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {months.map((month) => (\n                        <Card key={month.value} className=\"border-ungdoms-200\">\n                          <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <CardTitle className=\"text-base\">{month.label} 2024</CardTitle>\n                            </div>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"space-y-3\">\n                              <div className=\"flex gap-2\">\n                                <Button \n                                  size=\"sm\" \n                                  onClick={() => toggleMonthStatusAndSave(`month-${month.value}`)}\n                                  className={\n                                    monthStatus[`month-${month.value}`] === \"submitted\" ? \"bg-green-600 hover:bg-green-700\" :\n                                    monthStatus[`month-${month.value}`] === \"late\" ? \"bg-yellow-600 hover:bg-yellow-700\" :\n                                    \"bg-red-600 hover:bg-red-700\"\n                                  }\n                                >\n                                  {monthStatus[`month-${month.value}`] === \"submitted\" ? \"Inlämnad\" :\n                                   monthStatus[`month-${month.value}`] === \"late\" ? \"Sent\" : \"Ej inlämnad\"}\n                                </Button>\n                              </div>\n                              <Textarea\n                                placeholder=\"Kommentarer för månadsrapport...\"\n                                rows={2}\n                                className=\"text-sm\"\n                                value={comments[`month-${month.value}`] || \"\"}\n                                onChange={(e) => updateComment(`month-${month.value}`, e.target.value)}\n                              />\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Vårdplan Tab Content */}\n              <TabsContent value=\"careplan\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FileText className=\"h-5 w-5\" />\n                      Vårdplan Status (Inkommen → Skickad)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <Card className=\"border-ungdoms-200\">\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-base\">\n                            Vårdplan för {filteredClients.find(c => c.id === selectedClient)?.initials}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-4\">\n                            {/* Vårdplan steg */}\n                            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-3\">\n                              {[\n                                { key: 'received', label: 'Inkommen', color: 'bg-blue-600' },\n                                { key: 'scanned', label: 'Skannad', color: 'bg-purple-600' },\n                                { key: 'notified', label: 'Tillsagd', color: 'bg-yellow-600' },\n                                { key: 'submitted', label: 'Inlämnad', color: 'bg-orange-600' },\n                                { key: 'sent', label: 'Skickad', color: 'bg-green-600' }\n                              ].map((step) => {\n                                const isCompleted = careplanStatus[selectedClient]?.[step.key] || false;\n                                return (\n                                  <div key={step.key} className=\"text-center\">\n                                    <div className=\"text-xs font-medium mb-2\">{step.label}</div>\n                                    <Button\n                                      size=\"sm\"\n                                      className={`w-full h-12 ${isCompleted ? step.color + ' hover:opacity-80' : 'bg-gray-300 hover:bg-gray-400'}`}\n                                      onClick={() => toggleCarePlanStatus(selectedClient, step.key)}\n                                    >\n                                      {isCompleted ? (\n                                        <div className=\"flex flex-col items-center\">\n                                          <div className=\"w-3 h-3 rounded-full bg-white mb-1\"></div>\n                                          <span className=\"text-xs\">Klar</span>\n                                        </div>\n                                      ) : (\n                                        <div className=\"flex flex-col items-center\">\n                                          <div className=\"w-3 h-3 rounded-full border-2 border-white mb-1\"></div>\n                                          <span className=\"text-xs\">Väntar</span>\n                                        </div>\n                                      )}\n                                    </Button>\n                                  </div>\n                                );\n                              })}\n                            </div>\n                            \n                            {/* Progress indikator */}\n                            <div className=\"mt-4\">\n                              <div className=\"flex justify-between text-xs text-gray-600 mb-1\">\n                                <span>Framsteg</span>\n                                <span>{Object.values(careplanStatus[selectedClient] || {}).filter(Boolean).length}/5</span>\n                              </div>\n                              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                                <div \n                                  className=\"bg-green-600 h-2 rounded-full transition-all duration-300\" \n                                  style={{ \n                                    width: `${(Object.values(careplanStatus[selectedClient] || {}).filter(Boolean).length / 5) * 100}%` \n                                  }}\n                                ></div>\n                              </div>\n                            </div>\n\n                            <Textarea\n                              placeholder=\"Kommentarer för vårdplan...\"\n                              rows={3}\n                              className=\"text-sm\"\n                              value={comments[`careplan-${selectedClient}`] || \"\"}\n                              onChange={(e) => updateComment(`careplan-${selectedClient}`, e.target.value)}\n                            />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Genomförandeplan Tab Content */}\n              <TabsContent value=\"implementation\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FileText className=\"h-5 w-5\" />\n                      Genomförandeplan\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <Card className=\"border-ungdoms-200\">\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-base\">\n                            Genomförandeplan för {filteredClients.find(c => c.id === selectedClient)?.initials}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-4\">\n                            {/* Implementation steps */}\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              {[\n                                { key: 'followup1', label: 'Uppföljning 1', desc: 'Första uppföljningsmöte genomfört' },\n                                { key: 'followup2', label: 'Uppföljning 2', desc: 'Andra uppföljningsmöte genomfört' }\n                              ].map((step) => {\n                                const isCompleted = implementationStatus[selectedClient]?.[step.key] || false;\n                                return (\n                                  <div key={step.key} className=\"border rounded-lg p-4\">\n                                    <div className=\"flex items-center justify-between mb-2\">\n                                      <h4 className=\"font-medium\">{step.label}</h4>\n                                      <Button\n                                        size=\"sm\"\n                                        className={`${isCompleted ? 'bg-green-600 hover:bg-green-700' : 'bg-gray-300 hover:bg-gray-400'}`}\n                                        onClick={() => toggleImplementationStatus(selectedClient, step.key)}\n                                      >\n                                        {isCompleted ? \"Genomförd\" : \"Ej genomförd\"}\n                                      </Button>\n                                    </div>\n                                    <p className=\"text-sm text-gray-600\">{step.desc}</p>\n                                  </div>\n                                );\n                              })}\n                            </div>\n\n                            {/* Genomförd datum */}\n                            <div className=\"border rounded-lg p-4\">\n                              <h4 className=\"font-medium mb-2\">Skapad datum</h4>\n                              <Input\n                                type=\"date\"\n                                className=\"w-full\"\n                                defaultValue={new Date().toISOString().split('T')[0]}\n                              />\n                            </div>\n\n                            <Textarea\n                              placeholder=\"Kommentarer för genomförandeplan...\"\n                              rows={3}\n                              className=\"text-sm\"\n                              value={comments[`implementation-${selectedClient}`] || \"\"}\n                              onChange={(e) => updateComment(`implementation-${selectedClient}`, e.target.value)}\n                            />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Vimsa Tid Tab Content */}\n              <TabsContent value=\"vimsa\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Clock className=\"h-5 w-5\" />\n                      Vimsa Tid (Vecka 33-52)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {/* Översikt */}\n                      <Card className=\"bg-blue-50 border-blue-200\">\n                        <CardContent className=\"pt-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <h4 className=\"font-medium text-blue-800\">Tidrapportering Status</h4>\n                              <p className=\"text-sm text-blue-600\">\n                                Godkända veckor: {Object.values(vimsaStatus).filter(week => week.approved).length}/{weeks.length}\n                              </p>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-2xl font-bold text-blue-800\">\n                                {Math.round((Object.values(vimsaStatus).filter(week => week.approved).length / weeks.length) * 100) || 0}%\n                              </div>\n                              <div className=\"text-xs text-blue-600\">Godkänt</div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      {/* Veckovis lista */}\n                      <div className=\"grid gap-2\">\n                        {weeks.map((week) => {\n                          const weekKey = `week-${week}`;\n                          const isApproved = vimsaStatus[weekKey]?.approved || false;\n                          return (\n                            <Card key={week} className=\"border-ungdoms-200 p-3\">\n                              <div className=\"flex items-center justify-between\">\n                                <span className=\"font-medium\">Vecka {week}</span>\n                                <div className=\"flex items-center gap-3\">\n                                  <Button \n                                    size=\"sm\" \n                                    className={`${isApproved ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'}`}\n                                    onClick={() => toggleVimsaStatus(week, 'approved')}\n                                  >\n                                    {isApproved ? (\n                                      <>\n                                        <Calendar className=\"h-3 w-3 mr-1\" />\n                                        Godkänd\n                                      </>\n                                    ) : (\n                                      <>\n                                        <X className=\"h-3 w-3 mr-1\" />\n                                        Ej godkänd\n                                      </>\n                                    )}\n                                  </Button>\n                                  <Input\n                                    placeholder=\"Kommentar...\"\n                                    className=\"w-32 h-8\"\n                                    value={comments[`vimsa-${week}`] || \"\"}\n                                    onChange={(e) => updateComment(`vimsa-${week}`, e.target.value)}\n                                  />\n                                </div>\n                              </div>\n                            </Card>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default CompleteWorkflowOverview;","size_bytes":35014},"client/src/components/dashboard-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  FileText, \n  Calendar, \n  Users, \n  CheckCircle, \n  AlertTriangle, \n  Clock,\n  TrendingUp,\n  Target\n} from \"lucide-react\";\nimport type { Staff, CarePlan, ImplementationPlan, FollowupPlan, WeeklyDocumentation, MonthlyReport } from \"@shared/schema\";\n\ninterface DashboardOverviewProps {\n  staff: Staff[];\n}\n\nexport function DashboardOverview({ staff }: DashboardOverviewProps) {\n  // Fetch overview data\n  const { data: carePlans = [] } = useQuery<CarePlan[]>({\n    queryKey: [\"/api/care-plans/all\"],\n  });\n\n  const { data: implementationPlans = [] } = useQuery<ImplementationPlan[]>({\n    queryKey: [\"/api/implementation-plans/all\"],\n  });\n\n  const { data: followupPlans = [] } = useQuery<FollowupPlan[]>({\n    queryKey: [\"/api/followup-plans/all\"],\n  });\n\n  const { data: weeklyDocs = [] } = useQuery<WeeklyDocumentation[]>({\n    queryKey: [\"/api/weekly-documentation/all\"],\n  });\n\n  const { data: monthlyReports = [] } = useQuery<MonthlyReport[]>({\n    queryKey: [\"/api/monthly-reports/all\"],\n  });\n\n  // Calculate statistics\n  const totalCarePlans = carePlans.length;\n  const completedCarePlans = carePlans.filter(cp => cp.status === \"completed\").length;\n  const pendingCarePlans = carePlans.filter(cp => cp.status !== \"completed\").length;\n\n  const totalGfp = implementationPlans.length;\n  const completedGfp = implementationPlans.filter(ip => ip.status === \"completed\" || ip.status === \"sent\").length;\n  const overdueGfp = implementationPlans.filter(ip => {\n    if (ip.status === \"completed\" || ip.status === \"sent\") return false;\n    return new Date() > new Date(ip.dueDate);\n  }).length;\n\n  const totalFollowupPlans = followupPlans.length;\n  const completedFollowups = followupPlans.filter(fp => fp.status === \"completed\").length;\n  const scheduledFollowups = followupPlans.filter(fp => fp.status === \"scheduled\").length;\n\n  const currentWeek = Math.ceil((new Date().getTime() - new Date(2025, 0, 1).getTime()) / (7 * 24 * 60 * 60 * 1000));\n  const expectedWeeklyDocs = staff.length * Math.max(0, currentWeek - 33); // From week 34\n  const actualWeeklyDocs = weeklyDocs.length;\n  const weeklyDocCompletion = expectedWeeklyDocs > 0 ? (actualWeeklyDocs / expectedWeeklyDocs) * 100 : 100;\n\n  const currentMonth = new Date().getMonth() + 1;\n  const expectedMonthlyReports = staff.length * Math.max(0, currentMonth - 7); // From August (month 8)\n  const submittedMonthlyReports = monthlyReports.filter(mr => mr.status === \"submitted\").length;\n  const monthlyReportCompletion = expectedMonthlyReports > 0 ? (submittedMonthlyReports / expectedMonthlyReports) * 100 : 100;\n\n  const careplanCompletion = totalCarePlans > 0 ? (completedCarePlans / totalCarePlans) * 100 : 0;\n  const gfpCompletion = totalGfp > 0 ? (completedGfp / totalGfp) * 100 : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Main Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"border-ungdoms-200\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-ungdoms-700\">\n              Vårdplaner\n            </CardTitle>\n            <FileText className=\"h-4 w-4 text-ungdoms-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-ungdoms-800\">{totalCarePlans}</div>\n            <div className=\"flex items-center gap-2 mt-2\">\n              <Progress value={careplanCompletion} className=\"flex-1 h-2\" />\n              <span className=\"text-sm text-muted-foreground\">{Math.round(careplanCompletion)}%</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {completedCarePlans} slutförda, {pendingCarePlans} pågående\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-ungdoms-200\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-ungdoms-700\">\n              Genomförandeplaner (GFP)\n            </CardTitle>\n            <Calendar className=\"h-4 w-4 text-ungdoms-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-ungdoms-800\">{totalGfp}</div>\n            <div className=\"flex items-center gap-2 mt-2\">\n              <Progress value={gfpCompletion} className=\"flex-1 h-2\" />\n              <span className=\"text-sm text-muted-foreground\">{Math.round(gfpCompletion)}%</span>\n            </div>\n            <div className=\"flex items-center gap-2 mt-1\">\n              {overdueGfp > 0 && (\n                <Badge className=\"bg-red-100 text-red-800 border-red-200 text-xs\">\n                  <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                  {overdueGfp} försenade\n                </Badge>\n              )}\n              <span className=\"text-xs text-muted-foreground\">\n                {completedGfp} slutförda\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-ungdoms-200\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-ungdoms-700\">\n              Uppföljningsplaner\n            </CardTitle>\n            <Target className=\"h-4 w-4 text-ungdoms-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-ungdoms-800\">{totalFollowupPlans}</div>\n            <div className=\"grid grid-cols-2 gap-2 mt-2\">\n              <div className=\"text-center\">\n                <div className=\"text-sm font-medium text-green-600\">{completedFollowups}</div>\n                <div className=\"text-xs text-muted-foreground\">Slutförda</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-sm font-medium text-blue-600\">{scheduledFollowups}</div>\n                <div className=\"text-xs text-muted-foreground\">Planerade</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-ungdoms-200\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-ungdoms-700\">\n              Aktiv Personal\n            </CardTitle>\n            <Users className=\"h-4 w-4 text-ungdoms-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-ungdoms-800\">{staff.length}</div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Registrerade vårdpersonal i systemet\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Documentation Progress */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card className=\"border-ungdoms-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n              <FileText className=\"h-5 w-5\" />\n              Veckodokumentation\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Fullföljd dokumentation</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  {actualWeeklyDocs} / {expectedWeeklyDocs}\n                </span>\n              </div>\n              <Progress value={weeklyDocCompletion} className=\"h-3\" />\n              <div className=\"flex items-center gap-2\">\n                <Badge className={\n                  weeklyDocCompletion >= 90 ? \"bg-green-100 text-green-800 border-green-200\" :\n                  weeklyDocCompletion >= 75 ? \"bg-yellow-100 text-yellow-800 border-yellow-200\" :\n                  \"bg-red-100 text-red-800 border-red-200\"\n                }>\n                  {Math.round(weeklyDocCompletion)}% slutfört\n                </Badge>\n                <span className=\"text-xs text-muted-foreground\">\n                  Vecka 34 - nuvarande vecka\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-ungdoms-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n              <Calendar className=\"h-5 w-5\" />\n              Månadsrapporter\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Inlämnade rapporter</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  {submittedMonthlyReports} / {expectedMonthlyReports}\n                </span>\n              </div>\n              <Progress value={monthlyReportCompletion} className=\"h-3\" />\n              <div className=\"flex items-center gap-2\">\n                <Badge className={\n                  monthlyReportCompletion >= 90 ? \"bg-green-100 text-green-800 border-green-200\" :\n                  monthlyReportCompletion >= 75 ? \"bg-yellow-100 text-yellow-800 border-yellow-200\" :\n                  \"bg-red-100 text-red-800 border-red-200\"\n                }>\n                  {Math.round(monthlyReportCompletion)}% inlämnade\n                </Badge>\n                <span className=\"text-xs text-muted-foreground\">\n                  Augusti - nuvarande månad\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Status Overview */}\n      <Card className=\"border-ungdoms-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n            <TrendingUp className=\"h-5 w-5\" />\n            Färgkodning och Status\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <h4 className=\"font-semibold mb-3 text-ungdoms-700\">Statusfärger</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                  <span className=\"text-sm\">Grön - Slutförd/Godkänd/OK</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-yellow-500 rounded\"></div>\n                  <span className=\"text-sm\">Gul - Pågående/Sådär/Väntande</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-red-500 rounded\"></div>\n                  <span className=\"text-sm\">Röd - Försenad/Ej godkänd/Problem</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 bg-gray-300 rounded\"></div>\n                  <span className=\"text-sm\">Grå - Ingen färg/Neutral</span>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-3 text-ungdoms-700\">Viktiga Deadlines</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4 text-ungdoms-500\" />\n                  <span>GFP: 3 veckor från personal tillsagd</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <FileText className=\"h-4 w-4 text-ungdoms-500\" />\n                  <span>Veckodokumentation: Löpande vecka 34-52</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4 text-ungdoms-500\" />\n                  <span>Månadsrapporter: Augusti-December</span>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-3 text-ungdoms-700\">Automatiska Markeringar</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                  <span>GFP blir automatiskt röd om försenad</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Status blir grön vid slutförande</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4 text-yellow-500\" />\n                  <span>Påminnelser för kommande deadlines</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13217},"client/src/components/dashboard-stats.tsx":{"content":"import { Users, FileText, Calendar, ClipboardList } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { Staff } from \"@shared/schema\";\n\ninterface DashboardStatsProps {\n  staff: Staff[];\n}\n\nexport function DashboardStats({ staff }: DashboardStatsProps) {\n  const totalStaff = staff.length;\n\n  const stats = [\n    {\n      title: \"Total Personal\",\n      value: totalStaff,\n      icon: Users,\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-blue-600\"\n    },\n    {\n      title: \"Veckodokumentation\",\n      value: 0, // Will be populated from API\n      icon: FileText,\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-green-600\"\n    },\n    {\n      title: \"Månadsrapporter\",\n      value: 0, // Will be populated from API\n      icon: ClipboardList,\n      bgColor: \"bg-yellow-100\",\n      iconColor: \"text-yellow-600\"\n    },\n    {\n      title: \"Vårdplaner\",\n      value: 0, // Will be populated from API\n      icon: Calendar,\n      bgColor: \"bg-purple-100\",\n      iconColor: \"text-purple-600\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {stats.map((stat, index) => (\n        <Card key={index} className=\"shadow-sm border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className={`p-2 ${stat.bgColor} rounded-lg`}>\n                <stat.icon className={`${stat.iconColor} h-6 w-6`} />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">{stat.title}</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stat.value}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1800},"client/src/components/data-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  FileText, \n  Calendar, \n  Users, \n  CheckCircle, \n  Clock,\n  AlertTriangle,\n  Eye\n} from \"lucide-react\";\nimport type { \n  CarePlan, \n  WeeklyDocumentation, \n  MonthlyReport, \n  Staff, \n  Client \n} from \"@shared/schema\";\n\nexport function DataOverview() {\n  // Fetch all data\n  const { data: carePlans = [] } = useQuery<CarePlan[]>({\n    queryKey: [\"/api/care-plans/all\"],\n  });\n\n  const { data: weeklyDocs = [] } = useQuery<WeeklyDocumentation[]>({\n    queryKey: [\"/api/weekly-documentation/all\"],\n  });\n\n  const { data: monthlyReports = [] } = useQuery<any[]>({\n    queryKey: [\"/api/monthly-reports/all\"],\n  });\n\n  const { data: staff = [] } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients/all\"],\n  });\n\n  const getStaffName = (staffId: string) => {\n    const staffMember = staff.find(s => s.id === staffId);\n    return staffMember ? staffMember.name : \"Okänd personal\";\n  };\n\n  const getClientInitials = (clientId: string) => {\n    const client = clients.find(c => c.id === clientId);\n    return client ? client.initials : \"Okänd klient\";\n  };\n\n  const formatDate = (dateString: string | Date | null | undefined) => {\n    if (!dateString) return \"Ej angivet\";\n    return new Date(dateString).toLocaleDateString('sv-SE');\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-ungdoms-800\">Dataöversikt</h3>\n        <div className=\"flex gap-2 text-sm text-ungdoms-600\">\n          <span>Total: {carePlans.length + weeklyDocs.length + monthlyReports.length} poster</span>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"care-plans\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"care-plans\">\n            Vårdplaner ({carePlans.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"weekly-docs\">\n            Veckodokumentation ({weeklyDocs.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"monthly-reports\">\n            Månadsrapporter ({monthlyReports.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"clients\">\n            Klienter ({clients.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"care-plans\">\n          <div className=\"space-y-4\">\n            {carePlans.length === 0 ? (\n              <Card className=\"border-dashed border-2\">\n                <CardContent className=\"flex flex-col items-center justify-center py-8\">\n                  <FileText className=\"h-12 w-12 text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500\">Inga vårdplaner skapade ännu</p>\n                </CardContent>\n              </Card>\n            ) : (\n              carePlans.map((plan) => (\n                <Card key={plan.id} className=\"border-ungdoms-200\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-1\">\n                        <CardTitle className=\"text-sm font-medium\">\n                          {getClientInitials(plan.clientId)} - {getStaffName(plan.staffId)}\n                        </CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Skapad: {formatDate(plan.createdAt)}\n                        </p>\n                      </div>\n                      <Badge \n                        className={\n                          plan.status === \"completed\" ? \"bg-green-100 text-green-800\" :\n                          plan.status === \"staff_notified\" ? \"bg-blue-100 text-blue-800\" :\n                          \"bg-yellow-100 text-yellow-800\"\n                        }\n                      >\n                        {plan.status === \"completed\" ? \"Klar\" :\n                         plan.status === \"staff_notified\" ? \"Personal notifierad\" :\n                         \"Pågående\"}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2 text-xs\">\n                        <Calendar className=\"h-3 w-3\" />\n                        <span>Mottagen: {formatDate(plan.receivedDate)}</span>\n                        {plan.enteredJournalDate && (\n                          <span>• JD: {formatDate(plan.enteredJournalDate)}</span>\n                        )}\n                      </div>\n                      {plan.planContent && (\n                        <p className=\"text-xs text-muted-foreground truncate\">\n                          {plan.planContent}\n                        </p>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"weekly-docs\">\n          <div className=\"space-y-4\">\n            {weeklyDocs.length === 0 ? (\n              <Card className=\"border-dashed border-2\">\n                <CardContent className=\"flex flex-col items-center justify-center py-8\">\n                  <Calendar className=\"h-12 w-12 text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500\">Ingen veckodokumentation skapad ännu</p>\n                </CardContent>\n              </Card>\n            ) : (\n              weeklyDocs.map((doc) => (\n                <Card key={doc.id} className=\"border-ungdoms-200\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-1\">\n                        <CardTitle className=\"text-sm font-medium\">\n                          {getClientInitials(doc.clientId)} - Vecka {doc.week}, {doc.year}\n                        </CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Personal: {getStaffName(doc.staffId)}\n                        </p>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Badge className={doc.approved ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\"}>\n                          {doc.approved ? \"Godkänd\" : \"Ej godkänd\"}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-1 text-xs\">\n                        <span>Dokumenterade dagar:</span>\n                        <div className=\"flex gap-1\">\n                          {doc.mondayDocumented && <Badge variant=\"secondary\" className=\"text-xs px-1\">Mån</Badge>}\n                          {doc.tuesdayDocumented && <Badge variant=\"secondary\" className=\"text-xs px-1\">Tis</Badge>}\n                          {doc.wednesdayDocumented && <Badge variant=\"secondary\" className=\"text-xs px-1\">Ons</Badge>}\n                          {doc.thursdayDocumented && <Badge variant=\"secondary\" className=\"text-xs px-1\">Tor</Badge>}\n                          {doc.fridayDocumented && <Badge variant=\"secondary\" className=\"text-xs px-1\">Fre</Badge>}\n                        </div>\n                      </div>\n                      {doc.documentation && (\n                        <p className=\"text-xs text-muted-foreground truncate\">\n                          {doc.documentation}\n                        </p>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"monthly-reports\">\n          <div className=\"space-y-4\">\n            {monthlyReports.length === 0 ? (\n              <Card className=\"border-dashed border-2\">\n                <CardContent className=\"flex flex-col items-center justify-center py-8\">\n                  <FileText className=\"h-12 w-12 text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500\">Inga månadsrapporter skapade ännu</p>\n                </CardContent>\n              </Card>\n            ) : (\n              monthlyReports.map((report) => (\n                <Card key={report.id} className=\"border-ungdoms-200\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-1\">\n                        <CardTitle className=\"text-sm font-medium\">\n                          Månadsrapport - {report.month}/{report.year}\n                        </CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Skapad: {formatDate(report.createdAt)}\n                        </p>\n                      </div>\n                      <Badge \n                        className={\n                          report.status === \"submitted\" ? \"bg-green-100 text-green-800\" :\n                          report.status === \"reviewed\" ? \"bg-blue-100 text-blue-800\" :\n                          \"bg-yellow-100 text-yellow-800\"\n                        }\n                      >\n                        {report.status === \"submitted\" ? \"Inskickad\" :\n                         report.status === \"reviewed\" ? \"Granskad\" :\n                         \"Utkast\"}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    {report.reportContent && (\n                      <p className=\"text-xs text-muted-foreground truncate\">\n                        {report.reportContent}\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"clients\">\n          <div className=\"space-y-4\">\n            {clients.length === 0 ? (\n              <Card className=\"border-dashed border-2\">\n                <CardContent className=\"flex flex-col items-center justify-center py-8\">\n                  <Users className=\"h-12 w-12 text-gray-400 mb-4\" />\n                  <p className=\"text-gray-500\">Inga klienter registrerade ännu</p>\n                </CardContent>\n              </Card>\n            ) : (\n              clients.map((client) => (\n                <Card key={client.id} className=\"border-ungdoms-200\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-1\">\n                        <CardTitle className=\"text-sm font-medium\">\n                          {client.initials}\n                        </CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Ansvarig: {getStaffName(client.staffId)}\n                        </p>\n                      </div>\n                      <Badge className={client.status === \"active\" ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                        {client.status === \"active\" ? \"Aktiv\" : \"Inaktiv\"}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-1\">\n                      <p className=\"text-xs text-muted-foreground\">\n                        Registrerad: {formatDate(client.createdAt)}\n                      </p>\n                      {client.notes && (\n                        <p className=\"text-xs text-muted-foreground truncate\">\n                          {client.notes}\n                        </p>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":12354},"client/src/components/followup-form.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Calendar, ClipboardList, Clock, Users } from \"lucide-react\";\nimport { AddClientDialog } from \"./add-client-dialog\";\nimport { ClientDetailsDialog } from \"./client-details-dialog\";\nimport { SimpleCarePlanDialog } from \"./simple-care-plan-dialog\";\nimport { UngdomsLogo } from \"./ungdoms-logo\";\nimport type { Staff } from \"@shared/schema\";\n\ninterface ClientManagementProps {\n  staff: Staff;\n}\n\nexport function ClientManagement({ staff }: ClientManagementProps) {\n  const { data: clients = [], isLoading } = useQuery({\n    queryKey: [\"/api/staff\", staff.id, \"clients\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n        <p className=\"text-gray-600\">Laddar klienter...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* UNGDOMS Header */}\n      <div className=\"ungdoms-header p-6 rounded-lg shadow-lg\">\n        <UngdomsLogo />\n      </div>\n\n      {/* Add Client Button */}\n      <Card className=\"shadow-sm border-ungdoms-600\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Klienthantering</CardTitle>\n          <AddClientDialog staff={staff} />\n        </CardHeader>\n        <CardContent>\n          {clients.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              Inga klienter registrerade än\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {clients.map((client: any) => (\n                <Card key={client.id} className=\"border-ungdoms-600 hover:shadow-lg hover:shadow-ungdoms-500/20 transition-all duration-300 bg-card/50 backdrop-blur-sm\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"h-10 w-10 bg-ungdoms-500/20 border border-ungdoms-400 rounded-full flex items-center justify-center\">\n                        <span className=\"text-ungdoms-300 font-semibold\">{client.initials}</span>\n                      </div>\n                      <ClientDetailsDialog client={client} />\n                    </div>\n                    <h3 className=\"font-medium text-foreground mb-2\">{client.initials}</h3>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"h-3 w-3 mr-1 text-ungdoms-400\" />\n                        <span className=\"text-muted-foreground\">Skapad: {client.createdAt ? new Date(client.createdAt).toLocaleDateString('sv-SE') : 'Okänt'}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Users className=\"h-3 w-3 mr-1 text-ungdoms-400\" />\n                        <span className=\"text-muted-foreground\">Status: <span className=\"status-approved\">Aktiv</span></span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"border-ungdoms-600 bg-card/30 backdrop-blur-sm hover:shadow-lg hover:shadow-ungdoms-500/10 transition-all duration-300\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-ungdoms-500/20 border border-ungdoms-400 rounded-lg\">\n                <FileText className=\"h-5 w-5 text-ungdoms-400\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Veckodokumentation</p>\n                <p className=\"text-lg font-bold text-foreground\">{clients.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-ungdoms-600 bg-card/30 backdrop-blur-sm hover:shadow-lg hover:shadow-ungdoms-500/10 transition-all duration-300\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-900/30 border border-green-700 rounded-lg\">\n                <ClipboardList className=\"h-5 w-5 text-green-400\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Månadsrapporter</p>\n                <p className=\"text-lg font-bold text-foreground\">{clients.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-ungdoms-600 bg-card/30 backdrop-blur-sm hover:shadow-lg hover:shadow-ungdoms-500/10 transition-all duration-300\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-yellow-900/30 border border-yellow-700 rounded-lg\">\n                <Calendar className=\"h-5 w-5 text-yellow-400\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Vårdplaner</p>\n                <p className=\"text-lg font-bold text-foreground\">{clients.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-ungdoms-600 bg-card/30 backdrop-blur-sm hover:shadow-lg hover:shadow-ungdoms-500/10 transition-all duration-300\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-900/30 border border-purple-700 rounded-lg\">\n                <Clock className=\"h-5 w-5 text-purple-400\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Vimsa Tid</p>\n                <p className=\"text-lg font-bold text-foreground\">{clients.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Vårdplan Creation Section */}\n      <Card className=\"border-ungdoms-600\">\n        <CardHeader>\n          <CardTitle className=\"text-ungdoms-800\">Skapa Vårdplan</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"text-center\">\n            <SimpleCarePlanDialog \n              staffId={selectedStaff?.id || \"\"} \n              trigger={\n                <Button className=\"bg-ungdoms-600 hover:bg-ungdoms-700 text-white px-8 py-3\">\n                  <FileText className=\"h-5 w-5 mr-3\" />\n                  Skapa Vårdplan (Aktiverar Alla Flöden)\n                </Button>\n              } \n            />\n          </div>\n          \n          <Card className=\"bg-ungdoms-50 border-ungdoms-200\">\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-medium mb-2 text-ungdoms-800\">När du skapar en vårdplan aktiveras automatiskt:</h4>\n              <div className=\"grid grid-cols-2 gap-2 text-sm text-ungdoms-700\">\n                <div className=\"flex items-center\">\n                  <FileText className=\"h-4 w-4 mr-2 text-ungdoms-500\" />\n                  Genomförandeplan (GFP)\n                </div>\n                <div className=\"flex items-center\">\n                  <Calendar className=\"h-4 w-4 mr-2 text-green-500\" />\n                  Veckodokumentation (Mån-Sön)\n                </div>\n                <div className=\"flex items-center\">\n                  <ClipboardList className=\"h-4 w-4 mr-2 text-blue-500\" />\n                  Månadsrapporter (Aug-Dec)\n                </div>\n                <div className=\"flex items-center\">\n                  <Clock className=\"h-4 w-4 mr-2 text-purple-500\" />\n                  Vimsa Tid (Vecka 33-52)\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8239},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Download, Menu, User, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface HeaderProps {\n  onSidebarToggle: () => void;\n  onExport: () => void;\n  searchTerm: string;\n  onSearchChange: (value: string) => void;\n}\n\nexport function Header({ onSidebarToggle, onExport, searchTerm, onSearchChange }: HeaderProps) {\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40\">\n      <div className=\"px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"lg:hidden p-2\"\n              onClick={onSidebarToggle}\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n            <div className=\"flex items-center ml-4 lg:ml-0\">\n              <div className=\"flex-shrink-0\">\n                <Heart className=\"h-8 w-8 text-blue-600 mr-3\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">Uppföljning – Öppenvård</h1>\n                <p className=\"text-sm text-gray-500\">Vårdadministrativt system</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Search */}\n            <div className=\"hidden md:block relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Sök personal eller data...\"\n                value={searchTerm}\n                onChange={(e) => onSearchChange(e.target.value)}\n                className=\"w-80 pl-10\"\n              />\n              <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n            </div>\n            \n            {/* Export Button */}\n            <Button \n              onClick={onExport}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Exportera</span>\n            </Button>\n            \n            {/* User Menu */}\n            <Button variant=\"ghost\" size=\"sm\">\n              <User className=\"h-6 w-6\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2459},"client/src/components/login-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { UngdomsLogo } from \"@/components/ungdoms-logo\";\nimport { LoginData, loginSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Lock, User } from \"lucide-react\";\n\ninterface LoginFormProps {\n  onLoginSuccess: (user: any) => void;\n}\n\nexport function LoginForm({ onLoginSuccess }: LoginFormProps) {\n  const [error, setError] = useState<string>(\"\");\n  const { toast } = useToast();\n\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData) => {\n      setError(\"\");\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Inloggning misslyckades\");\n      }\n      return response.json();\n    },\n    onSuccess: (userData) => {\n      toast({\n        title: \"Välkommen!\",\n        description: `Inloggad som ${userData.user.username}`,\n      });\n      onLoginSuccess(userData.user);\n    },\n    onError: (error: Error) => {\n      setError(error.message);\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-ungdoms-50 to-white flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md border-ungdoms-200 shadow-lg\">\n        <CardHeader className=\"text-center pb-4\">\n          <div className=\"flex justify-center mb-4\">\n            <UngdomsLogo size=\"lg\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-ungdoms-800\">\n            Öppenvård Admin\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Säker inloggning för vårdpersonal\n          </p>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"mb-6 flex items-center justify-center space-x-2 text-sm text-ungdoms-600\">\n            <Shield className=\"h-4 w-4\" />\n            <span>GDPR-säker vårdadministration</span>\n          </div>\n\n          {error && (\n            <Alert className=\"mb-4 border-red-200 bg-red-50\">\n              <AlertDescription className=\"text-red-700\">\n                {error}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit((data) => loginMutation.mutate(data))} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-ungdoms-700\">Användarnamn</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-3 h-4 w-4 text-ungdoms-400\" />\n                        <Input \n                          placeholder=\"Skriv ditt användarnamn\" \n                          className=\"pl-10 border-ungdoms-200 focus:border-ungdoms-500 focus:ring-ungdoms-500\"\n                          {...field} \n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-ungdoms-700\">Lösenord</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-3 h-4 w-4 text-ungdoms-400\" />\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Skriv ditt lösenord\" \n                          className=\"pl-10 border-ungdoms-200 focus:border-ungdoms-500 focus:ring-ungdoms-500\"\n                          {...field} \n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-ungdoms-600 hover:bg-ungdoms-700 text-white py-3\"\n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>Loggar in...</span>\n                  </div>\n                ) : (\n                  \"Logga in\"\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center text-xs text-muted-foreground\">\n            <p>© 2025 UNGDOMS Öppenvård</p>\n            <p>Säker vårdadministration enligt GDPR</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5664},"client/src/components/monthly-report-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, FileText } from \"lucide-react\";\nimport type { Staff } from \"@shared/schema\";\n\nconst monthlyReportSchema = z.object({\n  staffId: z.string().min(1, \"Personal måste väljas\"),\n  year: z.number().min(2024, \"År krävs\"),\n  month: z.number().min(1).max(12, \"Månad måste vara 1-12\"),\n  reportContent: z.string().min(1, \"Dokumentation krävs\"),\n  status: z.enum([\"draft\", \"submitted\", \"reviewed\"]).default(\"draft\"),\n  comment: z.string().optional(),\n});\n\ntype MonthlyReportFormData = z.infer<typeof monthlyReportSchema>;\n\ninterface MonthlyReportDialogProps {\n  trigger?: React.ReactNode;\n}\n\nexport function MonthlyReportDialog({ trigger }: MonthlyReportDialogProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = currentDate.getMonth() + 1;\n\n  const form = useForm<MonthlyReportFormData>({\n    resolver: zodResolver(monthlyReportSchema),\n    defaultValues: {\n      staffId: \"\",\n      year: currentYear,\n      month: currentMonth,\n      reportContent: \"\",\n      status: \"draft\",\n      comment: \"\",\n    },\n  });\n\n  // Fetch all staff\n  const { data: staff = [] } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n  });\n\n  // Create monthly report mutation\n  const createReportMutation = useMutation({\n    mutationFn: async (data: MonthlyReportFormData) => {\n      const response = await fetch(\"/api/monthly-reports\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Kunde inte skapa månadsrapport\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/monthly-reports\"] });\n      \n      toast({\n        title: \"Månadsrapport skapad\",\n        description: \"Månadsrapporten har skapats.\",\n      });\n      \n      form.reset();\n      setIsOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fel\",\n        description: error.message || \"Kunde inte skapa månadsrapport\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: MonthlyReportFormData) => {\n    createReportMutation.mutate(data);\n  };\n\n  const months = [\n    { value: 1, label: \"Januari\" },\n    { value: 2, label: \"Februari\" },\n    { value: 3, label: \"Mars\" },\n    { value: 4, label: \"April\" },\n    { value: 5, label: \"Maj\" },\n    { value: 6, label: \"Juni\" },\n    { value: 7, label: \"Juli\" },\n    { value: 8, label: \"Augusti\" },\n    { value: 9, label: \"September\" },\n    { value: 10, label: \"Oktober\" },\n    { value: 11, label: \"November\" },\n    { value: 12, label: \"December\" },\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button className=\"bg-green-600 hover:bg-green-700 text-white\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            Skapa Månadsrapport\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5 text-green-600\" />\n            Skapa ny månadsrapport\n          </DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"staffId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Välj personal</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Välj personal\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {staff.map((staffMember) => (\n                        <SelectItem key={staffMember.id} value={staffMember.id}>\n                          {staffMember.name} ({staffMember.initials})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"year\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>År</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"month\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Månad</FormLabel>\n                    <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={field.value?.toString()}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Välj månad\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {months.map((month) => (\n                          <SelectItem key={month.value} value={month.value.toString()}>\n                            {month.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"reportContent\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Dokumentation</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Månadsrapportens innehåll...\" \n                      rows={5}\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Välj status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"draft\">Utkast</SelectItem>\n                      <SelectItem value=\"submitted\">Inskickad</SelectItem>\n                      <SelectItem value=\"reviewed\">Granskad</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"comment\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Kommentar (valfritt)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Ytterligare kommentarer...\" \n                      rows={2}\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsOpen(false)}\n              >\n                Avbryt\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"bg-green-600 hover:bg-green-700\"\n                disabled={createReportMutation.isPending}\n              >\n                {createReportMutation.isPending ? \"Skapar...\" : \"Skapa rapport\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9631},"client/src/components/personal-info-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Save } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertStaffSchema, type Staff, type UpdateStaff } from \"@shared/schema\";\n\ninterface PersonalInfoFormProps {\n  staff: Staff;\n}\n\nexport function PersonalInfoForm({ staff }: PersonalInfoFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<UpdateStaff>({\n    resolver: zodResolver(insertStaffSchema.partial()),\n    defaultValues: {\n      name: staff.name,\n      initials: staff.initials,\n      personnummer: staff.personnummer || \"\",\n      telefon: staff.telefon || \"\",\n      epost: staff.epost || \"\",\n      adress: staff.adress || \"\",\n      anställningsdatum: staff.anställningsdatum || \"\",\n      roll: staff.roll || \"\",\n      avdelning: staff.avdelning || \"\",\n    },\n  });\n\n  const updateStaffMutation = useMutation({\n    mutationFn: async (data: UpdateStaff) => {\n      const response = await apiRequest(\"PUT\", `/api/staff/${staff.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n      toast({\n        title: \"Framgång\",\n        description: \"Personalinformation sparad framgångsrikt!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fel\",\n        description: \"Kunde inte spara personalinformation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UpdateStaff) => {\n    updateStaffMutation.mutate(data);\n  };\n\n  return (\n    <Card className=\"shadow-sm border border-gray-200\">\n      <CardHeader>\n        <CardTitle>Personalinformation</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fullständigt namn</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"personnummer\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Personnummer</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"YYYYMMDD-XXXX\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"telefon\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Telefon</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"+46 70 123 45 67\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"epost\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>E-post</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"namn@sjukhus.se\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <FormField\n              control={form.control}\n              name=\"adress\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Adress</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Gatuadress, Postnummer Stad\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"anställningsdatum\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Anställningsdatum</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"roll\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Roll</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Välj roll\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"sjuksköterska\">Sjuksköterska</SelectItem>\n                        <SelectItem value=\"undersköterska\">Undersköterska</SelectItem>\n                        <SelectItem value=\"läkare\">Läkare</SelectItem>\n                        <SelectItem value=\"kurator\">Kurator</SelectItem>\n                        <SelectItem value=\"administratör\">Administratör</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <FormField\n              control={form.control}\n              name=\"avdelning\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Avdelning</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Välj avdelning\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"akutmottagning\">Akutmottagning</SelectItem>\n                      <SelectItem value=\"öppenvård\">Öppenvård</SelectItem>\n                      <SelectItem value=\"intensivvård\">Intensivvård</SelectItem>\n                      <SelectItem value=\"barnklinik\">Barnklinik</SelectItem>\n                      <SelectItem value=\"kirurgi\">Kirurgi</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              disabled={updateStaffMutation.isPending}\n            >\n              <Save className=\"mr-2 h-4 w-4\" />\n              Spara Personalinformation\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8059},"client/src/components/quick-search.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, User, Users, FileText, Clock } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Staff, Client, CarePlan, ImplementationPlan } from \"@shared/schema\";\n\ninterface QuickSearchProps {\n  onSelectStaff?: (staff: Staff) => void;\n  onSelectClient?: (client: Client, staff: Staff) => void;\n  placeholder?: string;\n  className?: string;\n}\n\ninterface SearchResult {\n  type: 'staff' | 'client' | 'care-plan' | 'implementation-plan';\n  id: string;\n  title: string;\n  subtitle: string;\n  staff?: Staff;\n  client?: Client;\n  carePlan?: CarePlan;\n  implementationPlan?: ImplementationPlan;\n  matchedField?: string;\n}\n\nexport function QuickSearch({ \n  onSelectStaff, \n  onSelectClient, \n  placeholder = \"Sök personal, klienter eller ärenden...\",\n  className = \"\"\n}: QuickSearchProps) {\n  const [query, setQuery] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const searchRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Fetch all data\n  const { data: staff = [] } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients/all\"],\n  });\n\n  const { data: carePlans = [] } = useQuery<CarePlan[]>({\n    queryKey: [\"/api/care-plans/all\"],\n  });\n\n  const { data: implementationPlans = [] } = useQuery<ImplementationPlan[]>({\n    queryKey: [\"/api/implementation-plans/all\"],\n  });\n\n  // Search logic\n  const searchResults: SearchResult[] = query.trim().length >= 2 ? (() => {\n    const results: SearchResult[] = [];\n    const searchTerm = query.toLowerCase();\n\n    // Search staff\n    staff.forEach(staffMember => {\n      const fields = [\n        { value: staffMember.name, field: 'namn' },\n        { value: staffMember.initials, field: 'initialer' },\n        { value: staffMember.personnummer, field: 'personnummer' },\n        { value: staffMember.telefon, field: 'telefon' },\n        { value: staffMember.epost, field: 'e-post' },\n        { value: staffMember.roll, field: 'roll' },\n        { value: staffMember.avdelning, field: 'avdelning' }\n      ];\n\n      const matchedField = fields.find(field => \n        field.value.toLowerCase().includes(searchTerm)\n      );\n\n      if (matchedField) {\n        results.push({\n          type: 'staff',\n          id: staffMember.id,\n          title: staffMember.name,\n          subtitle: `${staffMember.initials} • ${staffMember.roll || 'Personal'}`,\n          staff: staffMember,\n          matchedField: matchedField.field\n        });\n      }\n    });\n\n    // Search clients\n    clients.forEach(client => {\n      const staffMember = staff.find(s => s.id === client.staffId);\n      if (!staffMember) return;\n\n      const fields = [\n        { value: client.initials, field: 'initialer' },\n        { value: client.personalNumber, field: 'personnummer' },\n        { value: client.notes, field: 'anteckningar' }\n      ];\n\n      const matchedField = fields.find(field => \n        field.value.toLowerCase().includes(searchTerm)\n      );\n\n      if (matchedField) {\n        results.push({\n          type: 'client',\n          id: client.id,\n          title: `Klient: ${client.initials}`,\n          subtitle: `Ansvarig: ${staffMember.name}`,\n          client,\n          staff: staffMember,\n          matchedField: matchedField.field\n        });\n      }\n    });\n\n    // Search care plans\n    carePlans.forEach(carePlan => {\n      const client = clients.find(c => c.id === carePlan.clientId);\n      const staffMember = staff.find(s => s.id === carePlan.staffId);\n      if (!client || !staffMember) return;\n\n      const fields = [\n        { value: carePlan.planContent, field: 'planinnehåll' },\n        { value: carePlan.goals, field: 'mål' },\n        { value: carePlan.interventions, field: 'interventioner' },\n        { value: carePlan.comment, field: 'kommentar' }\n      ];\n\n      const matchedField = fields.find(field => \n        field.value.toLowerCase().includes(searchTerm)\n      );\n\n      if (matchedField) {\n        results.push({\n          type: 'care-plan',\n          id: carePlan.id,\n          title: `Vårdplan: ${client.initials}`,\n          subtitle: `${staffMember.name} • Status: ${getStatusText(carePlan.status)}`,\n          client,\n          staff: staffMember,\n          carePlan,\n          matchedField: matchedField.field\n        });\n      }\n    });\n\n    // Search implementation plans\n    implementationPlans.forEach(implPlan => {\n      const client = clients.find(c => c.id === implPlan.clientId);\n      const staffMember = staff.find(s => s.id === implPlan.staffId);\n      if (!client || !staffMember) return;\n\n      const fields = [\n        { value: implPlan.planContent, field: 'planinnehåll' },\n        { value: implPlan.goals, field: 'mål' },\n        { value: implPlan.activities, field: 'aktiviteter' },\n        { value: implPlan.comment, field: 'kommentar' }\n      ];\n\n      const matchedField = fields.find(field => \n        field.value.toLowerCase().includes(searchTerm)\n      );\n\n      if (matchedField) {\n        const isOverdue = new Date() > new Date(implPlan.dueDate);\n        results.push({\n          type: 'implementation-plan',\n          id: implPlan.id,\n          title: `GFP: ${client.initials}`,\n          subtitle: `${staffMember.name} • ${isOverdue ? 'Försenad' : 'Pågående'}`,\n          client,\n          staff: staffMember,\n          implementationPlan: implPlan,\n          matchedField: matchedField.field\n        });\n      }\n    });\n\n    return results.slice(0, 8); // Limit to 8 results\n  })() : [];\n\n  // Helper function for status text\n  const getStatusText = (status: string) => {\n    const statusMap: Record<string, string> = {\n      'received': 'Mottagen',\n      'entered_journal': 'I journal',\n      'staff_notified': 'Personal notifierad',\n      'gfp_pending': 'Väntar GFP',\n      'completed': 'Slutförd'\n    };\n    return statusMap[status] || status;\n  };\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!isOpen || searchResults.length === 0) return;\n\n      switch (e.key) {\n        case 'ArrowDown':\n          e.preventDefault();\n          setSelectedIndex(prev => \n            prev < searchResults.length - 1 ? prev + 1 : 0\n          );\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          setSelectedIndex(prev => \n            prev > 0 ? prev - 1 : searchResults.length - 1\n          );\n          break;\n        case 'Enter':\n          e.preventDefault();\n          if (selectedIndex >= 0) {\n            handleSelect(searchResults[selectedIndex]);\n          }\n          break;\n        case 'Escape':\n          setIsOpen(false);\n          setSelectedIndex(-1);\n          inputRef.current?.blur();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, searchResults, selectedIndex]);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const handleSelect = (result: SearchResult) => {\n    if (result.type === 'staff' && result.staff && onSelectStaff) {\n      onSelectStaff(result.staff);\n    } else if (result.type === 'client' && result.client && result.staff && onSelectClient) {\n      onSelectClient(result.client, result.staff);\n    } else if ((result.type === 'care-plan' || result.type === 'implementation-plan') && result.client && result.staff && onSelectClient) {\n      onSelectClient(result.client, result.staff);\n    }\n    \n    setQuery(\"\");\n    setIsOpen(false);\n    setSelectedIndex(-1);\n    inputRef.current?.blur();\n  };\n\n  const getResultIcon = (type: string) => {\n    switch (type) {\n      case 'staff': return <User className=\"h-4 w-4\" />;\n      case 'client': return <Users className=\"h-4 w-4\" />;\n      case 'care-plan': return <FileText className=\"h-4 w-4\" />;\n      case 'implementation-plan': return <Clock className=\"h-4 w-4\" />;\n      default: return <Search className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getResultTypeText = (type: string) => {\n    switch (type) {\n      case 'staff': return 'Personal';\n      case 'client': return 'Klient';\n      case 'care-plan': return 'Vårdplan';\n      case 'implementation-plan': return 'GFP';\n      default: return '';\n    }\n  };\n\n  return (\n    <div ref={searchRef} className={`relative ${className}`}>\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n        <Input\n          ref={inputRef}\n          type=\"text\"\n          placeholder={placeholder}\n          value={query}\n          onChange={(e) => {\n            setQuery(e.target.value);\n            setIsOpen(true);\n            setSelectedIndex(-1);\n          }}\n          onFocus={() => setIsOpen(true)}\n          className=\"pl-10 pr-4\"\n        />\n      </div>\n\n      {isOpen && query.trim().length >= 2 && (\n        <Card className=\"absolute top-full left-0 right-0 mt-1 z-50 max-h-96 overflow-y-auto shadow-lg border border-gray-200\">\n          <CardContent className=\"p-0\">\n            {searchResults.length > 0 ? (\n              <div className=\"py-2\">\n                {searchResults.map((result, index) => (\n                  <div\n                    key={`${result.type}-${result.id}`}\n                    className={`px-4 py-3 cursor-pointer border-b last:border-b-0 transition-colors ${\n                      index === selectedIndex\n                        ? 'bg-ungdoms-50 border-ungdoms-200'\n                        : 'hover:bg-gray-50'\n                    }`}\n                    onClick={() => handleSelect(result)}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex-shrink-0 text-ungdoms-600\">\n                        {getResultIcon(result.type)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2\">\n                          <p className=\"text-sm font-medium text-gray-900 truncate\">\n                            {result.title}\n                          </p>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {getResultTypeText(result.type)}\n                          </Badge>\n                        </div>\n                        <p className=\"text-xs text-gray-500 truncate\">\n                          {result.subtitle}\n                          {result.matchedField && (\n                            <span className=\"ml-2 text-ungdoms-600\">\n                              (matchning: {result.matchedField})\n                            </span>\n                          )}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"px-4 py-6 text-center text-sm text-gray-500\">\n                Inga resultat hittades för \"{query}\"\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {query.trim().length > 0 && query.trim().length < 2 && isOpen && (\n        <Card className=\"absolute top-full left-0 right-0 mt-1 z-50 shadow-lg border border-gray-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center text-sm text-gray-500\">\n              Skriv minst 2 tecken för att söka...\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":12122},"client/src/components/simple-care-plan-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { FileText } from \"lucide-react\";\n\ninterface SimpleCarePlanDialogProps {\n  trigger?: React.ReactNode;\n  staffId: string;\n}\n\nexport function SimpleCarePlanDialog({ trigger, staffId }: SimpleCarePlanDialogProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  \n  const [socialWorker, setSocialWorker] = useState(\"\");\n  const [clientInitials, setClientInitials] = useState(\"\");\n  const [planNumber, setPlanNumber] = useState(\"\");\n\n  const createPlan = useMutation({\n    mutationFn: async () => {\n      // Step 1: Create client\n      const clientResp = await fetch(\"/api/clients\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          initials: clientInitials,\n          staffId: staffId,\n          personalNumber: \"\",\n          notes: `Vårdplan ${planNumber} från ${socialWorker}`,\n          status: \"active\",\n        }),\n      });\n      \n      if (!clientResp.ok) throw new Error(\"Kunde inte skapa klient\");\n      const client = await clientResp.json();\n      \n      // Step 2: Create care plan\n      const carePlanResp = await fetch(\"/api/care-plans\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          clientId: client.id,\n          staffId: staffId,\n          receivedDate: new Date().toISOString().split('T')[0],\n          planContent: `Vårdplan ${planNumber} från socialsekreterare ${socialWorker}`,\n          goals: \"Genomföra vårdflöde enligt rutin\",\n          interventions: \"Standard vårdflöde - GFP ska påbörjas inom 3 veckor\",\n          status: \"staff_notified\",\n          comment: \"\",\n        }),\n      });\n      \n      if (!carePlanResp.ok) throw new Error(\"Kunde inte skapa vårdplan\");\n      const carePlan = await carePlanResp.json();\n      \n      // Step 3: Create implementation plan\n      await fetch(\"/api/implementation-plans\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          clientId: client.id,\n          staffId: staffId,\n          carePlanId: carePlan.id,\n          planContent: `GFP för vårdplan ${planNumber}`,\n          goals: \"Genomförandeplan enligt vårdplan\",\n          activities: \"GFP aktiviteter\",\n          followUpSchedule: \"3 veckor\",\n          status: \"pending\",\n          isActive: true,\n        }),\n      });\n      \n      // Step 4: Create weekly documentation\n      const currentWeek = Math.max(33, Math.min(52, new Date().getWeek()));\n      await fetch(\"/api/weekly-documentation\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          clientId: client.id,\n          staffId: staffId,\n          year: new Date().getFullYear(),\n          week: currentWeek,\n          content: \"\",\n          mondayDocumented: false,\n          tuesdayDocumented: false,\n          wednesdayDocumented: false,\n          thursdayDocumented: false,\n          fridayDocumented: false,\n          saturdayDocumented: false,\n          sundayDocumented: false,\n          documentation: \"\",\n          approved: false,\n          comments: \"\",\n        }),\n      });\n      \n      // Step 5: Create monthly report\n      await fetch(\"/api/monthly-reports\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          clientId: client.id,\n          staffId: staffId,\n          year: new Date().getFullYear(),\n          month: new Date().getMonth() + 1,\n          content: \"\",\n          reportContent: \"\",\n          status: \"not_started\",\n          comment: \"\",\n        }),\n      });\n      \n      // Step 6: Create Vimsa time\n      await fetch(\"/api/vimsa-time\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          clientId: client.id,\n          staffId: staffId,\n          year: new Date().getFullYear(),\n          week: currentWeek,\n          monday: 0,\n          tuesday: 0,\n          wednesday: 0,\n          thursday: 0,\n          friday: 0,\n          saturday: 0,\n          sunday: 0,\n          totalHours: 0,\n          status: \"not_started\",\n          approved: false,\n          comments: \"\",\n        }),\n      });\n      \n      return { client, carePlan };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/care-plans\"] });\n      \n      toast({\n        title: \"Vårdplan skapad!\",\n        description: \"Alla flöden har aktiverats automatiskt.\",\n      });\n      \n      setIsOpen(false);\n      setSocialWorker(\"\");\n      setClientInitials(\"\");\n      setPlanNumber(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fel\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!socialWorker || !clientInitials || !planNumber) {\n      toast({\n        title: \"Fel\",\n        description: \"Alla fält måste fyllas i\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createPlan.mutate();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button className=\"bg-ungdoms-600 hover:bg-ungdoms-700 text-white\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Skapa Vårdplan (Aktiverar Alla Flöden)\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Skapa Vårdplan</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 mt-4\">\n          <div>\n            <Label htmlFor=\"social-worker\">Socialsekreterare *</Label>\n            <Input\n              id=\"social-worker\"\n              value={socialWorker}\n              onChange={(e) => setSocialWorker(e.target.value)}\n              placeholder=\"Namn på socialsekreterare\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"client-initials\">Klientinitialer *</Label>\n            <Input\n              id=\"client-initials\"\n              value={clientInitials}\n              onChange={(e) => setClientInitials(e.target.value)}\n              placeholder=\"T.ex. AB\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"plan-number\">Vårdplansnummer *</Label>\n            <Input\n              id=\"plan-number\"\n              value={planNumber}\n              onChange={(e) => setPlanNumber(e.target.value)}\n              placeholder=\"1, 2, 3 etc\"\n            />\n          </div>\n          \n          <div className=\"bg-ungdoms-50 p-4 rounded-lg\">\n            <p className=\"text-sm text-ungdoms-700\">\n              När du skapar vårdplanen aktiveras automatiskt:\n            </p>\n            <ul className=\"text-sm text-ungdoms-600 mt-2 space-y-1\">\n              <li>• Genomförandeplan (GFP)</li>\n              <li>• Veckodokumentation</li>\n              <li>• Månadsrapporter</li>\n              <li>• Vimsa Tid</li>\n            </ul>\n          </div>\n          \n          <Button \n            onClick={handleSubmit}\n            disabled={createPlan.isPending}\n            className=\"w-full bg-ungdoms-600 hover:bg-ungdoms-700\"\n          >\n            {createPlan.isPending ? \"Skapar...\" : \"Skapa Vårdplan\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Helper to get week number\ndeclare global {\n  interface Date {\n    getWeek(): number;\n  }\n}\n\nDate.prototype.getWeek = function() {\n  const d = new Date(Date.UTC(this.getFullYear(), this.getMonth(), this.getDate()));\n  const dayNum = d.getUTCDay() || 7;\n  d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n  const yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));\n  return Math.ceil((((d.getTime() - yearStart.getTime()) / 86400000) + 1)/7);\n};","size_bytes":8425},"client/src/components/staff-client-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ClientDetailView } from \"./client-detail-view\";\nimport { CarePlanDialog } from \"./care-plan-dialog\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Plus, \n  Users, \n  Eye, \n  Trash2, \n  CheckCircle, \n  AlertTriangle, \n  Clock,\n  User,\n  FileText\n} from \"lucide-react\";\nimport type { Staff, Client, CarePlan, ImplementationPlan } from \"@shared/schema\";\n\ninterface StaffClientManagementProps {\n  staff: Staff;\n}\n\nconst clientSchema = z.object({\n  initials: z.string().min(1, \"Initialer krävs\").max(10, \"Max 10 tecken\"),\n  personalNumber: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype ClientFormData = z.infer<typeof clientSchema>;\n\nexport function StaffClientManagement({ staff }: StaffClientManagementProps) {\n  const [selectedClient, setSelectedClient] = useState<Client | null>(null);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ClientFormData>({\n    resolver: zodResolver(clientSchema),\n    defaultValues: {\n      initials: \"\",\n      personalNumber: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Fetch clients for this staff member\n  const { data: clients = [], isLoading: clientsLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/staff\", staff.id, \"clients\"],\n  });\n\n  // Fetch care plans for status overview\n  const { data: carePlans = [] } = useQuery<CarePlan[]>({\n    queryKey: [\"/api/care-plans/staff\", staff.id],\n  });\n\n  // Fetch implementation plans for status overview\n  const { data: implementationPlans = [] } = useQuery<ImplementationPlan[]>({\n    queryKey: [\"/api/implementation-plans/staff\", staff.id],\n  });\n\n  // Add client mutation\n  const addClientMutation = useMutation({\n    mutationFn: async (data: ClientFormData) => {\n      const response = await fetch(\"/api/clients\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ...data,\n          staffId: staff.id,\n          status: \"active\",\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Kunde inte lägga till klient\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Framgång\",\n        description: \"Klient tillagd framgångsrikt\",\n      });\n      form.reset();\n      setIsAddDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\", staff.id, \"clients\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fel\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete client mutation\n  const deleteClientMutation = useMutation({\n    mutationFn: async (clientId: string) => {\n      const response = await fetch(`/api/clients/${clientId}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Kunde inte ta bort klient\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Framgång\",\n        description: \"Klient borttagen framgångsrikt\",\n      });\n      setSelectedClient(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\", staff.id, \"clients\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fel\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddClient = (data: ClientFormData) => {\n    addClientMutation.mutate(data);\n  };\n\n  const handleDeleteClient = (clientId: string) => {\n    if (window.confirm(\"Är du säker på att du vill ta bort denna klient?\")) {\n      deleteClientMutation.mutate(clientId);\n    }\n  };\n\n  // Helper functions for status calculation\n  const getClientCarePlan = (clientId: string) => {\n    return carePlans.find(cp => cp.clientId === clientId);\n  };\n\n  const getClientImplementationPlan = (clientId: string) => {\n    return implementationPlans.find(ip => ip.clientId === clientId);\n  };\n\n  const getClientStatusBadge = (client: Client) => {\n    const carePlan = getClientCarePlan(client.id);\n    const implementationPlan = getClientImplementationPlan(client.id);\n\n    if (!carePlan) {\n      return <Badge className=\"bg-gray-100 text-gray-800 border-gray-200\">Ingen vårdplan</Badge>;\n    }\n\n    if (carePlan.status === \"completed\") {\n      return <Badge className=\"bg-green-100 text-green-800 border-green-200\"><CheckCircle className=\"h-3 w-3 mr-1\" />Slutförd</Badge>;\n    }\n\n    if (implementationPlan) {\n      const isOverdue = new Date() > new Date(implementationPlan.dueDate);\n      if (isOverdue && implementationPlan.status !== \"completed\") {\n        return <Badge className=\"bg-red-100 text-red-800 border-red-200\"><AlertTriangle className=\"h-3 w-3 mr-1\" />GFP Försenad</Badge>;\n      }\n      if (implementationPlan.status === \"completed\") {\n        return <Badge className=\"bg-green-100 text-green-800 border-green-200\"><CheckCircle className=\"h-3 w-3 mr-1\" />GFP Klar</Badge>;\n      }\n    }\n\n    if (carePlan.status === \"staff_notified\") {\n      return <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\"><Clock className=\"h-3 w-3 mr-1\" />Väntar GFP</Badge>;\n    }\n\n    return <Badge className=\"bg-blue-100 text-blue-800 border-blue-200\"><FileText className=\"h-3 w-3 mr-1\" />Pågående</Badge>;\n  };\n\n  if (selectedClient) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-4\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setSelectedClient(null)}\n            className=\"border-ungdoms-200 text-ungdoms-700 hover:bg-ungdoms-50\"\n          >\n            ← Tillbaka till klientlista\n          </Button>\n          <h2 className=\"text-xl font-semibold text-ungdoms-800\">\n            {staff.name} - Klient: {selectedClient.initials}\n          </h2>\n        </div>\n        <ClientDetailView client={selectedClient} staffId={staff.id} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Staff Header */}\n      <Card className=\"border-ungdoms-200\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n              <User className=\"h-5 w-5\" />\n              {staff.name} - Klienthantering\n            </CardTitle>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => window.location.href = '/'}\n              className=\"border-ungdoms-200 text-ungdoms-700 hover:bg-ungdoms-50\"\n            >\n              ← Tillbaka till Dashboard\n            </Button>\n            <div className=\"flex gap-2\">\n              <CarePlanDialog trigger={\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Skapa Vårdplan\n                </Button>\n              } />\n              <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-green-600 hover:bg-green-700 text-white\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Lägg till klient\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Lägg till ny klient</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(handleAddClient)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"initials\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Initialer (GDPR-säker identifiering)</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"t.ex. A.B.\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"personalNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Personnummer (frivilligt)</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"YYYYMMDD-XXXX\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Anteckningar</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Ytterligare information...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end gap-2\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setIsAddDialogOpen(false)}\n                      >\n                        Avbryt\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        className=\"bg-green-600 hover:bg-green-700 text-white\"\n                        disabled={addClientMutation.isPending}\n                      >\n                        {addClientMutation.isPending ? \"Lägger till...\" : \"Lägg till\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Personal</p>\n              <p className=\"font-medium\">{staff.name}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Avdelning</p>\n              <p className=\"font-medium\">{staff.avdelning}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Antal klienter</p>\n              <p className=\"font-medium\">{clients.length}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Client List */}\n      <Card className=\"border-ungdoms-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n            <Users className=\"h-5 w-5\" />\n            Klienter ({clients.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {clientsLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-ungdoms-600 mx-auto mb-4\"></div>\n              <p className=\"text-muted-foreground\">Laddar klienter...</p>\n            </div>\n          ) : clients.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">Inga klienter registrerade än</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Klicka på \"Lägg till klient\" för att komma igång\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {clients.map((client) => (\n                <Card key={client.id} className=\"border-gray-200 hover:border-ungdoms-300 transition-colors\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">{client.initials}</CardTitle>\n                      {getClientStatusBadge(client)}\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-2\">\n                      {client.notes && (\n                        <p className=\"text-sm text-muted-foreground\">{client.notes}</p>\n                      )}\n                      \n                      <div className=\"text-xs text-muted-foreground\">\n                        Skapad: {client.createdAt ? new Date(client.createdAt).toLocaleDateString('sv-SE') : 'Okänt datum'}\n                      </div>\n\n                      <div className=\"flex items-center gap-2 pt-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setSelectedClient(client)}\n                          className=\"flex-1 border-ungdoms-200 text-ungdoms-700 hover:bg-ungdoms-50\"\n                        >\n                          <Eye className=\"h-4 w-4 mr-1\" />\n                          Visa detaljer\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleDeleteClient(client.id)}\n                          className=\"border-red-200 text-red-700 hover:bg-red-50\"\n                          disabled={deleteClientMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Status Overview */}\n      {clients.length > 0 && (\n        <Card className=\"border-ungdoms-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n              <FileText className=\"h-5 w-5\" />\n              Snabb statusöversikt\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {clients.filter(c => {\n                    const cp = getClientCarePlan(c.id);\n                    return cp?.status === \"completed\";\n                  }).length}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Slutförda vårdplaner</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-yellow-600\">\n                  {clients.filter(c => {\n                    const cp = getClientCarePlan(c.id);\n                    return cp?.status === \"staff_notified\";\n                  }).length}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Väntar på GFP</p>\n              </div>\n\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {clients.filter(c => {\n                    const ip = getClientImplementationPlan(c.id);\n                    return ip && new Date() > new Date(ip.dueDate) && ip.status !== \"completed\";\n                  }).length}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Försenade GFP</p>\n              </div>\n\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {clients.filter(c => {\n                    const ip = getClientImplementationPlan(c.id);\n                    return ip?.status === \"completed\";\n                  }).length}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Klara GFP</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* GDPR Information */}\n      <Alert className=\"border-ungdoms-200 bg-ungdoms-50\">\n        <AlertTriangle className=\"h-4 w-4 text-ungdoms-600\" />\n        <AlertDescription className=\"text-ungdoms-700\">\n          <strong>GDPR-säkerhet:</strong> Systemet använder endast initialer för klientidentifiering. \n          Personnummer sparas krypterat och är frivilligt. All data hanteras enligt GDPR-bestämmelser.\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n}","size_bytes":17606},"client/src/components/staff-section.tsx":{"content":"import { getInitials } from \"@/lib/staff-data\";\nimport { PersonalInfoForm } from \"./personal-info-form\";\nimport { ClientManagement } from \"./followup-form\";\nimport type { Staff } from \"@shared/schema\";\n\ninterface StaffSectionProps {\n  staff: Staff;\n}\n\nexport function StaffSection({ staff }: StaffSectionProps) {\n  const initials = getInitials(staff.name);\n\n  return (\n    <div className=\"p-6 fade-in\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center mb-4\">\n          <div className=\"h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center mr-4\">\n            <span className=\"text-blue-600 font-semibold text-lg\">{initials}</span>\n          </div>\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">{staff.name}</h2>\n            <p className=\"text-gray-600\">Personaluppföljning och administrativa data</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <PersonalInfoForm staff={staff} />\n        <ClientManagement staff={staff} />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1093},"client/src/components/staff-sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { ChartLine } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { getInitials } from \"@/lib/staff-data\";\nimport type { Staff } from \"@shared/schema\";\n\ninterface StaffSidebarProps {\n  staff: Staff[];\n  activeView: string;\n  onViewChange: (view: string, staffId?: string) => void;\n  isOpen: boolean;\n  onClose: () => void;\n  searchTerm?: string;\n}\n\nexport function StaffSidebar({ staff, activeView, onViewChange, isOpen, onClose, searchTerm = \"\" }: StaffSidebarProps) {\n  const [filterTerm, setFilterTerm] = useState(\"\");\n\n  // Use global search term if provided, otherwise use local filter\n  const effectiveSearchTerm = searchTerm || filterTerm;\n  \n  const filteredStaff = staff.filter(s => \n    s.name.toLowerCase().includes(effectiveSearchTerm.toLowerCase()) ||\n    s.initials.toLowerCase().includes(effectiveSearchTerm.toLowerCase()) ||\n    s.personnummer.toLowerCase().includes(effectiveSearchTerm.toLowerCase()) ||\n    s.telefon.toLowerCase().includes(effectiveSearchTerm.toLowerCase()) ||\n    s.epost.toLowerCase().includes(effectiveSearchTerm.toLowerCase()) ||\n    s.roll.toLowerCase().includes(effectiveSearchTerm.toLowerCase()) ||\n    s.avdelning.toLowerCase().includes(effectiveSearchTerm.toLowerCase())\n  );\n\n  return (\n    <aside \n      className={`sidebar-transition bg-white w-80 shadow-lg border-r border-gray-200 overflow-y-auto fixed lg:static inset-y-0 left-0 z-30 ${isOpen ? '' : 'sidebar-hidden lg:transform-none'}`}\n    >\n      <div className=\"p-6\">\n        {/* Dashboard Link */}\n        <div className=\"mb-6\">\n          <Button\n            variant={activeView === 'dashboard' ? 'default' : 'outline'}\n            className={`w-full justify-start ${activeView === 'dashboard' ? 'bg-blue-50 text-blue-700 border-blue-200' : ''}`}\n            onClick={() => {\n              onViewChange('dashboard');\n              if (window.innerWidth < 1024) onClose();\n            }}\n          >\n            <ChartLine className=\"mr-3 h-4 w-4\" />\n            Dashboard\n          </Button>\n        </div>\n        \n        {/* Staff Filter */}\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Filtrera personal</label>\n          <Input\n            type=\"text\"\n            placeholder=\"Sök personal...\"\n            value={filterTerm}\n            onChange={(e) => setFilterTerm(e.target.value)}\n          />\n        </div>\n        \n        {/* Staff Tabs */}\n        <div className=\"space-y-2\">\n          {filteredStaff.map((staffMember) => {\n            const initials = getInitials(staffMember.name);\n            const isActive = activeView === `staff-${staffMember.id}`;\n            \n            return (\n              <Button\n                key={staffMember.id}\n                variant={isActive ? 'default' : 'ghost'}\n                className={`w-full justify-start ${isActive ? 'bg-blue-50 text-blue-700 border border-blue-200' : 'text-gray-700 hover:text-gray-900'}`}\n                onClick={() => {\n                  onViewChange('staff', staffMember.id);\n                  if (window.innerWidth < 1024) onClose();\n                }}\n              >\n                <div className=\"h-8 w-8 bg-gray-200 rounded-full flex items-center justify-center mr-3\">\n                  <span className=\"text-gray-600 font-medium text-sm\">{initials}</span>\n                </div>\n                <span className=\"font-medium\">{staffMember.name}</span>\n              </Button>\n            );\n          })}\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3624},"client/src/components/staff-statistics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  Legend, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line\n} from \"recharts\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  AlertTriangle, \n  CheckCircle,\n  Clock,\n  FileText,\n  Calendar,\n  Target,\n  BarChart3,\n  PieChart as PieChartIcon\n} from \"lucide-react\";\nimport type { Staff, Client, WeeklyDocumentation, MonthlyReport, VimsaTime } from \"@shared/schema\";\n\ninterface StaffStatisticsProps {\n  staff: Staff[];\n}\n\ninterface StaffPerformance {\n  staffId: string;\n  staffName: string;\n  clientCount: number;\n  weeklyDocCompletionRate: number;\n  monthlyReportOnTime: number;\n  vimsaTimeAccuracy: number;\n  overallScore: number;\n  missedDeadlines: number;\n  lateSubmissions: number;\n}\n\nexport function StaffStatistics({ staff }: StaffStatisticsProps) {\n  // Fetch all relevant data\n  const { data: allClients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients/all\"],\n  });\n\n  const { data: weeklyDocs = [] } = useQuery<WeeklyDocumentation[]>({\n    queryKey: [\"/api/weekly-documentation/all\"],\n  });\n\n  const { data: monthlyReports = [] } = useQuery<MonthlyReport[]>({\n    queryKey: [\"/api/monthly-reports/all\"],\n  });\n\n  const { data: vimsaTime = [] } = useQuery<VimsaTime[]>({\n    queryKey: [\"/api/vimsa-time/all\"],\n  });\n\n  // Calculate performance metrics for each staff member\n  const calculateStaffPerformance = (): StaffPerformance[] => {\n    return staff.map(staffMember => {\n      const staffClients = allClients.filter(client => client.staffId === staffMember.id);\n      const clientCount = staffClients.length;\n\n      if (clientCount === 0) {\n        return {\n          staffId: staffMember.id,\n          staffName: staffMember.name,\n          clientCount: 0,\n          weeklyDocCompletionRate: 100,\n          monthlyReportOnTime: 100,\n          vimsaTimeAccuracy: 100,\n          overallScore: 100,\n          missedDeadlines: 0,\n          lateSubmissions: 0,\n        };\n      }\n\n      // Calculate weekly documentation completion rate\n      const expectedWeeklyDocs = clientCount * 4; // Assume 4 weeks per month\n      const actualWeeklyDocs = weeklyDocs.filter(doc => \n        staffClients.some(client => client.id === doc.clientId)\n      ).length;\n      const weeklyDocCompletionRate = Math.min(100, (actualWeeklyDocs / expectedWeeklyDocs) * 100);\n\n      // Calculate monthly report timeliness\n      const expectedMonthlyReports = clientCount; // One per client per month\n      const onTimeReports = monthlyReports.filter(report => {\n        const client = staffClients.find(c => c.id === report.clientId);\n        if (!client || !report.createdAt) return false;\n        \n        // Consider on-time if submitted within 5 days of month end\n        const reportDate = new Date(report.createdAt);\n        const monthEnd = new Date(report.year, report.month, 0);\n        const daysDifference = Math.ceil((reportDate.getTime() - monthEnd.getTime()) / (1000 * 60 * 60 * 24));\n        return daysDifference <= 5;\n      }).length;\n      const monthlyReportOnTime = expectedMonthlyReports > 0 ? (onTimeReports / expectedMonthlyReports) * 100 : 100;\n\n      // Calculate Vimsa time accuracy (assuming complete entries)\n      const expectedVimsaEntries = clientCount * 4; // Assume 4 weeks per month\n      const actualVimsaEntries = vimsaTime.filter(time => \n        staffClients.some(client => client.id === time.clientId)\n      ).length;\n      const vimsaTimeAccuracy = Math.min(100, (actualVimsaEntries / expectedVimsaEntries) * 100);\n\n      // Calculate missed deadlines and late submissions\n      const missedDeadlines = expectedWeeklyDocs + expectedMonthlyReports + expectedVimsaEntries - \n                             (actualWeeklyDocs + monthlyReports.length + actualVimsaEntries);\n      const lateSubmissions = monthlyReports.length - onTimeReports;\n\n      // Calculate overall score (weighted average)\n      const overallScore = Math.round(\n        (weeklyDocCompletionRate * 0.4) + \n        (monthlyReportOnTime * 0.35) + \n        (vimsaTimeAccuracy * 0.25)\n      );\n\n      return {\n        staffId: staffMember.id,\n        staffName: staffMember.name,\n        clientCount,\n        weeklyDocCompletionRate: Math.round(weeklyDocCompletionRate),\n        monthlyReportOnTime: Math.round(monthlyReportOnTime),\n        vimsaTimeAccuracy: Math.round(vimsaTimeAccuracy),\n        overallScore,\n        missedDeadlines: Math.max(0, missedDeadlines),\n        lateSubmissions: Math.max(0, lateSubmissions),\n      };\n    });\n  };\n\n  const performanceData = calculateStaffPerformance();\n  \n  // Filter staff with clients for meaningful statistics\n  const activeStaff = performanceData.filter(p => p.clientCount > 0);\n  \n  // Sort by overall score for rankings\n  const sortedByPerformance = [...activeStaff].sort((a, b) => b.overallScore - a.overallScore);\n  \n  // Categorize performance levels\n  const excellentPerformers = activeStaff.filter(p => p.overallScore >= 90);\n  const goodPerformers = activeStaff.filter(p => p.overallScore >= 75 && p.overallScore < 90);\n  const needsImprovementPerformers = activeStaff.filter(p => p.overallScore < 75);\n\n  // Chart data\n  const chartData = sortedByPerformance.slice(0, 10); // Top 10 for readability\n\n  const performanceDistribution = [\n    { name: 'Utmärkt (90-100%)', value: excellentPerformers.length, color: '#22c55e' },\n    { name: 'Bra (75-89%)', value: goodPerformers.length, color: '#eab308' },\n    { name: 'Behöver förbättring (<75%)', value: needsImprovementPerformers.length, color: '#ef4444' },\n  ];\n\n  const getPerformanceBadge = (score: number) => {\n    if (score >= 90) {\n      return <Badge className=\"bg-green-100 text-green-800 border-green-200\"><CheckCircle className=\"h-3 w-3 mr-1\" />Utmärkt</Badge>;\n    } else if (score >= 75) {\n      return <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\"><Clock className=\"h-3 w-3 mr-1\" />Bra</Badge>;\n    } else {\n      return <Badge className=\"bg-red-100 text-red-800 border-red-200\"><AlertTriangle className=\"h-3 w-3 mr-1\" />Behöver förbättring</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"border-ungdoms-200\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-ungdoms-700\">\n              Aktiv Personal\n            </CardTitle>\n            <Target className=\"h-4 w-4 text-ungdoms-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-ungdoms-800\">{activeStaff.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              av {staff.length} totalt med klienter\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-green-700\">\n              Utmärkta Prestationer\n            </CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-800\">{excellentPerformers.length}</div>\n            <p className=\"text-xs text-green-600\">\n              90%+ i alla kategorier\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-yellow-200 bg-yellow-50\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-yellow-700\">\n              Bra Prestationer\n            </CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-800\">{goodPerformers.length}</div>\n            <p className=\"text-xs text-yellow-600\">\n              75-89% genomsnitt\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-red-700\">\n              Behöver Stöd\n            </CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-800\">{needsImprovementPerformers.length}</div>\n            <p className=\"text-xs text-red-600\">\n              Under 75% genomsnitt\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Performance Analysis Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Översikt</TabsTrigger>\n          <TabsTrigger value=\"charts\">Grafer</TabsTrigger>\n          <TabsTrigger value=\"individual\">Individuell</TabsTrigger>\n          <TabsTrigger value=\"feedback\">Feedback</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n                  <BarChart3 className=\"h-5 w-5\" />\n                  Prestationsfördelning\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={performanceDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, value }) => `${name}: ${value}`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {performanceDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Topp Prestationer\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {sortedByPerformance.slice(0, 5).map((performer, index) => (\n                    <div key={performer.staffId} className=\"flex items-center justify-between p-3 border border-ungdoms-200 rounded-lg\">\n                      <div>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium text-ungdoms-800\">#{index + 1}</span>\n                          <span className=\"text-ungdoms-700\">{performer.staffName}</span>\n                          {getPerformanceBadge(performer.overallScore)}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {performer.clientCount} klienter\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-bold text-ungdoms-800\">{performer.overallScore}%</div>\n                        <Progress value={performer.overallScore} className=\"w-20 h-2\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"charts\">\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n                  <BarChart3 className=\"h-5 w-5\" />\n                  Prestationsdiagram - Topp 10 Personal\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"staffName\" \n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={100}\n                      fontSize={12}\n                    />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"weeklyDocCompletionRate\" fill=\"#3b82f6\" name=\"Veckodokumentation %\" />\n                    <Bar dataKey=\"monthlyReportOnTime\" fill=\"#10b981\" name=\"Månadsrapporter i tid %\" />\n                    <Bar dataKey=\"vimsaTimeAccuracy\" fill=\"#f59e0b\" name=\"Vimsa Tid %\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"individual\">\n          <div className=\"space-y-4\">\n            {sortedByPerformance.map((performer) => (\n              <Card key={performer.staffId} className=\"border-ungdoms-200\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-ungdoms-800\">{performer.staffName}</CardTitle>\n                    {getPerformanceBadge(performer.overallScore)}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-ungdoms-800\">{performer.clientCount}</div>\n                      <p className=\"text-sm text-muted-foreground\">Klienter</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{performer.weeklyDocCompletionRate}%</div>\n                      <p className=\"text-sm text-muted-foreground\">Veckodokumentation</p>\n                      <Progress value={performer.weeklyDocCompletionRate} className=\"mt-1\" />\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">{performer.monthlyReportOnTime}%</div>\n                      <p className=\"text-sm text-muted-foreground\">Månadsrapporter i tid</p>\n                      <Progress value={performer.monthlyReportOnTime} className=\"mt-1\" />\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-yellow-600\">{performer.vimsaTimeAccuracy}%</div>\n                      <p className=\"text-sm text-muted-foreground\">Vimsa Tid</p>\n                      <Progress value={performer.vimsaTimeAccuracy} className=\"mt-1\" />\n                    </div>\n                  </div>\n                  \n                  {(performer.missedDeadlines > 0 || performer.lateSubmissions > 0) && (\n                    <Alert className=\"mt-4 border-yellow-200 bg-yellow-50\">\n                      <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                      <AlertTitle className=\"text-yellow-800\">Områden för förbättring</AlertTitle>\n                      <AlertDescription className=\"text-yellow-700\">\n                        {performer.missedDeadlines > 0 && `${performer.missedDeadlines} missade deadlines. `}\n                        {performer.lateSubmissions > 0 && `${performer.lateSubmissions} sena inlämningar.`}\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"feedback\">\n          <div className=\"space-y-6\">\n            <Alert className=\"border-ungdoms-200 bg-ungdoms-50\">\n              <Target className=\"h-4 w-4 text-ungdoms-600\" />\n              <AlertTitle className=\"text-ungdoms-800\">Feedback-guide för chefer</AlertTitle>\n              <AlertDescription className=\"text-ungdoms-700\">\n                Använd denna data för att ge konstruktiv feedback och stöd till din personal.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Excellent Performers */}\n              {excellentPerformers.length > 0 && (\n                <Card className=\"border-green-200 bg-green-50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-green-800\">\n                      <CheckCircle className=\"h-5 w-5\" />\n                      Utmärkta Prestationer ({excellentPerformers.length})\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {excellentPerformers.map(performer => (\n                        <div key={performer.staffId} className=\"p-2 bg-white rounded border border-green-200\">\n                          <div className=\"font-medium text-green-800\">{performer.staffName}</div>\n                          <div className=\"text-sm text-green-600\">{performer.overallScore}% genomsnitt</div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"mt-4 p-3 bg-green-100 rounded\">\n                      <h4 className=\"font-medium text-green-800 mb-2\">Feedback-förslag:</h4>\n                      <ul className=\"text-sm text-green-700 space-y-1\">\n                        <li>• Erkänn deras utmärkta arbete</li>\n                        <li>• Överväg mentorskapsmöjligheter</li>\n                        <li>• Be om input för processförbättringar</li>\n                      </ul>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Good Performers */}\n              {goodPerformers.length > 0 && (\n                <Card className=\"border-yellow-200 bg-yellow-50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-yellow-800\">\n                      <Clock className=\"h-5 w-5\" />\n                      Bra Prestationer ({goodPerformers.length})\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {goodPerformers.map(performer => (\n                        <div key={performer.staffId} className=\"p-2 bg-white rounded border border-yellow-200\">\n                          <div className=\"font-medium text-yellow-800\">{performer.staffName}</div>\n                          <div className=\"text-sm text-yellow-600\">{performer.overallScore}% genomsnitt</div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"mt-4 p-3 bg-yellow-100 rounded\">\n                      <h4 className=\"font-medium text-yellow-800 mb-2\">Feedback-förslag:</h4>\n                      <ul className=\"text-sm text-yellow-700 space-y-1\">\n                        <li>• Uppmuntra fortsatt gott arbete</li>\n                        <li>• Identifiera utvecklingsområden</li>\n                        <li>• Sätt mål för förbättring</li>\n                      </ul>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Needs Improvement */}\n              {needsImprovementPerformers.length > 0 && (\n                <Card className=\"border-red-200 bg-red-50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-red-800\">\n                      <AlertTriangle className=\"h-5 w-5\" />\n                      Behöver Stöd ({needsImprovementPerformers.length})\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {needsImprovementPerformers.map(performer => (\n                        <div key={performer.staffId} className=\"p-2 bg-white rounded border border-red-200\">\n                          <div className=\"font-medium text-red-800\">{performer.staffName}</div>\n                          <div className=\"text-sm text-red-600\">{performer.overallScore}% genomsnitt</div>\n                          <div className=\"text-xs text-red-500\">\n                            {performer.missedDeadlines} missade, {performer.lateSubmissions} sena\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"mt-4 p-3 bg-red-100 rounded\">\n                      <h4 className=\"font-medium text-red-800 mb-2\">Åtgärdsförslag:</h4>\n                      <ul className=\"text-sm text-red-700 space-y-1\">\n                        <li>• Planera utvecklingssamtal</li>\n                        <li>• Erbjud extra stöd och utbildning</li>\n                        <li>• Sätt upp tydliga förbättringsmål</li>\n                        <li>• Överväg arbetsbörda och resurser</li>\n                      </ul>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":22369},"client/src/components/ungdoms-logo.tsx":{"content":"import logo2 from \"@assets/logo2-01_1753913489671.png\";\n\ninterface UngdomsLogoProps {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n}\n\nexport function UngdomsLogo({ className = \"\", size = \"md\" }: UngdomsLogoProps) {\n  const sizeClasses = {\n    sm: \"h-8 w-auto\",\n    md: \"h-12 w-auto\", \n    lg: \"h-16 w-auto\",\n    xl: \"h-20 w-auto\"\n  };\n\n  return (\n    <div className={`flex items-center ${className}`}>\n      <img \n        src={logo2} \n        alt=\"UNGDOMS Logo\" \n        className={sizeClasses[size]}\n      />\n    </div>\n  );\n}","size_bytes":540},"client/src/components/user-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Settings, Lock, User, Shield, Eye, EyeOff } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport type { User } from \"@shared/schema\";\n\nconst changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Nuvarande lösenord krävs\"),\n  newPassword: z.string().min(6, \"Nytt lösenord måste vara minst 6 tecken\"),\n  confirmPassword: z.string().min(1, \"Bekräfta lösenord\")\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Lösenorden matchar inte\",\n  path: [\"confirmPassword\"],\n});\n\ntype ChangePasswordData = z.infer<typeof changePasswordSchema>;\n\ninterface UserSettingsProps {\n  currentUser: User | null;\n}\n\nexport function UserSettings({ currentUser }: UserSettingsProps) {\n  const [showCurrentPassword, setShowCurrentPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<ChangePasswordData>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: ChangePasswordData) => {\n      const response = await fetch(\"/api/auth/change-password\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          currentPassword: data.currentPassword,\n          newPassword: data.newPassword,\n          userId: currentUser?.username,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Kunde inte uppdatera lösenord\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Framgång\",\n        description: \"Lösenord uppdaterat framgångsrikt\",\n      });\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fel\", \n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: ChangePasswordData) => {\n    changePasswordMutation.mutate(data);\n  };\n\n  if (!currentUser) return null;\n\n  return (\n    <Card className=\"border-ungdoms-200\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n          <Settings className=\"h-5 w-5\" />\n          Användarinställningar\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* User Info */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-3 p-3 bg-ungdoms-50 rounded-lg border border-ungdoms-200\">\n            <User className=\"h-5 w-5 text-ungdoms-600\" />\n            <div>\n              <p className=\"font-medium text-ungdoms-800\">{currentUser.username}</p>\n              <p className=\"text-sm text-ungdoms-600\">{currentUser.email}</p>\n              <Badge className=\"bg-ungdoms-100 text-ungdoms-700 border-ungdoms-300 mt-1\">\n                <Shield className=\"h-3 w-3 mr-1\" />\n                {currentUser.role === 'admin' ? 'Administratör' : 'Användare'}\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        {/* Change Password Form */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-ungdoms-800 flex items-center gap-2\">\n            <Lock className=\"h-4 w-4\" />\n            Ändra lösenord\n          </h3>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"currentPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nuvarande lösenord</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          type={showCurrentPassword ? \"text\" : \"password\"}\n                          placeholder=\"Ange nuvarande lösenord\"\n                          {...field}\n                          className=\"pr-10\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                        >\n                          {showCurrentPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"newPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nytt lösenord</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          type={showNewPassword ? \"text\" : \"password\"}\n                          placeholder=\"Ange nytt lösenord (minst 6 tecken)\"\n                          {...field}\n                          className=\"pr-10\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowNewPassword(!showNewPassword)}\n                        >\n                          {showNewPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bekräfta nytt lösenord</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"Bekräfta nytt lösenord\"\n                          {...field}\n                          className=\"pr-10\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        >\n                          {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end pt-4\">\n                <Button \n                  type=\"submit\"\n                  className=\"bg-ungdoms-600 hover:bg-ungdoms-700\"\n                  disabled={changePasswordMutation.isPending}\n                >\n                  {changePasswordMutation.isPending ? \"Uppdaterar...\" : \"Uppdatera lösenord\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n\n          {form.formState.errors.root && (\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertDescription className=\"text-red-700\">\n                {form.formState.errors.root.message}\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Kunde inte ändra lösenord\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Lösenord ändrat\",\n        description: \"Ditt lösenord har uppdaterats framgångsrikt.\",\n      });\n      form.reset();\n      setIsDialogOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fel\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!currentUser) {\n    return null;\n  }\n\n  const getRoleBadge = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return <Badge className=\"bg-red-100 text-red-800 border-red-200\"><Shield className=\"h-3 w-3 mr-1\" />Administratör</Badge>;\n      case 'staff':\n        return <Badge className=\"bg-ungdoms-100 text-ungdoms-800 border-ungdoms-200\"><User className=\"h-3 w-3 mr-1\" />Vårdpersonal</Badge>;\n      case 'viewer':\n        return <Badge variant=\"outline\"><Eye className=\"h-3 w-3 mr-1\" />Granskning</Badge>;\n      default:\n        return <Badge variant=\"outline\">{role}</Badge>;\n    }\n  };\n\n  return (\n    <Card className=\"border-ungdoms-200\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n          <Settings className=\"h-5 w-5\" />\n          Användarinställningar\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* User Info */}\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium text-ungdoms-700\">Användarnamn</label>\n            <p className=\"text-sm text-ungdoms-600 bg-ungdoms-50 p-2 rounded border\">{currentUser.username}</p>\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-ungdoms-700\">E-post</label>\n            <p className=\"text-sm text-ungdoms-600 bg-ungdoms-50 p-2 rounded border\">{currentUser.email}</p>\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-ungdoms-700\">Roll</label>\n            <div className=\"mt-1\">\n              {getRoleBadge(currentUser.role)}\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-ungdoms-700\">Medlem sedan</label>\n            <p className=\"text-sm text-ungdoms-600 bg-ungdoms-50 p-2 rounded border\">\n              {new Date(currentUser.createdAt).toLocaleDateString('sv-SE')}\n            </p>\n          </div>\n        </div>\n\n        {/* Change Password */}\n        <div className=\"border-t pt-6\">\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"w-full border-ungdoms-200 hover:bg-ungdoms-50\">\n                <Lock className=\"h-4 w-4 mr-2\" />\n                Ändra lösenord\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2 text-ungdoms-800\">\n                  <Lock className=\"h-5 w-5\" />\n                  Ändra lösenord\n                </DialogTitle>\n              </DialogHeader>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit((data) => changePasswordMutation.mutate(data))} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"currentPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-ungdoms-700\">Nuvarande lösenord</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input \n                              type={showCurrentPassword ? \"text\" : \"password\"}\n                              placeholder=\"Ange nuvarande lösenord\" \n                              className=\"pr-10 border-ungdoms-200 focus:border-ungdoms-500\"\n                              {...field} \n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowCurrentPassword(!showCurrentPassword)}\n                            >\n                              {showCurrentPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"newPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-ungdoms-700\">Nytt lösenord</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input \n                              type={showNewPassword ? \"text\" : \"password\"}\n                              placeholder=\"Ange nytt lösenord (minst 6 tecken)\" \n                              className=\"pr-10 border-ungdoms-200 focus:border-ungdoms-500\"\n                              {...field} \n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowNewPassword(!showNewPassword)}\n                            >\n                              {showNewPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"confirmPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-ungdoms-700\">Bekräfta nytt lösenord</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input \n                              type={showConfirmPassword ? \"text\" : \"password\"}\n                              placeholder=\"Bekräfta nytt lösenord\" \n                              className=\"pr-10 border-ungdoms-200 focus:border-ungdoms-500\"\n                              {...field} \n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            >\n                              {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-2 pt-4\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      className=\"flex-1\"\n                      onClick={() => setIsDialogOpen(false)}\n                    >\n                      Avbryt\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      className=\"flex-1 bg-ungdoms-600 hover:bg-ungdoms-700\"\n                      disabled={changePasswordMutation.isPending}\n                    >\n                      {changePasswordMutation.isPending ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                          <span>Ändrar...</span>\n                        </div>\n                      ) : (\n                        \"Ändra lösenord\"\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Logout */}\n        <div className=\"border-t pt-6\">\n          <Button \n            variant=\"outline\" \n            className=\"w-full border-red-200 text-red-700 hover:bg-red-50\"\n            onClick={onLogout}\n          >\n            Logga ut\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":18358},"client/src/components/weekly-documentation-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Calendar, Check, X } from \"lucide-react\";\nimport type { Staff, Client } from \"@shared/schema\";\n\nconst weeklyDocSchema = z.object({\n  clientId: z.string().min(1, \"Klient måste väljas\"),\n  staffId: z.string().min(1, \"Personal måste väljas\"),\n  year: z.number().min(2024, \"År krävs\"),\n  week: z.number().min(1).max(53, \"Vecka måste vara 1-53\"),\n  mondayDocumented: z.boolean().default(false),\n  tuesdayDocumented: z.boolean().default(false),\n  wednesdayDocumented: z.boolean().default(false),\n  thursdayDocumented: z.boolean().default(false),\n  fridayDocumented: z.boolean().default(false),\n  documentation: z.string().min(1, \"Dokumentation krävs\"),\n  approved: z.boolean().default(false),\n  comments: z.string().optional(),\n});\n\ntype WeeklyDocFormData = z.infer<typeof weeklyDocSchema>;\n\ninterface WeeklyDocumentationDialogProps {\n  trigger?: React.ReactNode;\n}\n\nexport function WeeklyDocumentationDialog({ trigger }: WeeklyDocumentationDialogProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentWeek = Math.ceil((currentDate.getTime() - new Date(currentYear, 0, 1).getTime()) / (7 * 24 * 60 * 60 * 1000));\n\n  const form = useForm<WeeklyDocFormData>({\n    resolver: zodResolver(weeklyDocSchema),\n    defaultValues: {\n      clientId: \"\",\n      staffId: \"\",\n      year: currentYear,\n      week: currentWeek,\n      mondayDocumented: false,\n      tuesdayDocumented: false,\n      wednesdayDocumented: false,\n      thursdayDocumented: false,\n      fridayDocumented: false,\n      documentation: \"\",\n      approved: false,\n      comments: \"\",\n    },\n  });\n\n  // Fetch all staff and clients\n  const { data: staff = [] } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients/all\"],\n  });\n\n  // Create weekly documentation mutation\n  const createDocMutation = useMutation({\n    mutationFn: async (data: WeeklyDocFormData) => {\n      const response = await fetch(\"/api/weekly-documentation\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Kunde inte skapa veckodokumentation\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/weekly-documentation\"] });\n      \n      toast({\n        title: \"Veckodokumentation skapad\",\n        description: \"Veckodokumentationen har skapats.\",\n      });\n      \n      form.reset();\n      setIsOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Fel\",\n        description: error.message || \"Kunde inte skapa veckodokumentation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: WeeklyDocFormData) => {\n    createDocMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button className=\"bg-orange-600 hover:bg-orange-700 text-white\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Skapa Veckodokumentation\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5 text-orange-600\" />\n            Skapa ny veckodokumentation\n          </DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"staffId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Välj personal</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Välj personal\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {staff.map((staffMember) => (\n                          <SelectItem key={staffMember.id} value={staffMember.id}>\n                            {staffMember.name} ({staffMember.initials})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"clientId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Välj klient</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Välj klient\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {clients.map((client) => (\n                          <SelectItem key={client.id} value={client.id}>\n                            {client.initials}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"year\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>År</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"week\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vecka</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\"\n                        min=\"1\"\n                        max=\"53\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Days of the week checkboxes */}\n            <div className=\"space-y-3\">\n              <FormLabel>Dokumenterade dagar</FormLabel>\n              <Card className=\"p-4 border-ungdoms-200\">\n                <div className=\"grid grid-cols-5 gap-3\">\n                  <FormField\n                    control={form.control}\n                    name=\"mondayDocumented\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <Button\n                            type=\"button\"\n                            variant={field.value ? \"default\" : \"outline\"}\n                            className={field.value ? \"bg-green-600 hover:bg-green-700\" : \"\"}\n                            onClick={() => field.onChange(!field.value)}\n                          >\n                            <div className=\"flex flex-col items-center\">\n                              {field.value ? <Check className=\"h-4 w-4 mb-1\" /> : <X className=\"h-4 w-4 mb-1 text-gray-400\" />}\n                              <span className=\"text-xs\">Måndag</span>\n                            </div>\n                          </Button>\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"tuesdayDocumented\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <Button\n                            type=\"button\"\n                            variant={field.value ? \"default\" : \"outline\"}\n                            className={field.value ? \"bg-green-600 hover:bg-green-700\" : \"\"}\n                            onClick={() => field.onChange(!field.value)}\n                          >\n                            <div className=\"flex flex-col items-center\">\n                              {field.value ? <Check className=\"h-4 w-4 mb-1\" /> : <X className=\"h-4 w-4 mb-1 text-gray-400\" />}\n                              <span className=\"text-xs\">Tisdag</span>\n                            </div>\n                          </Button>\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"wednesdayDocumented\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <Button\n                            type=\"button\"\n                            variant={field.value ? \"default\" : \"outline\"}\n                            className={field.value ? \"bg-green-600 hover:bg-green-700\" : \"\"}\n                            onClick={() => field.onChange(!field.value)}\n                          >\n                            <div className=\"flex flex-col items-center\">\n                              {field.value ? <Check className=\"h-4 w-4 mb-1\" /> : <X className=\"h-4 w-4 mb-1 text-gray-400\" />}\n                              <span className=\"text-xs\">Onsdag</span>\n                            </div>\n                          </Button>\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"thursdayDocumented\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <Button\n                            type=\"button\"\n                            variant={field.value ? \"default\" : \"outline\"}\n                            className={field.value ? \"bg-green-600 hover:bg-green-700\" : \"\"}\n                            onClick={() => field.onChange(!field.value)}\n                          >\n                            <div className=\"flex flex-col items-center\">\n                              {field.value ? <Check className=\"h-4 w-4 mb-1\" /> : <X className=\"h-4 w-4 mb-1 text-gray-400\" />}\n                              <span className=\"text-xs\">Torsdag</span>\n                            </div>\n                          </Button>\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"fridayDocumented\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <Button\n                            type=\"button\"\n                            variant={field.value ? \"default\" : \"outline\"}\n                            className={field.value ? \"bg-green-600 hover:bg-green-700\" : \"\"}\n                            onClick={() => field.onChange(!field.value)}\n                          >\n                            <div className=\"flex flex-col items-center\">\n                              {field.value ? <Check className=\"h-4 w-4 mb-1\" /> : <X className=\"h-4 w-4 mb-1 text-gray-400\" />}\n                              <span className=\"text-xs\">Fredag</span>\n                            </div>\n                          </Button>\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </Card>\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"documentation\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Dokumentation</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Veckodokumentationens innehåll...\" \n                      rows={5}\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"approved\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Godkännandestatus</FormLabel>\n                  <FormControl>\n                    <div className=\"flex gap-3\">\n                      <Button\n                        type=\"button\"\n                        variant={field.value === true ? \"default\" : \"outline\"}\n                        className={field.value === true ? \"bg-green-600 hover:bg-green-700\" : \"\"}\n                        onClick={() => field.onChange(true)}\n                      >\n                        <Check className=\"h-4 w-4 mr-2\" />\n                        Godkänd\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant={field.value === false ? \"destructive\" : \"outline\"}\n                        className={field.value === false ? \"bg-red-600 hover:bg-red-700\" : \"\"}\n                        onClick={() => field.onChange(false)}\n                      >\n                        <X className=\"h-4 w-4 mr-2\" />\n                        Ej godkänd\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"comments\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Kommentarer (valfritt)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Ytterligare kommentarer...\" \n                      rows={2}\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsOpen(false)}\n              >\n                Avbryt\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"bg-orange-600 hover:bg-orange-700\"\n                disabled={createDocMutation.isPending}\n              >\n                {createDocMutation.isPending ? \"Skapar...\" : \"Skapa dokumentation\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16669},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/staff-data.ts":{"content":"export const staffList = [\n  \"Afif Derbas\", \"Ahmed Alrakabi\", \"Ahmed Ramadan\", \"Ajmen Rafiq\", \"Alana Salah\",\n  \"Alharis Albayati\", \"Amir Al-istarabadi\", \"Anjelika Bååth\", \"Bashdar Reza\",\n  \"Constanza Soto\", \"Deni Dulji\", \"Diana Gharib\", \"Drilon Muqkurtaj\", \"Heidar Farhan\",\n  \"Hussein Ahmed\", \"Ida Björkbacka\", \"Ikhlas Almaliki\", \"Intisar Almansour\",\n  \"Israa Touman\", \"Johan Wessberg\", \"Kaoula Channoufi\", \"Kim Torneus\", \"Lejla Kocacik\",\n  \"Michelle Nilsson\", \"Mirza Celik\", \"Mirza Hodzic\", \"Nasima Kuraishe\",\n  \"Nicolas Lazcano\", \"Omar Mezza\", \"Qasin Abdullahi\", \"Robert Ackar\", \"Samir Bezzina\",\n  \"Sebastian Holm\", \"Wissam Hemissi\", \"Yasmin Ibrahim\"\n];\n\nexport function getInitials(name: string): string {\n  return name.split(' ').map(n => n[0]).join('');\n}\n\nexport function getStatusColor(status: string): string {\n  switch (status) {\n    case 'excellent':\n      return 'status-excellent';\n    case 'good':\n      return 'status-good';\n    case 'fair':\n      return 'status-fair';\n    case 'poor':\n      return 'status-poor';\n    default:\n      return 'status-unknown';\n  }\n}\n\nexport function getStatusText(status: string): string {\n  switch (status) {\n    case 'excellent':\n      return 'Utmärkt';\n    case 'good':\n      return 'Bra';\n    case 'fair':\n      return 'Godtagbar';\n    case 'poor':\n      return 'Dålig';\n    default:\n      return 'Okänd';\n  }\n}\n\nexport function getPriorityColor(priority: string): string {\n  switch (priority) {\n    case 'urgent':\n      return 'bg-red-100 text-red-800 border-red-200';\n    case 'high':\n      return 'bg-orange-100 text-orange-800 border-orange-200';\n    case 'medium':\n      return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    case 'low':\n      return 'bg-green-100 text-green-800 border-green-200';\n    default:\n      return 'bg-gray-100 text-gray-800 border-gray-200';\n  }\n}\n\nexport function getPriorityText(priority: string): string {\n  switch (priority) {\n    case 'urgent':\n      return 'Akut';\n    case 'high':\n      return 'Hög';\n    case 'medium':\n      return 'Medium';\n    case 'low':\n      return 'Låg';\n    default:\n      return 'Okänd';\n  }\n}\n","size_bytes":2126},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { DashboardStats } from \"@/components/dashboard-stats\";\nimport { CareOverview } from \"@/components/care-overview\";\nimport { StaffStatistics } from \"@/components/staff-statistics\";\nimport { DataOverview } from \"@/components/data-overview\";\nimport { CompleteWorkflowOverview } from \"@/components/complete-workflow-overview\";\nimport { CarePlanDialog } from \"@/components/care-plan-dialog\";\nimport { MonthlyReportDialog } from \"@/components/monthly-report-dialog\";\nimport { WeeklyDocumentationDialog } from \"@/components/weekly-documentation-dialog\";\nimport { useRealtimeSync } from \"@/hooks/use-realtime-sync\";\nimport { Users, FileText, Calendar, TrendingUp, BarChart3, Heart } from \"lucide-react\";\nimport type { Staff } from \"@shared/schema\";\n\nexport function Dashboard() {\n  // Enable real-time synchronization\n  useRealtimeSync();\n\n  const {\n    data: staff = [],\n    isLoading: staffLoading,\n    isError: staffError,\n    error\n  } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n  });\n\n  if (staffLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (staffError) {\n    return (\n      <div className=\"p-6 text-red-600\">\n        <div className=\"font-bold mb-2\">Kunde inte ladda personaldata.</div>\n        <div className=\"text-sm\">{error instanceof Error ? error.message : \"Något gick fel.\"}</div>\n      </div>\n    );\n  }\n\n  if (staff.length === 0) {\n    return (\n      <div className=\"p-6 text-center text-ungdoms-600\">\n        <div className=\"font-bold mb-2\">Ingen personal hittades.</div>\n        <div className=\"text-sm\">Lägg till personal för att komma igång med systemet.</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 fade-in\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-ungdoms-800 mb-2\">Dashboard - UNGDOMS Öppenvård</h2>\n            <p className=\"text-ungdoms-600\">Överskådlig sammanfattning av vårdplaner, genomförandeplaner och personalstatistik</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <CarePlanDialog trigger={\n              <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Skapa Vårdplan\n              </Button>\n            } />\n          </div>\n        </div>\n      </div>\n      \n      <Tabs defaultValue=\"workflow\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"workflow\">Vårdflöde</TabsTrigger>\n          <TabsTrigger value=\"overview\">Översikt</TabsTrigger>\n          <TabsTrigger value=\"care-plans\">Vårdplaner & GFP</TabsTrigger>\n          <TabsTrigger value=\"statistics\">Personal</TabsTrigger>\n          <TabsTrigger value=\"data-overview\">Sparad Data</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"workflow\">\n          <CompleteWorkflowOverview />\n        </TabsContent>\n\n        <TabsContent value=\"overview\">\n          <DashboardStats staff={staff} />\n          \n          {/* Quick Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n            <Card className=\"shadow-sm border border-ungdoms-200\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-ungdoms-700\">Aktiv Personal</CardTitle>\n                <Users className=\"h-4 w-4 text-ungdoms-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-ungdoms-800\">{staff.length}</div>\n                <p className=\"text-xs text-muted-foreground\">registrerade vårdpersonal</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-sm border border-ungdoms-200\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-ungdoms-700\">Vårdprocesser</CardTitle>\n                <Heart className=\"h-4 w-4 text-ungdoms-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-ungdoms-800\">5</div>\n                <p className=\"text-xs text-muted-foreground\">steg i vårdprocessen</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-sm border border-ungdoms-200\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-ungdoms-700\">Statistik & Grafer</CardTitle>\n                <BarChart3 className=\"h-4 w-4 text-ungdoms-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-ungdoms-800\">📊</div>\n                <p className=\"text-xs text-muted-foreground\">detaljerad prestationsanalys</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"care-plans\">\n          <CareOverview staff={staff} />\n        </TabsContent>\n\n        <TabsContent value=\"statistics\">\n          <StaffStatistics staff={staff} />\n        </TabsContent>\n\n        <TabsContent value=\"data-overview\">\n          <DataOverview />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":6010},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { forwardRef } from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1867},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"DEPLOYMENT.md":{"content":"# Deployment Configuration Guide\n\n## Overview\nThis document outlines the deployment fixes applied to resolve the Node.js runtime deployment issue.\n\n## Applied Fixes\n\n### 1. Node.js Runtime Configuration\n- **Status**: ✅ Verified Node.js 20.19.3 is installed and operational\n- **NPM Version**: 10.8.2 confirmed available\n- **Runtime Test**: Successfully builds and creates production bundle\n\n### 2. Deployment Configuration Files\n\n#### `replit.toml`\n- Specifies Node.js 20 as the runtime environment\n- Configures build and deployment commands\n- Sets production environment variables\n\n#### `Dockerfile`\n- Container-based deployment configuration\n- Multi-stage build process with Node.js 20 Alpine\n- Production-optimized dependency installation\n\n#### `deploy.json`\n- General deployment metadata\n- Engine specifications (Node.js ≥18.0.0, npm ≥8.0.0)\n- Build and start command definitions\n\n#### `build.sh`\n- Automated build script for deployment\n- Dependency installation and verification\n- Production build testing\n\n### 3. Build Process Verification\nThe deployment build process has been tested and confirmed working:\n\n```bash\n# Install dependencies\nnpm ci\n\n# Build application (frontend + backend)\nnpm run build\n\n# Start production server\nnpm start\n```\n\n### 4. Build Output Structure\n```\ndist/\n├── index.js          # Bundled Node.js server (47KB)\n└── public/           # Static frontend assets\n    ├── index.html    # Main HTML file\n    └── assets/       # CSS, JS, and image assets\n```\n\n## Deployment Commands\n\n### For Replit Deployments\n```bash\n# Build the application\nnpm run build\n\n# Start production server\nnpm start\n```\n\n### For Container Deployments\n```bash\n# Build Docker container\ndocker build -t healthcare-app .\n\n# Run container\ndocker run -p 5000:5000 healthcare-app\n```\n\n### Manual Build Process\n```bash\n# Run the automated build script\n./build.sh\n```\n\n## Environment Requirements\n\n- **Node.js**: 20.x (verified: 20.19.3)\n- **npm**: 8.x+ (verified: 10.8.2)\n- **Database**: PostgreSQL (configured via DATABASE_URL)\n- **Port**: 5000 (configurable via PORT environment variable)\n\n## Troubleshooting\n\n### Common Issues\n1. **Port already in use**: Ensure no other services are running on port 5000\n2. **Missing dependencies**: Run `npm ci` to install all required packages\n3. **Build failures**: Check that TypeScript compilation succeeds before building\n\n### Verification Steps\n1. Check Node.js version: `node --version`\n2. Verify build process: `npm run build`\n3. Test production server: `npm start`\n\n## Notes\n- The application successfully builds a production-ready bundle\n- All Node.js runtime dependencies are properly configured\n- Database connectivity is maintained through environment variables\n- Static assets are served correctly through Express","size_bytes":2790},"build.sh":{"content":"#!/bin/bash\n\n# Build script for healthcare management application\necho \"Starting build process...\"\n\n# Ensure we have Node.js\nif ! command -v node &> /dev/null; then\n    echo \"Node.js not found. Please install Node.js 18 or higher.\"\n    exit 1\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node -v | cut -d 'v' -f 2)\nREQUIRED_VERSION=\"18.0.0\"\n\nif ! printf '%s\\n%s\\n' \"$REQUIRED_VERSION\" \"$NODE_VERSION\" | sort -V -C; then\n    echo \"Node.js version $NODE_VERSION is not supported. Please use Node.js 18 or higher.\"\n    exit 1\nfi\n\n# Clean previous builds\necho \"Cleaning previous builds...\"\nrm -rf dist/\nrm -rf client/dist/\n\n# Install dependencies\necho \"Installing dependencies...\"\nnpm ci --production=false\n\n# Build the application\necho \"Building application...\"\nnpm run build\n\n# Verify build output\nif [ ! -f \"dist/index.js\" ]; then\n    echo \"Build failed: dist/index.js not found\"\n    exit 1\nfi\n\nif [ ! -d \"client/dist\" ]; then\n    echo \"Build failed: client/dist directory not found\"\n    exit 1\nfi\n\necho \"Build completed successfully!\"\necho \"Run 'npm start' to start the production server\"","size_bytes":1086},"replit.toml":{"content":"[run]\ncommand = \"npm run dev\"\n\n[env]\nNODE_ENV = \"development\"\n\n[build]\ncommand = \"npm ci --production=false && npm run build\"\n\n[deployment]\ncommand = \"node dist/index.js\"\ndirectory = \".\"\npublicPort = 5000\nenvironment = \"production\"\nbuild = true\n\n[deployment.env]\nNODE_ENV = \"production\"\n\n[language]\nname = \"nodejs\"\nversion = \"20\"\n\n[nix]\nchannel = \"stable-22_11\"\n\n[packager]\nlanguage = \"nodejs\"\n\n[packager.features]\npackageSearch = true\nguessImports = true\nenabledForHosting = false","size_bytes":481},"deploy.sh":{"content":"#!/bin/bash\n\n# Deployment script for healthcare management application\necho \"Starting deployment process...\"\n\n# Ensure we have Node.js\nif ! command -v node &> /dev/null; then\n    echo \"Error: Node.js not found. Please ensure Node.js 18+ is installed.\"\n    exit 1\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node -v | cut -d 'v' -f 2)\nREQUIRED_VERSION=\"18.0.0\"\n\nif ! printf '%s\\n%s\\n' \"$REQUIRED_VERSION\" \"$NODE_VERSION\" | sort -V -C; then\n    echo \"Error: Node.js version $NODE_VERSION is not supported. Please use Node.js 18 or higher.\"\n    exit 1\nfi\n\necho \"Node.js version: $NODE_VERSION ✓\"\n\n# Clean previous builds\necho \"Cleaning previous builds...\"\nrm -rf dist/\nrm -rf client/dist/\n\n# Install dependencies (production and dev dependencies for build)\necho \"Installing dependencies...\"\nnpm ci --production=false\n\nif [ $? -ne 0 ]; then\n    echo \"Error: Failed to install dependencies\"\n    exit 1\nfi\n\n# Build the application\necho \"Building application...\"\nnpm run build\n\nif [ $? -ne 0 ]; then\n    echo \"Error: Build failed\"\n    exit 1\nfi\n\n# Verify build output\nif [ ! -f \"dist/index.js\" ]; then\n    echo \"Error: dist/index.js not found after build\"\n    exit 1\nfi\n\nif [ ! -d \"dist/public\" ]; then\n    echo \"Error: dist/public directory not found after build\"\n    exit 1\nfi\n\necho \"✓ Build completed successfully!\"\necho \"✓ Server bundle: dist/index.js\"\necho \"✓ Client assets: dist/public/\"\necho \"\"\necho \"Deployment ready! The application can be started with:\"\necho \"  NODE_ENV=production node dist/index.js\"","size_bytes":1511},"client/src/components/client-form.tsx":{"content":"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertClientSchema, type InsertClient } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, User } from \"lucide-react\";\n\nexport function ClientForm() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertClient>({\n    resolver: zodResolver(insertClientSchema),\n    defaultValues: {\n      initials: \"\",\n      staffId: \"\",\n      personalNumber: \"\",\n      notes: \"\",\n      status: \"active\",\n    },\n  });\n\n  const createClient = useMutation({\n    mutationFn: (data: InsertClient) => \n      apiRequest(\"/api/clients\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: \"Klient skapad\",\n        description: \"Klienten har skapats framgångsrikt.\",\n      });\n      form.reset();\n      setIsOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Fel\",\n        description: \"Kunde inte skapa klient. Försök igen.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertClient) => {\n    createClient.mutate(data);\n  };\n\n  if (!isOpen) {\n    return (\n      <Button onClick={() => setIsOpen(true)} className=\"mb-4\">\n        <Plus className=\"mr-2 h-4 w-4\" />\n        Lägg till ny klient\n      </Button>\n    );\n  }\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <User className=\"mr-2 h-5 w-5\" />\n          Lägg till ny klient\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"initials\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Initialer *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"AB\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"personalNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Personnummer</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"YYYYMMDD-NNNN\" value={field.value || \"\"} onChange={field.onChange} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"staffId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Personal ID</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Personal-ID som ansvarar för klienten\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Anteckningar</FormLabel>\n                  <FormControl>\n                    <Textarea placeholder=\"Anteckningar om klienten...\" value={field.value || \"\"} onChange={field.onChange} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Välj status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Aktiv</SelectItem>\n                      <SelectItem value=\"inactive\">Inaktiv</SelectItem>\n                      <SelectItem value=\"pending\">Väntande</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-2\">\n              <Button type=\"submit\" disabled={createClient.isPending}>\n                {createClient.isPending ? \"Sparar...\" : \"Spara klient\"}\n              </Button>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsOpen(false)}>\n                Avbryt\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5835},"client/src/components/implementation-plan-form.tsx":{"content":"import * as React from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertImplementationPlanSchema, type InsertImplementationPlan, type Client } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { FileCheck, Loader2 } from \"lucide-react\";\n\ninterface ImplementationPlanFormProps {\n  client: Client;\n}\n\nexport function ImplementationPlanForm({ client }: ImplementationPlanFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch existing implementation plan for this client\n  const { data: existingPlan, isLoading } = useQuery({\n    queryKey: [\"/api/implementation-plans\", \"client\", client.id],\n    queryFn: () => fetch(`/api/clients/${client.id}/implementation-plan`).then(res => \n      res.ok ? res.json() : null\n    ),\n  });\n\n  const form = useForm<InsertImplementationPlan>({\n    resolver: zodResolver(insertImplementationPlanSchema),\n    defaultValues: {\n      clientId: client.id,\n      staffId: client.staffId || \"\",\n      planContent: \"\",\n      goals: \"\",\n      activities: \"\",\n      followUpSchedule: \"\",\n      status: \"pending\",\n      followup1: false,\n      followup2: false,\n      comments: \"\",\n    },\n  });\n\n  // Update form when existing plan loads\n  React.useEffect(() => {\n    if (existingPlan) {\n      form.reset({\n        clientId: existingPlan.clientId,\n        staffId: existingPlan.staffId,\n        planContent: existingPlan.planContent || \"\",\n        goals: existingPlan.goals || \"\",\n        activities: existingPlan.activities || \"\",\n        followUpSchedule: existingPlan.followUpSchedule || \"\",\n        status: existingPlan.status,\n        followup1: existingPlan.followup1,\n        followup2: existingPlan.followup2,\n        comments: existingPlan.comments || \"\",\n      });\n    }\n  }, [existingPlan, form]);\n\n  const savePlan = useMutation({\n    mutationFn: (data: InsertImplementationPlan) => {\n      const url = existingPlan \n        ? `/api/implementation-plans/${existingPlan.id}`\n        : \"/api/implementation-plans\";\n      const method = existingPlan ? \"PUT\" : \"POST\";\n      return apiRequest(url, method, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/implementation-plans\"] });\n      toast({\n        title: \"Genomförandeplan sparad\",\n        description: \"Genomförandeplanen har sparats framgångsrikt.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Fel\",\n        description: \"Kunde inte spara genomförandeplan. Försök igen.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertImplementationPlan) => {\n    savePlan.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n          Laddar genomförandeplan...\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const statusOptions = [\n    { value: \"pending\", label: \"Väntande\" },\n    { value: \"in_progress\", label: \"Pågående\" },\n    { value: \"completed\", label: \"Klar\" },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <FileCheck className=\"mr-2 h-5 w-5\" />\n          Genomförandeplan - {client.initials}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"planContent\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Planinnehåll</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Beskriv genomförandeplanen...\"\n                      className=\"min-h-[100px]\"\n                      value={field.value || \"\"}\n                      onChange={field.onChange}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"goals\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mål</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Ange mål för genomförandet...\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"activities\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Aktiviteter</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Ange planerade aktiviteter...\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"followUpSchedule\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Uppföljningsschema</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Beskriv schema för uppföljning...\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Välj status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {statusOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"followup1\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Uppföljning 1 genomförd</FormLabel>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"followup2\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Uppföljning 2 genomförd</FormLabel>\n                    </div>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"comments\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Kommentarer</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Lägg till kommentarer...\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button type=\"submit\" disabled={savePlan.isPending}>\n              {savePlan.isPending ? \"Sparar...\" : \"Spara genomförandeplan\"}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9580}}}